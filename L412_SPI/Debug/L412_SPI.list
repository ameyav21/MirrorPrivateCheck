
L412_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08007100  08007100  00017100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007614  08007614  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800761c  0800761c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  200001dc  08007800  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08007800  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212c  00000000  00000000  000301f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00032320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  00032ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b13e  00000000  00000000  00033968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4d5  00000000  00000000  0004eaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a50e2  00000000  00000000  0005af7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010005d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e84  00000000  00000000  001000b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070e4 	.word	0x080070e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080070e4 	.word	0x080070e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <SPI_write>:
//		printf("\r\nError writing: Invalid HAL STATUS\r\n");
//	}
//}

void SPI_write (uint8_t address, uint8_t value) //function to write 1 byte in a register on the accelerometer  through SPI
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]

    data_tx[0]= (address<<1) | 0x00; /* set write operation= to enter Write mode you have to set the 8th bit of the first byte sent to 0.*/
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <SPI_write+0x50>)
 8000eb8:	701a      	strb	r2, [r3, #0]
    data_tx[1] = value; /*byte to write in the register*/
 8000eba:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <SPI_write+0x50>)
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	7053      	strb	r3, [r2, #1]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);  // pull the CS pin (PA12) low (selects the slave)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f001 f811 	bl	8001ef0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit (&hspi1, data_tx, 2, 100);  // write data to register specifying that it consists of 2 bytes (address+value)
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <SPI_write+0x50>)
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <SPI_write+0x54>)
 8000ed6:	f002 f91c 	bl	8003112 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);  // pull the CS pin high
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f001 f804 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000208 	.word	0x20000208
 8000ef4:	20000224 	.word	0x20000224

08000ef8 <SPI_read>:

void SPI_read (uint8_t address, int bytes) //function to read multiple bytes from a register on the accelerometer through SPI
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
    address = (address<<1) | 0x01;  /* set read operation= to enter Read mode you have to set the 8th bit of the first byte sent to 1.*/
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);   // pull the CS pin low
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1e:	f000 ffe7 	bl	8001ef0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit (&hspi1, &address, 1, 100);  // send address
 8000f22:	1df9      	adds	r1, r7, #7
 8000f24:	2364      	movs	r3, #100	; 0x64
 8000f26:	2201      	movs	r2, #1
 8000f28:	480a      	ldr	r0, [pc, #40]	; (8000f54 <SPI_read+0x5c>)
 8000f2a:	f002 f8f2 	bl	8003112 <HAL_SPI_Transmit>
    HAL_SPI_Receive (&hspi1, data, bytes, 100);  // receive the data
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	2364      	movs	r3, #100	; 0x64
 8000f34:	4908      	ldr	r1, [pc, #32]	; (8000f58 <SPI_read+0x60>)
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <SPI_read+0x5c>)
 8000f38:	f002 fa59 	bl	80033ee <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);   // pull the CS pin high
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f000 ffd3 	bl	8001ef0 <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000224 	.word	0x20000224
 8000f58:	20000214 	.word	0x20000214

08000f5c <WriteADXL355register>:

void   WriteADXL355register(uint8_t RegAddr, uint8_t RegData)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	SPI_write (RegAddr, RegData);
 8000f6c:	79ba      	ldrb	r2, [r7, #6]
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff94 	bl	8000ea0 <SPI_write>
	//ADXL355_SPI_Write(RegAddr, RegData);
    //ExchangeSPIword((((((uint16_t) RegAddr) << 1) | eWriteByte )  << 8) | RegData);
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ReadADXL355register>:


uint8_t ReadADXL355register(uint8_t RegAddr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	SPI_read (RegAddr, 1);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffb2 	bl	8000ef8 <SPI_read>
	uint8_t returnspidata = (uint8_t) data[0];
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <ReadADXL355register+0x24>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	73fb      	strb	r3, [r7, #15]
	return returnspidata;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
	//return ADXL355_SPI_Read(RegAddr);
    //return (uint8_t)(ExchangeSPIword(((((uint16_t) RegAddr) << 1) | eReadByte )  << 8));
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000214 	.word	0x20000214

08000fa8 <check_adxl>:

    //Configuring the Power Control or POWER_CTL register:
    SPI_write(ePOWER_CTL, 0x06); /* enters measurement mode and disables temperature reading */
}

int check_adxl(uint8_t RegAddr, uint8_t CheckValue){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
    SPI_read(RegAddr, 1);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff9b 	bl	8000ef8 <SPI_read>
    temp=(uint8_t)data[0];
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <check_adxl+0x3c>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <check_adxl+0x40>)
 8000fc8:	701a      	strb	r2, [r3, #0]
    return (temp==CheckValue);
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <check_adxl+0x40>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	79ba      	ldrb	r2, [r7, #6]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	2000020a 	.word	0x2000020a

08000fec <ResetADXL355>:
 *  2. Store these values in a host device (for example, a host microprocessor).
 *  3. After each software reset, read the same five registers. If the
 *     values differ, perform a software reset again until they match.
 */
bool ResetADXL355(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
    uint16_t reg, try;                          // Intentionally uninitialized.
    bool ADXL355status;                         // Intentionally uninitialized.
    static const uint16_t retryLimit = 3;

    // Read before reset.
    for(reg = eSHADOW1; reg <= eSHADOW5; reg++)
 8000ff2:	2350      	movs	r3, #80	; 0x50
 8000ff4:	82fb      	strh	r3, [r7, #22]
 8000ff6:	e011      	b.n	800101c <ResetADXL355+0x30>
    {
        Shadow[reg - eSHADOW1] = ReadADXL355register(reg);
 8000ff8:	8afb      	ldrh	r3, [r7, #22]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	f1a3 0450 	sub.w	r4, r3, #80	; 0x50
 8001002:	4610      	mov	r0, r2
 8001004:	f7ff ffbc 	bl	8000f80 <ReadADXL355register>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	f107 0318 	add.w	r3, r7, #24
 8001010:	4423      	add	r3, r4
 8001012:	f803 2c14 	strb.w	r2, [r3, #-20]
    for(reg = eSHADOW1; reg <= eSHADOW5; reg++)
 8001016:	8afb      	ldrh	r3, [r7, #22]
 8001018:	3301      	adds	r3, #1
 800101a:	82fb      	strh	r3, [r7, #22]
 800101c:	8afb      	ldrh	r3, [r7, #22]
 800101e:	2b54      	cmp	r3, #84	; 0x54
 8001020:	d9ea      	bls.n	8000ff8 <ResetADXL355+0xc>
    }

    for(try = 1; try <= retryLimit; try++)
 8001022:	2301      	movs	r3, #1
 8001024:	82bb      	strh	r3, [r7, #20]
 8001026:	e03c      	b.n	80010a2 <ResetADXL355+0xb6>
    {
        // Write Code 0x52 to reset the device, similar to a power-on reset (POR).
        WriteADXL355register(eReset, RESET_CODE);
 8001028:	2152      	movs	r1, #82	; 0x52
 800102a:	202f      	movs	r0, #47	; 0x2f
 800102c:	f7ff ff96 	bl	8000f5c <WriteADXL355register>
        HAL_Delay(1000);                      // 500 us delay. ADI minimum recommended delay after reset is 170uS
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f000 fce0 	bl	80019f8 <HAL_Delay>
        for(reg = eSHADOW1; reg <= eSHADOW5; reg++)
 8001038:	2350      	movs	r3, #80	; 0x50
 800103a:	82fb      	strh	r3, [r7, #22]
 800103c:	e025      	b.n	800108a <ResetADXL355+0x9e>
        {
            if(Shadow[reg - eSHADOW1] != ReadADXL355register(reg))
 800103e:	8afb      	ldrh	r3, [r7, #22]
 8001040:	3b50      	subs	r3, #80	; 0x50
 8001042:	f107 0218 	add.w	r2, r7, #24
 8001046:	4413      	add	r3, r2
 8001048:	f813 4c14 	ldrb.w	r4, [r3, #-20]
 800104c:	8afb      	ldrh	r3, [r7, #22]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff95 	bl	8000f80 <ReadADXL355register>
 8001056:	4603      	mov	r3, r0
 8001058:	429c      	cmp	r4, r3
 800105a:	d013      	beq.n	8001084 <ResetADXL355+0x98>
            {
                //Modbus_RAM.ec2.reset = FAULT; //Where is ec2?
                ADXL355status = FAULT;  // Trapped twice in approximately 2700 measure cycles.
 800105c:	2301      	movs	r3, #1
 800105e:	74fb      	strb	r3, [r7, #19]
                char *mex="eSHADOW1Fault...";
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <ResetADXL355+0xcc>)
 8001062:	60fb      	str	r3, [r7, #12]
				char line[2] = "\r\n";
 8001064:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001068:	803b      	strh	r3, [r7, #0]
				HAL_UART_Transmit(&huart2, (uint8_t *) mex, 15, 10);
 800106a:	230a      	movs	r3, #10
 800106c:	220f      	movs	r2, #15
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	4812      	ldr	r0, [pc, #72]	; (80010bc <ResetADXL355+0xd0>)
 8001072:	f002 ff05 	bl	8003e80 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *) line, 2, 10);
 8001076:	4639      	mov	r1, r7
 8001078:	230a      	movs	r3, #10
 800107a:	2202      	movs	r2, #2
 800107c:	480f      	ldr	r0, [pc, #60]	; (80010bc <ResetADXL355+0xd0>)
 800107e:	f002 feff 	bl	8003e80 <HAL_UART_Transmit>
                break;  // Terminate inner for loop.
 8001082:	e005      	b.n	8001090 <ResetADXL355+0xa4>
        for(reg = eSHADOW1; reg <= eSHADOW5; reg++)
 8001084:	8afb      	ldrh	r3, [r7, #22]
 8001086:	3301      	adds	r3, #1
 8001088:	82fb      	strh	r3, [r7, #22]
 800108a:	8afb      	ldrh	r3, [r7, #22]
 800108c:	2b54      	cmp	r3, #84	; 0x54
 800108e:	d9d6      	bls.n	800103e <ResetADXL355+0x52>
            }
        }
        if(eSHADOW5 < reg)  // Counted all five registers as matches?
 8001090:	8afb      	ldrh	r3, [r7, #22]
 8001092:	2b54      	cmp	r3, #84	; 0x54
 8001094:	d902      	bls.n	800109c <ResetADXL355+0xb0>
        {
            ADXL355status = NO_FAULT;
 8001096:	2300      	movs	r3, #0
 8001098:	74fb      	strb	r3, [r7, #19]
            break; // Terminate outer for loop. No need to retry.
 800109a:	e007      	b.n	80010ac <ResetADXL355+0xc0>
    for(try = 1; try <= retryLimit; try++)
 800109c:	8abb      	ldrh	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	82bb      	strh	r3, [r7, #20]
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <ResetADXL355+0xd4>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	8aba      	ldrh	r2, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d9bd      	bls.n	8001028 <ResetADXL355+0x3c>
        }
    }
    return ADXL355status;
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	371c      	adds	r7, #28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08007100 	.word	0x08007100
 80010bc:	20000288 	.word	0x20000288
 80010c0:	080071e4 	.word	0x080071e4

080010c4 <InitializeADXL355>:

bool InitializeADXL355(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
    //  he attributed spurious readings to a race condition, which would corrupt
    //  trim values that are set after the ICs are manufactured. He estimated that
    //  "shadow registers" could be misloaded one out of every 1000 times due to
    //  misalignment of internal clock and reset lines.
    //ADXL355status = ResetADXL355();
    ADXL355status = ResetADXL355();
 80010ca:	f7ff ff8f 	bl	8000fec <ResetADXL355>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]

    if (! (  (ANALOG_DEVICES_ID == ReadADXL355register(eDEVID_AD ))
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff54 	bl	8000f80 <ReadADXL355register>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bad      	cmp	r3, #173	; 0xad
 80010dc:	d01e      	beq.n	800111c <InitializeADXL355+0x58>
         || (MEMS_ID           == ReadADXL355register(eDEVID_MST))
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff ff4e 	bl	8000f80 <ReadADXL355register>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b1d      	cmp	r3, #29
 80010e8:	d018      	beq.n	800111c <InitializeADXL355+0x58>
         || (PART_ID           == ReadADXL355register(ePARTID   )) ))
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff48 	bl	8000f80 <ReadADXL355register>
 80010f0:	4603      	mov	r3, r0
    if (! (  (ANALOG_DEVICES_ID == ReadADXL355register(eDEVID_AD ))
 80010f2:	2bed      	cmp	r3, #237	; 0xed
 80010f4:	d012      	beq.n	800111c <InitializeADXL355+0x58>
    {
        ADXL355status = FAULT;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
        char *mex="STATUSFault...";
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <InitializeADXL355+0xa8>)
 80010fc:	60bb      	str	r3, [r7, #8]
		char line[2] = "\r\n";
 80010fe:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001102:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *) mex, 15, 10);
 8001104:	230a      	movs	r3, #10
 8001106:	220f      	movs	r2, #15
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <InitializeADXL355+0xac>)
 800110c:	f002 feb8 	bl	8003e80 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *) line, 2, 10);
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	230a      	movs	r3, #10
 8001114:	2202      	movs	r2, #2
 8001116:	4816      	ldr	r0, [pc, #88]	; (8001170 <InitializeADXL355+0xac>)
 8001118:	f002 feb2 	bl	8003e80 <HAL_UART_Transmit>
        //Modbus_RAM.ec2.readADXLreg = FAULT;
    }

    // While configuring the ADXL355 in an application, all configuration registers
    //  must be programmed before enabling measurement mode in the POWER_CTL register.
    WriteADXL355register(ePOWER_CTL, STANDBY);
 800111c:	2101      	movs	r1, #1
 800111e:	202d      	movs	r0, #45	; 0x2d
 8001120:	f7ff ff1c 	bl	8000f5c <WriteADXL355register>
    if (STANDBY != ReadADXL355register(ePOWER_CTL)) {
 8001124:	202d      	movs	r0, #45	; 0x2d
 8001126:	f7ff ff2b 	bl	8000f80 <ReadADXL355register>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d001      	beq.n	8001134 <InitializeADXL355+0x70>
        ADXL355status = FAULT;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
        //Modbus_RAM.ec2.writeADXLreg = FAULT;
    }

    WriteADXL355register(eFilter, HPF_CORNER | ADXLsampling[OptimizedSPS].ODR_LPF_setting);
 8001134:	2300      	movs	r3, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <InitializeADXL355+0xb0>)
 800113a:	460b      	mov	r3, r1
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	440b      	add	r3, r1
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f7ff ff06 	bl	8000f5c <WriteADXL355register>
    WriteADXL355register(eRange, I2C_HS | G2_RANGE);    // Same as default.
 8001150:	2181      	movs	r1, #129	; 0x81
 8001152:	202c      	movs	r0, #44	; 0x2c
 8001154:	f7ff ff02 	bl	8000f5c <WriteADXL355register>
    // ToDo: Explicitly set all other registers.
    //       Perhaps develop function for multi-byte writes and upload a table.
    WriteADXL355register(ePOWER_CTL, MEASUREMENT_MODE);
 8001158:	2100      	movs	r1, #0
 800115a:	202d      	movs	r0, #45	; 0x2d
 800115c:	f7ff fefe 	bl	8000f5c <WriteADXL355register>
    for(RegNum = eDEVID_AD; RegNum <= eReset; RegNum++) {
        ADXL355param[RegNum] = ReadADXL355register(RegNum);
    }
#endif

    return ADXL355status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	08007114 	.word	0x08007114
 8001170:	20000288 	.word	0x20000288
 8001174:	08007160 	.word	0x08007160

08001178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_SPI1_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_SPI1_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_SPI1_Init+0x74>)
 8001184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_SPI1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_SPI1_Init+0x74>)
 8001192:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001196:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_SPI1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_SPI1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_SPI1_Init+0x74>)
 80011a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_SPI1_Init+0x74>)
 80011ae:	2220      	movs	r2, #32
 80011b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_SPI1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_SPI1_Init+0x74>)
 80011c6:	2207      	movs	r2, #7
 80011c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_SPI1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_SPI1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_SPI1_Init+0x74>)
 80011d8:	f001 fef8 	bl	8002fcc <HAL_SPI_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f97b 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000224 	.word	0x20000224
 80011f0:	40013000 	.word	0x40013000

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <MX_GPIO_Init+0x10c>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a3c      	ldr	r2, [pc, #240]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a36      	ldr	r2, [pc, #216]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b34      	ldr	r3, [pc, #208]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <MX_GPIO_Init+0x10c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a30      	ldr	r2, [pc, #192]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_GPIO_Init+0x10c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f248 01b0 	movw	r1, #32944	; 0x80b0
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f000 fe3c 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <MX_GPIO_Init+0x110>)
 8001280:	f000 fe36 	bl	8001ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_GPIO_Init+0x114>)
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_GPIO_Init+0x118>)
 800129a:	f000 fcb7 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_15;
 800129e:	f248 03b0 	movw	r3, #32944	; 0x80b0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fca7 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fc9a 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_GPIO_Init+0x110>)
 80012f2:	f000 fc8b 	bl	8001c0c <HAL_GPIO_Init>

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400
 8001308:	10210000 	.word	0x10210000
 800130c:	48000800 	.word	0x48000800

08001310 <MX_USART2_UART_Init>:


static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <MX_USART2_UART_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001354:	f002 fd46 	bl	8003de4 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f8bd 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000288 	.word	0x20000288
 800136c:	40004400 	.word	0x40004400

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f000 fac3 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f85f 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f7ff ff39 	bl	80011f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001382:	f7ff ffc5 	bl	8001310 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001386:	f7ff fef7 	bl	8001178 <MX_SPI1_Init>

  // CS pin should default high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f000 fdac 	bl	8001ef0 <HAL_GPIO_WritePin>
//
//
//    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); //sets CS line high when not reading/writing
//    /* USER CODE BEGIN 2 */
//    HAL_Delay(1000);
	  char *mex="NewProgram11...";
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <main+0xbc>)
 800139a:	61fb      	str	r3, [r7, #28]
	  char line[2] = "\r\n";
 800139c:	f640 230d 	movw	r3, #2573	; 0xa0d
 80013a0:	813b      	strh	r3, [r7, #8]
	  HAL_UART_Transmit(&huart2, (uint8_t *) mex, 15, 10);
 80013a2:	230a      	movs	r3, #10
 80013a4:	220f      	movs	r2, #15
 80013a6:	69f9      	ldr	r1, [r7, #28]
 80013a8:	4821      	ldr	r0, [pc, #132]	; (8001430 <main+0xc0>)
 80013aa:	f002 fd69 	bl	8003e80 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *) line, 2, 10);
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	230a      	movs	r3, #10
 80013b4:	2202      	movs	r2, #2
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <main+0xc0>)
 80013b8:	f002 fd62 	bl	8003e80 <HAL_UART_Transmit>
	  bool status = InitializeADXL355();
 80013bc:	f7ff fe82 	bl	80010c4 <InitializeADXL355>
 80013c0:	4603      	mov	r3, r0
 80013c2:	76fb      	strb	r3, [r7, #27]

	  if (status==0){
 80013c4:	7efb      	ldrb	r3, [r7, #27]
 80013c6:	f083 0301 	eor.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d010      	beq.n	80013f2 <main+0x82>
	  		  char *mex="InitSuccess............";
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <main+0xc4>)
 80013d2:	617b      	str	r3, [r7, #20]
	  		  char line[2] = "\r\n";
 80013d4:	f640 230d 	movw	r3, #2573	; 0xa0d
 80013d8:	80bb      	strh	r3, [r7, #4]
	  		  HAL_UART_Transmit(&huart2, (uint8_t *) mex, 15, 10);
 80013da:	230a      	movs	r3, #10
 80013dc:	220f      	movs	r2, #15
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <main+0xc0>)
 80013e2:	f002 fd4d 	bl	8003e80 <HAL_UART_Transmit>
	  		  HAL_UART_Transmit(&huart2, (uint8_t *) line, 2, 10);
 80013e6:	1d39      	adds	r1, r7, #4
 80013e8:	230a      	movs	r3, #10
 80013ea:	2202      	movs	r2, #2
 80013ec:	4810      	ldr	r0, [pc, #64]	; (8001430 <main+0xc0>)
 80013ee:	f002 fd47 	bl	8003e80 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(200);
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f000 fb00 	bl	80019f8 <HAL_Delay>
	  int checknum = check_adxl(eDEVID_AD, ANALOG_DEVICES_ID);
 80013f8:	21ad      	movs	r1, #173	; 0xad
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fdd4 	bl	8000fa8 <check_adxl>
 8001400:	6138      	str	r0, [r7, #16]
	  if (checknum==1){
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d1f4      	bne.n	80013f2 <main+0x82>
		  char *mex="True............";
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <main+0xc8>)
 800140a:	60fb      	str	r3, [r7, #12]
		  char line[2] = "\r\n";
 800140c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001410:	803b      	strh	r3, [r7, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *) mex, 15, 10);
 8001412:	230a      	movs	r3, #10
 8001414:	220f      	movs	r2, #15
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <main+0xc0>)
 800141a:	f002 fd31 	bl	8003e80 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *) line, 2, 10);
 800141e:	4639      	mov	r1, r7
 8001420:	230a      	movs	r3, #10
 8001422:	2202      	movs	r2, #2
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <main+0xc0>)
 8001426:	f002 fd2b 	bl	8003e80 <HAL_UART_Transmit>
  {
 800142a:	e7e2      	b.n	80013f2 <main+0x82>
 800142c:	08007124 	.word	0x08007124
 8001430:	20000288 	.word	0x20000288
 8001434:	08007134 	.word	0x08007134
 8001438:	0800714c 	.word	0x0800714c

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b096      	sub	sp, #88	; 0x58
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	2244      	movs	r2, #68	; 0x44
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f003 f972 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001462:	f000 fd6b 	bl	8001f3c <HAL_PWREx_ControlVoltageScaling>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800146c:	f000 f836 	bl	80014dc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001470:	2310      	movs	r3, #16
 8001472:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001474:	2301      	movs	r3, #1
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800147c:	2360      	movs	r3, #96	; 0x60
 800147e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2302      	movs	r3, #2
 8001482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001484:	2301      	movs	r3, #1
 8001486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800148c:	2328      	movs	r3, #40	; 0x28
 800148e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fda3 	bl	8001fe8 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x70>
  {
    Error_Handler();
 80014a8:	f000 f818 	bl	80014dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b0:	2303      	movs	r3, #3
 80014b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	2104      	movs	r1, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 f9f5 	bl	80028b4 <HAL_RCC_ClockConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014d0:	f000 f804 	bl	80014dc <Error_Handler>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3758      	adds	r7, #88	; 0x58
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x44>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <HAL_SPI_MspInit+0x80>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d129      	bne.n	80015a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_SPI_MspInit+0x84>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001582:	f641 0302 	movw	r3, #6146	; 0x1802
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001594:	2305      	movs	r3, #5
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f000 fb33 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b096      	sub	sp, #88	; 0x58
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	2234      	movs	r2, #52	; 0x34
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 f8ab 	bl	8004734 <memset>
  if(huart->Instance==USART2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_UART_MspInit+0xa8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d136      	bne.n	8001656 <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fb63 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001600:	f7ff ff6c 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_UART_MspInit+0xac>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_UART_MspInit+0xac>)
 800160a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_UART_MspInit+0xac>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_UART_MspInit+0xac>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_UART_MspInit+0xac>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_UART_MspInit+0xac>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001634:	230c      	movs	r3, #12
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001644:	2307      	movs	r3, #7
 8001646:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f000 fadb 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3758      	adds	r7, #88	; 0x58
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40004400 	.word	0x40004400
 8001664:	40021000 	.word	0x40021000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f980 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_kill>:

int _kill(int pid, int sig)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016d6:	f003 f803 	bl	80046e0 <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2216      	movs	r2, #22
 80016de:	601a      	str	r2, [r3, #0]
	return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_exit>:

void _exit (int status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffe7 	bl	80016cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016fe:	e7fe      	b.n	80016fe <_exit+0x12>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
	}

return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
	}
	return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	605a      	str	r2, [r3, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f002 ff68 	bl	80046e0 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000a000 	.word	0x2000a000
 800183c:	00000400 	.word	0x00000400
 8001840:	200001f8 	.word	0x200001f8
 8001844:	20000328 	.word	0x20000328

08001848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <SystemInit+0x5c>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <SystemInit+0x5c>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <SystemInit+0x60>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <SystemInit+0x60>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <SystemInit+0x60>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <SystemInit+0x60>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <SystemInit+0x60>)
 8001874:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001878:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800187c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <SystemInit+0x60>)
 8001880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001884:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <SystemInit+0x60>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <SystemInit+0x60>)
 800188c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001890:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SystemInit+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00
 80018a8:	40021000 	.word	0x40021000

080018ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b0:	f7ff ffca 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018b6:	e003      	b.n	80018c0 <LoopCopyDataInit>

080018b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018be:	3104      	adds	r1, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018c0:	480a      	ldr	r0, [pc, #40]	; (80018ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018c8:	d3f6      	bcc.n	80018b8 <CopyDataInit>
	ldr	r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018cc:	e002      	b.n	80018d4 <LoopFillZerobss>

080018ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018d0:	f842 3b04 	str.w	r3, [r2], #4

080018d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <LoopForever+0x16>)
	cmp	r2, r3
 80018d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018d8:	d3f9      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f002 ff07 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018de:	f7ff fd47 	bl	8001370 <main>

080018e2 <LoopForever>:

LoopForever:
    b LoopForever
 80018e2:	e7fe      	b.n	80018e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018e4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80018e8:	08007624 	.word	0x08007624
	ldr	r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018f0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80018f4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80018f8:	20000328 	.word	0x20000328

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_Init+0x3c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_Init+0x3c>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001916:	2003      	movs	r0, #3
 8001918:	f000 f944 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191c:	2000      	movs	r0, #0
 800191e:	f000 f80f 	bl	8001940 <HAL_InitTick>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	e001      	b.n	8001932 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192e:	f7ff fddb 	bl	80014e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001932:	79fb      	ldrb	r3, [r7, #7]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_InitTick+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_InitTick+0x70>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_InitTick+0x6c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f941 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d809      	bhi.n	8001990 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f919 	bl	8001bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_InitTick+0x74>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e007      	b.n	80019a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e004      	b.n	80019a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e001      	b.n	80019a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000314 	.word	0x20000314

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000314 	.word	0x20000314

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff47 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5c 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e14e      	b.n	8001eba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8140 	beq.w	8001eb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d00b      	beq.n	8001c54 <HAL_GPIO_Init+0x48>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b12      	cmp	r3, #18
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 0201 	and.w	r2, r3, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0xea>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 809a 	beq.w	8001eb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	4a54      	ldr	r2, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8c:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a46      	ldr	r2, [pc, #280]	; (8001ee0 <HAL_GPIO_Init+0x2d4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a45      	ldr	r2, [pc, #276]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1d8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1d4>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de0:	2307      	movs	r3, #7
 8001de2:	e004      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001dec:	2300      	movs	r3, #0
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	f002 0203 	and.w	r2, r2, #3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	4093      	lsls	r3, r2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dfe:	4937      	ldr	r1, [pc, #220]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e0c:	4b37      	ldr	r3, [pc, #220]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eae:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f47f aea9 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	48000c00 	.word	0x48000c00
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
 8001efc:	4613      	mov	r3, r2
 8001efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f00:	787b      	ldrb	r3, [r7, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40007000 	.word	0x40007000

08001f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f4a:	d130      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f58:	d038      	beq.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2232      	movs	r2, #50	; 0x32
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0c9b      	lsrs	r3, r3, #18
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f80:	e002      	b.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f94:	d102      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f2      	bne.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa8:	d110      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e00f      	b.n	8001fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d007      	beq.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	431bde83 	.word	0x431bde83

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f000 bc56 	b.w	80028a8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffc:	4ba1      	ldr	r3, [pc, #644]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002006:	4b9f      	ldr	r3, [pc, #636]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80e6 	beq.w	80021ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_RCC_OscConfig+0x4c>
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	f040 808d 	bne.w	8002146 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b01      	cmp	r3, #1
 8002030:	f040 8089 	bne.w	8002146 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002034:	4b93      	ldr	r3, [pc, #588]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_RCC_OscConfig+0x66>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f000 bc2d 	b.w	80028a8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002052:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_RCC_OscConfig+0x80>
 800205e:	4b89      	ldr	r3, [pc, #548]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002066:	e005      	b.n	8002074 <HAL_RCC_OscConfig+0x8c>
 8002068:	4b86      	ldr	r3, [pc, #536]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	4293      	cmp	r3, r2
 8002076:	d224      	bcs.n	80020c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fdbf 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	f000 bc0d 	b.w	80028a8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208e:	4b7d      	ldr	r3, [pc, #500]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7c      	ldr	r2, [pc, #496]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b7a      	ldr	r3, [pc, #488]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	4977      	ldr	r1, [pc, #476]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	4972      	ldr	r1, [pc, #456]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e025      	b.n	800210e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c2:	4b70      	ldr	r3, [pc, #448]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6f      	ldr	r2, [pc, #444]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	496a      	ldr	r1, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	4965      	ldr	r1, [pc, #404]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fd7e 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e3cc      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800210e:	f000 fcb3 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	495a      	ldr	r1, [pc, #360]	; (8002288 <HAL_RCC_OscConfig+0x2a0>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x2a4>)
 800212c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800212e:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x2a8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fc04 	bl	8001940 <HAL_InitTick>
 8002138:	4603      	mov	r3, r0
 800213a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800213c:	7dfb      	ldrb	r3, [r7, #23]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d052      	beq.n	80021e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	e3b0      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d032      	beq.n	80021b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800214e:	4b4d      	ldr	r3, [pc, #308]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4c      	ldr	r2, [pc, #304]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800215a:	f7ff fc41 	bl	80019e0 <HAL_GetTick>
 800215e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002162:	f7ff fc3d 	bl	80019e0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e399      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	493a      	ldr	r1, [pc, #232]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	4935      	ldr	r1, [pc, #212]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
 80021b2:	e01a      	b.n	80021ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021b4:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc0e 	bl	80019e0 <HAL_GetTick>
 80021c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021c8:	f7ff fc0a 	bl	80019e0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e366      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1e0>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d073      	beq.n	80022de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x220>
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d10e      	bne.n	8002220 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d10b      	bne.n	8002220 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d063      	beq.n	80022dc <HAL_RCC_OscConfig+0x2f4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d15f      	bne.n	80022dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e343      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x250>
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e01d      	b.n	8002274 <HAL_RCC_OscConfig+0x28c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x274>
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x28c>
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_RCC_OscConfig+0x29c>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff fbb0 	bl	80019e0 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002282:	e010      	b.n	80022a6 <HAL_RCC_OscConfig+0x2be>
 8002284:	40021000 	.word	0x40021000
 8002288:	080071e8 	.word	0x080071e8
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fba4 	bl	80019e0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e300      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4ba0      	ldr	r3, [pc, #640]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x2ac>
 80022b2:	e014      	b.n	80022de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff fb94 	bl	80019e0 <HAL_GetTick>
 80022b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fb90 	bl	80019e0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e2ec      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ce:	4b96      	ldr	r3, [pc, #600]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x2d4>
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d060      	beq.n	80023ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_OscConfig+0x314>
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d119      	bne.n	800232a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d116      	bne.n	800232a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fc:	4b8a      	ldr	r3, [pc, #552]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x32c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e2c9      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b84      	ldr	r3, [pc, #528]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	4981      	ldr	r1, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002328:	e040      	b.n	80023ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d023      	beq.n	800237a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002332:	4b7d      	ldr	r3, [pc, #500]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7c      	ldr	r2, [pc, #496]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7ff fb4f 	bl	80019e0 <HAL_GetTick>
 8002342:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7ff fb4b 	bl	80019e0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e2a7      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002358:	4b73      	ldr	r3, [pc, #460]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	496d      	ldr	r1, [pc, #436]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	e018      	b.n	80023ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fb2b 	bl	80019e0 <HAL_GetTick>
 800238a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fb27 	bl	80019e0 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e283      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f0      	bne.n	800238e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d07f      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05f      	beq.n	8002480 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80023c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699a      	ldr	r2, [r3, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d037      	beq.n	8002446 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e25c      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	4a4a      	ldr	r2, [pc, #296]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002408:	f7ff faea 	bl	80019e0 <HAL_GetTick>
 800240c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff fae6 	bl	80019e0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b11      	cmp	r3, #17
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e242      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ef      	bne.n	8002410 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002446:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244c:	4a36      	ldr	r2, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7ff fac3 	bl	80019e0 <HAL_GetTick>
 800245a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245e:	f7ff fabf 	bl	80019e0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b11      	cmp	r3, #17
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e21b      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0ef      	beq.n	800245e <HAL_RCC_OscConfig+0x476>
 800247e:	e01b      	b.n	80024b8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	4a28      	ldr	r2, [pc, #160]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7ff faa6 	bl	80019e0 <HAL_GetTick>
 8002494:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7ff faa2 	bl	80019e0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b11      	cmp	r3, #17
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1fe      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80024ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ef      	bne.n	8002498 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80c1 	beq.w	8002648 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10e      	bne.n	80024f6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x540>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x544>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_OscConfig+0x544>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x544>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7ff fa67 	bl	80019e0 <HAL_GetTick>
 8002512:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002514:	e00c      	b.n	8002530 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7ff fa63 	bl	80019e0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d905      	bls.n	8002530 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1bf      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	4bb1      	ldr	r3, [pc, #708]	; (80027f8 <HAL_RCC_OscConfig+0x810>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ec      	beq.n	8002516 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d02c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002548:	4bac      	ldr	r3, [pc, #688]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	49a8      	ldr	r1, [pc, #672]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800256e:	4ba3      	ldr	r3, [pc, #652]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	4aa1      	ldr	r2, [pc, #644]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800257e:	4b9f      	ldr	r3, [pc, #636]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	4a9d      	ldr	r2, [pc, #628]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258e:	e018      	b.n	80025c2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002590:	4b9a      	ldr	r3, [pc, #616]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a99      	ldr	r2, [pc, #612]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	e00f      	b.n	80025c2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025a2:	4b96      	ldr	r3, [pc, #600]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a94      	ldr	r2, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025b2:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	4a90      	ldr	r2, [pc, #576]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7ff fa09 	bl	80019e0 <HAL_GetTick>
 80025ce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fa05 	bl	80019e0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e15f      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e8:	4b84      	ldr	r3, [pc, #528]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ed      	beq.n	80025d2 <HAL_RCC_OscConfig+0x5ea>
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff f9f2 	bl	80019e0 <HAL_GetTick>
 80025fc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7ff f9ee 	bl	80019e0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e148      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002616:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ed      	bne.n	8002600 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002624:	4b75      	ldr	r3, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a74      	ldr	r2, [pc, #464]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800262c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03c      	beq.n	80026ce <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800265c:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800265e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f9b8 	bl	80019e0 <HAL_GetTick>
 8002670:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7ff f9b4 	bl	80019e0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e110      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002686:	4b5d      	ldr	r3, [pc, #372]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCC_OscConfig+0x68c>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269c:	4a57      	ldr	r2, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff f99b 	bl	80019e0 <HAL_GetTick>
 80026aa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ae:	f7ff f997 	bl	80019e0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0f3      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c0:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80026c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80e7 	beq.w	80028a6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	2b02      	cmp	r3, #2
 80026de:	f040 80b7 	bne.w	8002850 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026e2:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0203 	and.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d124      	bne.n	8002740 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	3b01      	subs	r3, #1
 8002702:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d11b      	bne.n	8002740 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d113      	bne.n	8002740 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	3b01      	subs	r3, #1
 8002726:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d109      	bne.n	8002740 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	085b      	lsrs	r3, r3, #1
 8002738:	3b01      	subs	r3, #1
 800273a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d061      	beq.n	8002804 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d056      	beq.n	80027f4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800274c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002750:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002752:	f7ff f945 	bl	80019e0 <HAL_GetTick>
 8002756:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff f941 	bl	80019e0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e09d      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCC_OscConfig+0x818>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002788:	3a01      	subs	r2, #1
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002792:	0212      	lsls	r2, r2, #8
 8002794:	4311      	orrs	r1, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800279a:	0852      	lsrs	r2, r2, #1
 800279c:	3a01      	subs	r2, #1
 800279e:	0552      	lsls	r2, r2, #21
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0652      	lsls	r2, r2, #25
 80027ac:	430a      	orrs	r2, r1
 80027ae:	4913      	ldr	r1, [pc, #76]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027cc:	f7ff f908 	bl	80019e0 <HAL_GetTick>
 80027d0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f904 	bl	80019e0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e060      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_OscConfig+0x814>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f2:	e058      	b.n	80028a6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e057      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
 80027f8:	40007000 	.word	0x40007000
 80027fc:	40021000 	.word	0x40021000
 8002800:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d14a      	bne.n	80028a6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a23      	ldr	r2, [pc, #140]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002826:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002828:	f7ff f8da 	bl	80019e0 <HAL_GetTick>
 800282c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7ff f8d6 	bl	80019e0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e032      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x848>
 800284e:	e02a      	b.n	80028a6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d025      	beq.n	80028a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 800285c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002860:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002868:	f023 0303 	bic.w	r3, r3, #3
 800286c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002874:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002878:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7ff f8b1 	bl	80019e0 <HAL_GetTick>
 800287e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff f8ad 	bl	80019e0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e009      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x8c8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x89a>
 80028a0:	e001      	b.n	80028a6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0c8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d910      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 0207 	bic.w	r2, r3, #7
 80028de:	4961      	ldr	r1, [pc, #388]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b0      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d04c      	beq.n	800299e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d107      	bne.n	800291c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290c:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d121      	bne.n	800295c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e09e      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d107      	bne.n	8002934 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d115      	bne.n	800295c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e092      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e086      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e07e      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800295c:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	493f      	ldr	r1, [pc, #252]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296e:	f7ff f837 	bl	80019e0 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002974:	e00a      	b.n	800298c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002976:	f7ff f833 	bl	80019e0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e066      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 020c 	and.w	r2, r3, #12
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	429a      	cmp	r2, r3
 800299c:	d1eb      	bne.n	8002976 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029aa:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	492c      	ldr	r1, [pc, #176]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d210      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4924      	ldr	r1, [pc, #144]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <HAL_RCC_ClockConfig+0x1b0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e036      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4910      	ldr	r1, [pc, #64]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2a:	f000 f825 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490c      	ldr	r1, [pc, #48]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe ff76 	bl	8001940 <HAL_InitTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a58:	7afb      	ldrb	r3, [r7, #11]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080071e8 	.word	0x080071e8
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000004 	.word	0x20000004

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a86:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d121      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d11e      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad4:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e004      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002afc:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002afe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d134      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d003      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0xac>
 8002b1c:	e005      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b20:	617b      	str	r3, [r7, #20]
      break;
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b26:	617b      	str	r3, [r7, #20]
      break;
 8002b28:	e002      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	617b      	str	r3, [r7, #20]
      break;
 8002b2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fb02 f203 	mul.w	r2, r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0e5b      	lsrs	r3, r3, #25
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	3301      	adds	r3, #1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b70:	69bb      	ldr	r3, [r7, #24]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08007200 	.word	0x08007200
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	007a1200 	.word	0x007a1200

08002b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bbe:	5ccb      	ldrb	r3, [r1, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	080071f8 	.word	0x080071f8

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bd8:	f7ff ffda 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	080071f8 	.word	0x080071f8

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f982 	bl	8001f20 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
 8002c1e:	e014      	b.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f972 	bl	8001f20 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d10b      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d919      	bls.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5c:	d902      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e013      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e010      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d902      	bls.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c70:	2303      	movs	r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e00a      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d102      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e004      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b70      	cmp	r3, #112	; 0x70
 8002c86:	d101      	bne.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c88:	2301      	movs	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 0207 	bic.w	r2, r3, #7
 8002c94:	4909      	ldr	r1, [pc, #36]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 809e 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ce2:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	; 0x58
 8002d04:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d14:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a39      	ldr	r2, [pc, #228]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fe5e 	bl	80019e0 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d26:	e009      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe fe5a 	bl	80019e0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d902      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	74fb      	strb	r3, [r7, #19]
        break;
 8002d3a:	e005      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ef      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d15a      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01e      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d019      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d96:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d016      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe1a 	bl	80019e0 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe fe16 	bl	80019e0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc6:	e006      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ec      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002df2:	e009      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
 8002df8:	e006      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e08:	7c7b      	ldrb	r3, [r7, #17]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a6d      	ldr	r2, [pc, #436]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4964      	ldr	r1, [pc, #400]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e48:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 020c 	bic.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	495c      	ldr	r1, [pc, #368]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e6a:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4953      	ldr	r1, [pc, #332]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e8c:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	494b      	ldr	r1, [pc, #300]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4942      	ldr	r1, [pc, #264]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	493a      	ldr	r1, [pc, #232]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	4931      	ldr	r1, [pc, #196]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	4929      	ldr	r1, [pc, #164]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4920      	ldr	r1, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	4918      	ldr	r1, [pc, #96]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f82:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	490a      	ldr	r1, [pc, #40]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e095      	b.n	800310a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fee:	d009      	beq.n	8003004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fa86 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003044:	d902      	bls.n	800304c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e002      	b.n	8003052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800304c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800305a:	d007      	beq.n	800306c <HAL_SPI_Init+0xa0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003064:	d002      	beq.n	800306c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	f003 0204 	and.w	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030e8:	ea42 0103 	orr.w	r1, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b088      	sub	sp, #32
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_SPI_Transmit+0x22>
 8003130:	2302      	movs	r3, #2
 8003132:	e158      	b.n	80033e6 <HAL_SPI_Transmit+0x2d4>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800313c:	f7fe fc50 	bl	80019e0 <HAL_GetTick>
 8003140:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003156:	e13d      	b.n	80033d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_SPI_Transmit+0x52>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003168:	e134      	b.n	80033d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2203      	movs	r2, #3
 800316e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b4:	d10f      	bne.n	80031d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d007      	beq.n	80031f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031fc:	d94b      	bls.n	8003296 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0xfa>
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d13e      	bne.n	800328a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003230:	e02b      	b.n	800328a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d112      	bne.n	8003266 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003264:	e011      	b.n	800328a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003266:	f7fe fbbb 	bl	80019e0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d803      	bhi.n	800327e <HAL_SPI_Transmit+0x16c>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d102      	bne.n	8003284 <HAL_SPI_Transmit+0x172>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003288:	e0a4      	b.n	80033d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ce      	bne.n	8003232 <HAL_SPI_Transmit+0x120>
 8003294:	e07c      	b.n	8003390 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Transmit+0x192>
 800329e:	8afb      	ldrh	r3, [r7, #22]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d170      	bne.n	8003386 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d912      	bls.n	80032d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	881a      	ldrh	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	1c9a      	adds	r2, r3, #2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b02      	subs	r3, #2
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032d2:	e058      	b.n	8003386 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	330c      	adds	r3, #12
 80032de:	7812      	ldrb	r2, [r2, #0]
 80032e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032fa:	e044      	b.n	8003386 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d12b      	bne.n	8003362 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d912      	bls.n	800333a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	1c9a      	adds	r2, r3, #2
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b02      	subs	r3, #2
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003338:	e025      	b.n	8003386 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003360:	e011      	b.n	8003386 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003362:	f7fe fb3d 	bl	80019e0 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d803      	bhi.n	800337a <HAL_SPI_Transmit+0x268>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d102      	bne.n	8003380 <HAL_SPI_Transmit+0x26e>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003384:	e026      	b.n	80033d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1b5      	bne.n	80032fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fcdf 	bl	8003d58 <SPI_EndRxTxTransaction>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e000      	b.n	80033d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80033d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af02      	add	r7, sp, #8
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340a:	d112      	bne.n	8003432 <HAL_SPI_Receive+0x44>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10e      	bne.n	8003432 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2204      	movs	r2, #4
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800341c:	88fa      	ldrh	r2, [r7, #6]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4613      	mov	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f910 	bl	800364e <HAL_SPI_TransmitReceive>
 800342e:	4603      	mov	r3, r0
 8003430:	e109      	b.n	8003646 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_SPI_Receive+0x52>
 800343c:	2302      	movs	r3, #2
 800343e:	e102      	b.n	8003646 <HAL_SPI_Receive+0x258>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003448:	f7fe faca 	bl	80019e0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d002      	beq.n	8003460 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800345e:	e0e9      	b.n	8003634 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_Receive+0x7e>
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d102      	bne.n	8003472 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003470:	e0e0      	b.n	8003634 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2204      	movs	r2, #4
 8003476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034bc:	d908      	bls.n	80034d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	e007      	b.n	80034e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e8:	d10f      	bne.n	800350a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003508:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d007      	beq.n	8003528 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003530:	d867      	bhi.n	8003602 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003532:	e030      	b.n	8003596 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d117      	bne.n	8003572 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f103 020c 	add.w	r2, r3, #12
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003570:	e011      	b.n	8003596 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003572:	f7fe fa35 	bl	80019e0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d803      	bhi.n	800358a <HAL_SPI_Receive+0x19c>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Receive+0x1a2>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003594:	e04e      	b.n	8003634 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1c8      	bne.n	8003534 <HAL_SPI_Receive+0x146>
 80035a2:	e034      	b.n	800360e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d115      	bne.n	80035de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	b292      	uxth	r2, r2
 80035be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	1c9a      	adds	r2, r3, #2
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035dc:	e011      	b.n	8003602 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035de:	f7fe f9ff 	bl	80019e0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d803      	bhi.n	80035f6 <HAL_SPI_Receive+0x208>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d102      	bne.n	80035fc <HAL_SPI_Receive+0x20e>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003600:	e018      	b.n	8003634 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ca      	bne.n	80035a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fb48 	bl	8003ca8 <SPI_EndRxTransaction>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	75fb      	strb	r3, [r7, #23]
 8003630:	e000      	b.n	8003634 <HAL_SPI_Receive+0x246>
  }

error :
 8003632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003644:	7dfb      	ldrb	r3, [r7, #23]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800365c:	2301      	movs	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_SPI_TransmitReceive+0x26>
 8003670:	2302      	movs	r3, #2
 8003672:	e1fb      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x41e>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367c:	f7fe f9b0 	bl	80019e0 <HAL_GetTick>
 8003680:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003688:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003690:	887b      	ldrh	r3, [r7, #2]
 8003692:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003698:	7efb      	ldrb	r3, [r7, #27]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d00e      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x6e>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a4:	d106      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x66>
 80036ae:	7efb      	ldrb	r3, [r7, #27]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d003      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036ba:	e1cd      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x80>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SPI_TransmitReceive+0x80>
 80036c8:	887b      	ldrh	r3, [r7, #2]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036d4:	e1c0      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d003      	beq.n	80036ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2205      	movs	r2, #5
 80036e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800372c:	d802      	bhi.n	8003734 <HAL_SPI_TransmitReceive+0xe6>
 800372e:	8a3b      	ldrh	r3, [r7, #16]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d908      	bls.n	8003746 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	e007      	b.n	8003756 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d007      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377c:	d97c      	bls.n	8003878 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_SPI_TransmitReceive+0x13e>
 8003786:	8a7b      	ldrh	r3, [r7, #18]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d169      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	1c9a      	adds	r2, r3, #2
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b0:	e056      	b.n	8003860 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d11b      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x1aa>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_SPI_TransmitReceive+0x1aa>
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d113      	bne.n	80037f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11c      	bne.n	8003840 <HAL_SPI_TransmitReceive+0x1f2>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	b292      	uxth	r2, r2
 800381e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	1c9a      	adds	r2, r3, #2
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003840:	f7fe f8ce 	bl	80019e0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	429a      	cmp	r2, r3
 800384e:	d807      	bhi.n	8003860 <HAL_SPI_TransmitReceive+0x212>
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d003      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800385e:	e0fb      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1a3      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x164>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d19d      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x164>
 8003876:	e0df      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x23a>
 8003880:	8a7b      	ldrh	r3, [r7, #18]
 8003882:	2b01      	cmp	r3, #1
 8003884:	f040 80cb 	bne.w	8003a1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d912      	bls.n	80038b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b02      	subs	r3, #2
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b6:	e0b2      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038de:	e09e      	b.n	8003a1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d134      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x30a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02f      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x30a>
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d12c      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d912      	bls.n	800392e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b02      	subs	r3, #2
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800392c:	e012      	b.n	8003954 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d148      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x3aa>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d042      	beq.n	80039f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d923      	bls.n	80039c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	b292      	uxth	r2, r2
 800398a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b02      	subs	r3, #2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d81f      	bhi.n	80039f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	e016      	b.n	80039f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f103 020c 	add.w	r2, r3, #12
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039f4:	2301      	movs	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039f8:	f7fd fff2 	bl	80019e0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d803      	bhi.n	8003a10 <HAL_SPI_TransmitReceive+0x3c2>
 8003a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x3c8>
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a1c:	e01c      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f af5b 	bne.w	80038e0 <HAL_SPI_TransmitReceive+0x292>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f47f af54 	bne.w	80038e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f98b 	bl	8003d58 <SPI_EndRxTxTransaction>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	661a      	str	r2, [r3, #96]	; 0x60
 8003a54:	e000      	b.n	8003a58 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a84:	f7fd ffac 	bl	80019e0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a94:	f7fd ffa4 	bl	80019e0 <HAL_GetTick>
 8003a98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a9a:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	015b      	lsls	r3, r3, #5
 8003aa0:	0d1b      	lsrs	r3, r3, #20
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aaa:	e054      	b.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d050      	beq.n	8003b56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ab4:	f7fd ff94 	bl	80019e0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d902      	bls.n	8003aca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d13d      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ad8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae2:	d111      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d004      	beq.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af6:	d107      	bne.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b10:	d10f      	bne.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e017      	b.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d19b      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000

08003b84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b92:	f7fd ff25 	bl	80019e0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ba2:	f7fd ff1d 	bl	80019e0 <HAL_GetTick>
 8003ba6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ba8:	4b3e      	ldr	r3, [pc, #248]	; (8003ca4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00da      	lsls	r2, r3, #3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	0d1b      	lsrs	r3, r3, #20
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	fb02 f303 	mul.w	r3, r2, r3
 8003bbe:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bc0:	e062      	b.n	8003c88 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc8:	d109      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003bdc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d050      	beq.n	8003c88 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be6:	f7fd fefb 	bl	80019e0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d902      	bls.n	8003bfc <SPI_WaitFifoStateUntilTimeout+0x78>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13d      	bne.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c14:	d111      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d004      	beq.n	8003c2a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c28:	d107      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c42:	d10f      	bne.n	8003c64 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e010      	b.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d194      	bne.n	8003bc2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000000 	.word	0x20000000

08003ca8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cbc:	d111      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc6:	d004      	beq.n	8003cd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d107      	bne.n	8003ce2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7ff fec1 	bl	8003a74 <SPI_WaitFlagStateUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e023      	b.n	8003d50 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d10:	d11d      	bne.n	8003d4e <SPI_EndRxTransaction+0xa6>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1a:	d004      	beq.n	8003d26 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d24:	d113      	bne.n	8003d4e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ff26 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e000      	b.n	8003d50 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff07 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e027      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fe6c 	bl	8003a74 <SPI_WaitFlagStateUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d007      	beq.n	8003db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f043 0220 	orr.w	r2, r3, #32
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e014      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fee0 	bl	8003b84 <SPI_WaitFifoStateUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e000      	b.n	8003ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e040      	b.n	8003e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fbd6 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8c0 	bl	8003fa8 <UART_SetConfig>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e022      	b.n	8003e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fae8 	bl	8004410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fb6f 	bl	8004554 <UART_CheckIdleState>
 8003e76:	4603      	mov	r3, r0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	; 0x28
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	f040 8082 	bne.w	8003f9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_Transmit+0x26>
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07a      	b.n	8003fa0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Transmit+0x38>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e073      	b.n	8003fa0 <HAL_UART_Transmit+0x120>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2221      	movs	r2, #33	; 0x21
 8003ecc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ece:	f7fd fd87 	bl	80019e0 <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	d108      	bne.n	8003f00 <HAL_UART_Transmit+0x80>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e003      	b.n	8003f08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f10:	e02d      	b.n	8003f6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fb62 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e039      	b.n	8003fa0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	3302      	adds	r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	e008      	b.n	8003f5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b292      	uxth	r2, r2
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1cb      	bne.n	8003f12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2140      	movs	r1, #64	; 0x40
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fb2e 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e005      	b.n	8003fa0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b5b0      	push	{r4, r5, r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4baa      	ldr	r3, [pc, #680]	; (800427c <UART_SetConfig+0x2d4>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	69f9      	ldr	r1, [r7, #28]
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a9f      	ldr	r2, [pc, #636]	; (8004280 <UART_SetConfig+0x2d8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	4313      	orrs	r3, r2
 800400e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a96      	ldr	r2, [pc, #600]	; (8004284 <UART_SetConfig+0x2dc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d121      	bne.n	8004072 <UART_SetConfig+0xca>
 800402e:	4b96      	ldr	r3, [pc, #600]	; (8004288 <UART_SetConfig+0x2e0>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b03      	cmp	r3, #3
 800403a:	d817      	bhi.n	800406c <UART_SetConfig+0xc4>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x9c>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004055 	.word	0x08004055
 8004048:	08004061 	.word	0x08004061
 800404c:	0800405b 	.word	0x0800405b
 8004050:	08004067 	.word	0x08004067
 8004054:	2301      	movs	r3, #1
 8004056:	76fb      	strb	r3, [r7, #27]
 8004058:	e096      	b.n	8004188 <UART_SetConfig+0x1e0>
 800405a:	2302      	movs	r3, #2
 800405c:	76fb      	strb	r3, [r7, #27]
 800405e:	e093      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004060:	2304      	movs	r3, #4
 8004062:	76fb      	strb	r3, [r7, #27]
 8004064:	e090      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004066:	2308      	movs	r3, #8
 8004068:	76fb      	strb	r3, [r7, #27]
 800406a:	e08d      	b.n	8004188 <UART_SetConfig+0x1e0>
 800406c:	2310      	movs	r3, #16
 800406e:	76fb      	strb	r3, [r7, #27]
 8004070:	e08a      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a85      	ldr	r2, [pc, #532]	; (800428c <UART_SetConfig+0x2e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d132      	bne.n	80040e2 <UART_SetConfig+0x13a>
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <UART_SetConfig+0x2e0>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d828      	bhi.n	80040dc <UART_SetConfig+0x134>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0xe8>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040dd 	.word	0x080040dd
 8004098:	080040dd 	.word	0x080040dd
 800409c:	080040dd 	.word	0x080040dd
 80040a0:	080040d1 	.word	0x080040d1
 80040a4:	080040dd 	.word	0x080040dd
 80040a8:	080040dd 	.word	0x080040dd
 80040ac:	080040dd 	.word	0x080040dd
 80040b0:	080040cb 	.word	0x080040cb
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040dd 	.word	0x080040dd
 80040c0:	080040d7 	.word	0x080040d7
 80040c4:	2300      	movs	r3, #0
 80040c6:	76fb      	strb	r3, [r7, #27]
 80040c8:	e05e      	b.n	8004188 <UART_SetConfig+0x1e0>
 80040ca:	2302      	movs	r3, #2
 80040cc:	76fb      	strb	r3, [r7, #27]
 80040ce:	e05b      	b.n	8004188 <UART_SetConfig+0x1e0>
 80040d0:	2304      	movs	r3, #4
 80040d2:	76fb      	strb	r3, [r7, #27]
 80040d4:	e058      	b.n	8004188 <UART_SetConfig+0x1e0>
 80040d6:	2308      	movs	r3, #8
 80040d8:	76fb      	strb	r3, [r7, #27]
 80040da:	e055      	b.n	8004188 <UART_SetConfig+0x1e0>
 80040dc:	2310      	movs	r3, #16
 80040de:	76fb      	strb	r3, [r7, #27]
 80040e0:	e052      	b.n	8004188 <UART_SetConfig+0x1e0>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6a      	ldr	r2, [pc, #424]	; (8004290 <UART_SetConfig+0x2e8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d120      	bne.n	800412e <UART_SetConfig+0x186>
 80040ec:	4b66      	ldr	r3, [pc, #408]	; (8004288 <UART_SetConfig+0x2e0>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040f6:	2b30      	cmp	r3, #48	; 0x30
 80040f8:	d013      	beq.n	8004122 <UART_SetConfig+0x17a>
 80040fa:	2b30      	cmp	r3, #48	; 0x30
 80040fc:	d814      	bhi.n	8004128 <UART_SetConfig+0x180>
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d009      	beq.n	8004116 <UART_SetConfig+0x16e>
 8004102:	2b20      	cmp	r3, #32
 8004104:	d810      	bhi.n	8004128 <UART_SetConfig+0x180>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x168>
 800410a:	2b10      	cmp	r3, #16
 800410c:	d006      	beq.n	800411c <UART_SetConfig+0x174>
 800410e:	e00b      	b.n	8004128 <UART_SetConfig+0x180>
 8004110:	2300      	movs	r3, #0
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e038      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004116:	2302      	movs	r3, #2
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e035      	b.n	8004188 <UART_SetConfig+0x1e0>
 800411c:	2304      	movs	r3, #4
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e032      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004122:	2308      	movs	r3, #8
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e02f      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004128:	2310      	movs	r3, #16
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e02c      	b.n	8004188 <UART_SetConfig+0x1e0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a53      	ldr	r2, [pc, #332]	; (8004280 <UART_SetConfig+0x2d8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d125      	bne.n	8004184 <UART_SetConfig+0x1dc>
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <UART_SetConfig+0x2e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004146:	d017      	beq.n	8004178 <UART_SetConfig+0x1d0>
 8004148:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414c:	d817      	bhi.n	800417e <UART_SetConfig+0x1d6>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d00b      	beq.n	800416c <UART_SetConfig+0x1c4>
 8004154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004158:	d811      	bhi.n	800417e <UART_SetConfig+0x1d6>
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <UART_SetConfig+0x1be>
 800415e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004162:	d006      	beq.n	8004172 <UART_SetConfig+0x1ca>
 8004164:	e00b      	b.n	800417e <UART_SetConfig+0x1d6>
 8004166:	2300      	movs	r3, #0
 8004168:	76fb      	strb	r3, [r7, #27]
 800416a:	e00d      	b.n	8004188 <UART_SetConfig+0x1e0>
 800416c:	2302      	movs	r3, #2
 800416e:	76fb      	strb	r3, [r7, #27]
 8004170:	e00a      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004172:	2304      	movs	r3, #4
 8004174:	76fb      	strb	r3, [r7, #27]
 8004176:	e007      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004178:	2308      	movs	r3, #8
 800417a:	76fb      	strb	r3, [r7, #27]
 800417c:	e004      	b.n	8004188 <UART_SetConfig+0x1e0>
 800417e:	2310      	movs	r3, #16
 8004180:	76fb      	strb	r3, [r7, #27]
 8004182:	e001      	b.n	8004188 <UART_SetConfig+0x1e0>
 8004184:	2310      	movs	r3, #16
 8004186:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3c      	ldr	r2, [pc, #240]	; (8004280 <UART_SetConfig+0x2d8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	f040 8082 	bne.w	8004298 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004194:	7efb      	ldrb	r3, [r7, #27]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d823      	bhi.n	80041e2 <UART_SetConfig+0x23a>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x1f8>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041e3 	.word	0x080041e3
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	080041d3 	.word	0x080041d3
 80041b4:	080041e3 	.word	0x080041e3
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	080041e3 	.word	0x080041e3
 80041c0:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe fcf0 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80041c8:	6178      	str	r0, [r7, #20]
        break;
 80041ca:	e00f      	b.n	80041ec <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b31      	ldr	r3, [pc, #196]	; (8004294 <UART_SetConfig+0x2ec>)
 80041ce:	617b      	str	r3, [r7, #20]
        break;
 80041d0:	e00c      	b.n	80041ec <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fe fc51 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 80041d6:	6178      	str	r0, [r7, #20]
        break;
 80041d8:	e008      	b.n	80041ec <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	617b      	str	r3, [r7, #20]
        break;
 80041e0:	e004      	b.n	80041ec <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	76bb      	strb	r3, [r7, #26]
        break;
 80041ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8100 	beq.w	80043f4 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	4413      	add	r3, r2
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	d305      	bcc.n	8004210 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	d902      	bls.n	8004216 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	76bb      	strb	r3, [r7, #26]
 8004214:	e0ee      	b.n	80043f4 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4618      	mov	r0, r3
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	020b      	lsls	r3, r1, #8
 8004228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800422c:	0202      	lsls	r2, r0, #8
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	6849      	ldr	r1, [r1, #4]
 8004232:	0849      	lsrs	r1, r1, #1
 8004234:	4608      	mov	r0, r1
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	1814      	adds	r4, r2, r0
 800423c:	eb43 0501 	adc.w	r5, r3, r1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	461a      	mov	r2, r3
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	4620      	mov	r0, r4
 800424c:	4629      	mov	r1, r5
 800424e:	f7fc fcab 	bl	8000ba8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4613      	mov	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004260:	d308      	bcc.n	8004274 <UART_SetConfig+0x2cc>
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004268:	d204      	bcs.n	8004274 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	e0bf      	b.n	80043f4 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	76bb      	strb	r3, [r7, #26]
 8004278:	e0bc      	b.n	80043f4 <UART_SetConfig+0x44c>
 800427a:	bf00      	nop
 800427c:	efff69f3 	.word	0xefff69f3
 8004280:	40008000 	.word	0x40008000
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	40004400 	.word	0x40004400
 8004290:	40004800 	.word	0x40004800
 8004294:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d15c      	bne.n	800435c <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 80042a2:	7efb      	ldrb	r3, [r7, #27]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d828      	bhi.n	80042fa <UART_SetConfig+0x352>
 80042a8:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <UART_SetConfig+0x308>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042dd 	.word	0x080042dd
 80042b8:	080042e5 	.word	0x080042e5
 80042bc:	080042fb 	.word	0x080042fb
 80042c0:	080042eb 	.word	0x080042eb
 80042c4:	080042fb 	.word	0x080042fb
 80042c8:	080042fb 	.word	0x080042fb
 80042cc:	080042fb 	.word	0x080042fb
 80042d0:	080042f3 	.word	0x080042f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d4:	f7fe fc68 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80042d8:	6178      	str	r0, [r7, #20]
        break;
 80042da:	e013      	b.n	8004304 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042dc:	f7fe fc7a 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 80042e0:	6178      	str	r0, [r7, #20]
        break;
 80042e2:	e00f      	b.n	8004304 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e4:	4b49      	ldr	r3, [pc, #292]	; (800440c <UART_SetConfig+0x464>)
 80042e6:	617b      	str	r3, [r7, #20]
        break;
 80042e8:	e00c      	b.n	8004304 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ea:	f7fe fbc5 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 80042ee:	6178      	str	r0, [r7, #20]
        break;
 80042f0:	e008      	b.n	8004304 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f6:	617b      	str	r3, [r7, #20]
        break;
 80042f8:	e004      	b.n	8004304 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	76bb      	strb	r3, [r7, #26]
        break;
 8004302:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d074      	beq.n	80043f4 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005a      	lsls	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	441a      	add	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	b29b      	uxth	r3, r3
 8004320:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b0f      	cmp	r3, #15
 8004326:	d916      	bls.n	8004356 <UART_SetConfig+0x3ae>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432e:	d212      	bcs.n	8004356 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	b29b      	uxth	r3, r3
 8004334:	f023 030f 	bic.w	r3, r3, #15
 8004338:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	b29b      	uxth	r3, r3
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	b29a      	uxth	r2, r3
 8004346:	89fb      	ldrh	r3, [r7, #14]
 8004348:	4313      	orrs	r3, r2
 800434a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	89fa      	ldrh	r2, [r7, #14]
 8004352:	60da      	str	r2, [r3, #12]
 8004354:	e04e      	b.n	80043f4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	76bb      	strb	r3, [r7, #26]
 800435a:	e04b      	b.n	80043f4 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800435c:	7efb      	ldrb	r3, [r7, #27]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d827      	bhi.n	80043b2 <UART_SetConfig+0x40a>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x3c0>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800438d 	.word	0x0800438d
 800436c:	08004395 	.word	0x08004395
 8004370:	0800439d 	.word	0x0800439d
 8004374:	080043b3 	.word	0x080043b3
 8004378:	080043a3 	.word	0x080043a3
 800437c:	080043b3 	.word	0x080043b3
 8004380:	080043b3 	.word	0x080043b3
 8004384:	080043b3 	.word	0x080043b3
 8004388:	080043ab 	.word	0x080043ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438c:	f7fe fc0c 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004390:	6178      	str	r0, [r7, #20]
        break;
 8004392:	e013      	b.n	80043bc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fc1e 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004398:	6178      	str	r0, [r7, #20]
        break;
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <UART_SetConfig+0x464>)
 800439e:	617b      	str	r3, [r7, #20]
        break;
 80043a0:	e00c      	b.n	80043bc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043a2:	f7fe fb69 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 80043a6:	6178      	str	r0, [r7, #20]
        break;
 80043a8:	e008      	b.n	80043bc <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	617b      	str	r3, [r7, #20]
        break;
 80043b0:	e004      	b.n	80043bc <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	76bb      	strb	r3, [r7, #26]
        break;
 80043ba:	bf00      	nop
    }

    if (pclk != 0U)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d018      	beq.n	80043f4 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	085a      	lsrs	r2, r3, #1
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	441a      	add	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d908      	bls.n	80043f0 <UART_SetConfig+0x448>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d204      	bcs.n	80043f0 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e001      	b.n	80043f4 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004400:	7ebb      	ldrb	r3, [r7, #26]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bdb0      	pop	{r4, r5, r7, pc}
 800440a:	bf00      	nop
 800440c:	00f42400 	.word	0x00f42400

08004410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450e:	d10a      	bne.n	8004526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fd fa3c 	bl	80019e0 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d10e      	bne.n	8004596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f82d 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e023      	b.n	80045de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d10e      	bne.n	80045c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f817 	bl	80045e6 <UART_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e00d      	b.n	80045de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	e05e      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d05a      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004600:	f7fd f9ee 	bl	80019e0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	429a      	cmp	r2, r3
 800460e:	d302      	bcc.n	8004616 <UART_WaitOnFlagUntilTimeout+0x30>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11b      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004624:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e043      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02c      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d124      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004674:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004684:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e00f      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d091      	beq.n	80045f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f002 fcf0 	bl	80070e4 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	0800761c 	.word	0x0800761c
 8004728:	0800761c 	.word	0x0800761c
 800472c:	0800761c 	.word	0x0800761c
 8004730:	08007620 	.word	0x08007620

08004734 <memset>:
 8004734:	4402      	add	r2, r0
 8004736:	4603      	mov	r3, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <__cvt>:
 8004744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004748:	ec55 4b10 	vmov	r4, r5, d0
 800474c:	2d00      	cmp	r5, #0
 800474e:	460e      	mov	r6, r1
 8004750:	4619      	mov	r1, r3
 8004752:	462b      	mov	r3, r5
 8004754:	bfbb      	ittet	lt
 8004756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800475a:	461d      	movlt	r5, r3
 800475c:	2300      	movge	r3, #0
 800475e:	232d      	movlt	r3, #45	; 0x2d
 8004760:	700b      	strb	r3, [r1, #0]
 8004762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004768:	4691      	mov	r9, r2
 800476a:	f023 0820 	bic.w	r8, r3, #32
 800476e:	bfbc      	itt	lt
 8004770:	4622      	movlt	r2, r4
 8004772:	4614      	movlt	r4, r2
 8004774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004778:	d005      	beq.n	8004786 <__cvt+0x42>
 800477a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800477e:	d100      	bne.n	8004782 <__cvt+0x3e>
 8004780:	3601      	adds	r6, #1
 8004782:	2102      	movs	r1, #2
 8004784:	e000      	b.n	8004788 <__cvt+0x44>
 8004786:	2103      	movs	r1, #3
 8004788:	ab03      	add	r3, sp, #12
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	ab02      	add	r3, sp, #8
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	ec45 4b10 	vmov	d0, r4, r5
 8004794:	4653      	mov	r3, sl
 8004796:	4632      	mov	r2, r6
 8004798:	f000 fcca 	bl	8005130 <_dtoa_r>
 800479c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047a0:	4607      	mov	r7, r0
 80047a2:	d102      	bne.n	80047aa <__cvt+0x66>
 80047a4:	f019 0f01 	tst.w	r9, #1
 80047a8:	d022      	beq.n	80047f0 <__cvt+0xac>
 80047aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047ae:	eb07 0906 	add.w	r9, r7, r6
 80047b2:	d110      	bne.n	80047d6 <__cvt+0x92>
 80047b4:	783b      	ldrb	r3, [r7, #0]
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d10a      	bne.n	80047d0 <__cvt+0x8c>
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fc f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80047c6:	b918      	cbnz	r0, 80047d0 <__cvt+0x8c>
 80047c8:	f1c6 0601 	rsb	r6, r6, #1
 80047cc:	f8ca 6000 	str.w	r6, [sl]
 80047d0:	f8da 3000 	ldr.w	r3, [sl]
 80047d4:	4499      	add	r9, r3
 80047d6:	2200      	movs	r2, #0
 80047d8:	2300      	movs	r3, #0
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	f7fc f973 	bl	8000ac8 <__aeabi_dcmpeq>
 80047e2:	b108      	cbz	r0, 80047e8 <__cvt+0xa4>
 80047e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047e8:	2230      	movs	r2, #48	; 0x30
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	454b      	cmp	r3, r9
 80047ee:	d307      	bcc.n	8004800 <__cvt+0xbc>
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f4:	1bdb      	subs	r3, r3, r7
 80047f6:	4638      	mov	r0, r7
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	b004      	add	sp, #16
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	9103      	str	r1, [sp, #12]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e7f0      	b.n	80047ea <__cvt+0xa6>

08004808 <__exponent>:
 8004808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800480a:	4603      	mov	r3, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	bfb8      	it	lt
 8004810:	4249      	neglt	r1, r1
 8004812:	f803 2b02 	strb.w	r2, [r3], #2
 8004816:	bfb4      	ite	lt
 8004818:	222d      	movlt	r2, #45	; 0x2d
 800481a:	222b      	movge	r2, #43	; 0x2b
 800481c:	2909      	cmp	r1, #9
 800481e:	7042      	strb	r2, [r0, #1]
 8004820:	dd2a      	ble.n	8004878 <__exponent+0x70>
 8004822:	f10d 0407 	add.w	r4, sp, #7
 8004826:	46a4      	mov	ip, r4
 8004828:	270a      	movs	r7, #10
 800482a:	46a6      	mov	lr, r4
 800482c:	460a      	mov	r2, r1
 800482e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004832:	fb07 1516 	mls	r5, r7, r6, r1
 8004836:	3530      	adds	r5, #48	; 0x30
 8004838:	2a63      	cmp	r2, #99	; 0x63
 800483a:	f104 34ff 	add.w	r4, r4, #4294967295
 800483e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004842:	4631      	mov	r1, r6
 8004844:	dcf1      	bgt.n	800482a <__exponent+0x22>
 8004846:	3130      	adds	r1, #48	; 0x30
 8004848:	f1ae 0502 	sub.w	r5, lr, #2
 800484c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004850:	1c44      	adds	r4, r0, #1
 8004852:	4629      	mov	r1, r5
 8004854:	4561      	cmp	r1, ip
 8004856:	d30a      	bcc.n	800486e <__exponent+0x66>
 8004858:	f10d 0209 	add.w	r2, sp, #9
 800485c:	eba2 020e 	sub.w	r2, r2, lr
 8004860:	4565      	cmp	r5, ip
 8004862:	bf88      	it	hi
 8004864:	2200      	movhi	r2, #0
 8004866:	4413      	add	r3, r2
 8004868:	1a18      	subs	r0, r3, r0
 800486a:	b003      	add	sp, #12
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004872:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004876:	e7ed      	b.n	8004854 <__exponent+0x4c>
 8004878:	2330      	movs	r3, #48	; 0x30
 800487a:	3130      	adds	r1, #48	; 0x30
 800487c:	7083      	strb	r3, [r0, #2]
 800487e:	70c1      	strb	r1, [r0, #3]
 8004880:	1d03      	adds	r3, r0, #4
 8004882:	e7f1      	b.n	8004868 <__exponent+0x60>

08004884 <_printf_float>:
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	ed2d 8b02 	vpush	{d8}
 800488c:	b08d      	sub	sp, #52	; 0x34
 800488e:	460c      	mov	r4, r1
 8004890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004894:	4616      	mov	r6, r2
 8004896:	461f      	mov	r7, r3
 8004898:	4605      	mov	r5, r0
 800489a:	f001 fa35 	bl	8005d08 <_localeconv_r>
 800489e:	f8d0 a000 	ldr.w	sl, [r0]
 80048a2:	4650      	mov	r0, sl
 80048a4:	f7fb fc94 	bl	80001d0 <strlen>
 80048a8:	2300      	movs	r3, #0
 80048aa:	930a      	str	r3, [sp, #40]	; 0x28
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	f8d8 3000 	ldr.w	r3, [r8]
 80048b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048b8:	3307      	adds	r3, #7
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	f103 0208 	add.w	r2, r3, #8
 80048c2:	f8c8 2000 	str.w	r2, [r8]
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048dc:	ee08 0a10 	vmov	s16, r0
 80048e0:	4b9f      	ldr	r3, [pc, #636]	; (8004b60 <_printf_float+0x2dc>)
 80048e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ea:	f7fc f91f 	bl	8000b2c <__aeabi_dcmpun>
 80048ee:	bb88      	cbnz	r0, 8004954 <_printf_float+0xd0>
 80048f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f4:	4b9a      	ldr	r3, [pc, #616]	; (8004b60 <_printf_float+0x2dc>)
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	f7fc f8f9 	bl	8000af0 <__aeabi_dcmple>
 80048fe:	bb48      	cbnz	r0, 8004954 <_printf_float+0xd0>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f7fc f8e8 	bl	8000adc <__aeabi_dcmplt>
 800490c:	b110      	cbz	r0, 8004914 <_printf_float+0x90>
 800490e:	232d      	movs	r3, #45	; 0x2d
 8004910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004914:	4b93      	ldr	r3, [pc, #588]	; (8004b64 <_printf_float+0x2e0>)
 8004916:	4894      	ldr	r0, [pc, #592]	; (8004b68 <_printf_float+0x2e4>)
 8004918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800491c:	bf94      	ite	ls
 800491e:	4698      	movls	r8, r3
 8004920:	4680      	movhi	r8, r0
 8004922:	2303      	movs	r3, #3
 8004924:	6123      	str	r3, [r4, #16]
 8004926:	9b05      	ldr	r3, [sp, #20]
 8004928:	f023 0204 	bic.w	r2, r3, #4
 800492c:	6022      	str	r2, [r4, #0]
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	9700      	str	r7, [sp, #0]
 8004934:	4633      	mov	r3, r6
 8004936:	aa0b      	add	r2, sp, #44	; 0x2c
 8004938:	4621      	mov	r1, r4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f9d8 	bl	8004cf0 <_printf_common>
 8004940:	3001      	adds	r0, #1
 8004942:	f040 8090 	bne.w	8004a66 <_printf_float+0x1e2>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b00d      	add	sp, #52	; 0x34
 800494c:	ecbd 8b02 	vpop	{d8}
 8004950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fc f8e6 	bl	8000b2c <__aeabi_dcmpun>
 8004960:	b140      	cbz	r0, 8004974 <_printf_float+0xf0>
 8004962:	464b      	mov	r3, r9
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfbc      	itt	lt
 8004968:	232d      	movlt	r3, #45	; 0x2d
 800496a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800496e:	487f      	ldr	r0, [pc, #508]	; (8004b6c <_printf_float+0x2e8>)
 8004970:	4b7f      	ldr	r3, [pc, #508]	; (8004b70 <_printf_float+0x2ec>)
 8004972:	e7d1      	b.n	8004918 <_printf_float+0x94>
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800497a:	9206      	str	r2, [sp, #24]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	d13f      	bne.n	8004a00 <_printf_float+0x17c>
 8004980:	2306      	movs	r3, #6
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	9b05      	ldr	r3, [sp, #20]
 8004986:	6861      	ldr	r1, [r4, #4]
 8004988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800498c:	2300      	movs	r3, #0
 800498e:	9303      	str	r3, [sp, #12]
 8004990:	ab0a      	add	r3, sp, #40	; 0x28
 8004992:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004996:	ab09      	add	r3, sp, #36	; 0x24
 8004998:	ec49 8b10 	vmov	d0, r8, r9
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7ff fecd 	bl	8004744 <__cvt>
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ae:	2b47      	cmp	r3, #71	; 0x47
 80049b0:	4680      	mov	r8, r0
 80049b2:	d108      	bne.n	80049c6 <_printf_float+0x142>
 80049b4:	1cc8      	adds	r0, r1, #3
 80049b6:	db02      	blt.n	80049be <_printf_float+0x13a>
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	4299      	cmp	r1, r3
 80049bc:	dd41      	ble.n	8004a42 <_printf_float+0x1be>
 80049be:	f1ab 0b02 	sub.w	fp, fp, #2
 80049c2:	fa5f fb8b 	uxtb.w	fp, fp
 80049c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049ca:	d820      	bhi.n	8004a0e <_printf_float+0x18a>
 80049cc:	3901      	subs	r1, #1
 80049ce:	465a      	mov	r2, fp
 80049d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049d4:	9109      	str	r1, [sp, #36]	; 0x24
 80049d6:	f7ff ff17 	bl	8004808 <__exponent>
 80049da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049dc:	1813      	adds	r3, r2, r0
 80049de:	2a01      	cmp	r2, #1
 80049e0:	4681      	mov	r9, r0
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	dc02      	bgt.n	80049ec <_printf_float+0x168>
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	07d2      	lsls	r2, r2, #31
 80049ea:	d501      	bpl.n	80049f0 <_printf_float+0x16c>
 80049ec:	3301      	adds	r3, #1
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d09c      	beq.n	8004932 <_printf_float+0xae>
 80049f8:	232d      	movs	r3, #45	; 0x2d
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fe:	e798      	b.n	8004932 <_printf_float+0xae>
 8004a00:	9a06      	ldr	r2, [sp, #24]
 8004a02:	2a47      	cmp	r2, #71	; 0x47
 8004a04:	d1be      	bne.n	8004984 <_printf_float+0x100>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1bc      	bne.n	8004984 <_printf_float+0x100>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7b9      	b.n	8004982 <_printf_float+0xfe>
 8004a0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a12:	d118      	bne.n	8004a46 <_printf_float+0x1c2>
 8004a14:	2900      	cmp	r1, #0
 8004a16:	6863      	ldr	r3, [r4, #4]
 8004a18:	dd0b      	ble.n	8004a32 <_printf_float+0x1ae>
 8004a1a:	6121      	str	r1, [r4, #16]
 8004a1c:	b913      	cbnz	r3, 8004a24 <_printf_float+0x1a0>
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	07d0      	lsls	r0, r2, #31
 8004a22:	d502      	bpl.n	8004a2a <_printf_float+0x1a6>
 8004a24:	3301      	adds	r3, #1
 8004a26:	440b      	add	r3, r1
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a2c:	f04f 0900 	mov.w	r9, #0
 8004a30:	e7de      	b.n	80049f0 <_printf_float+0x16c>
 8004a32:	b913      	cbnz	r3, 8004a3a <_printf_float+0x1b6>
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	07d2      	lsls	r2, r2, #31
 8004a38:	d501      	bpl.n	8004a3e <_printf_float+0x1ba>
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	e7f4      	b.n	8004a28 <_printf_float+0x1a4>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7f2      	b.n	8004a28 <_printf_float+0x1a4>
 8004a42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	db05      	blt.n	8004a58 <_printf_float+0x1d4>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	6121      	str	r1, [r4, #16]
 8004a50:	07d8      	lsls	r0, r3, #31
 8004a52:	d5ea      	bpl.n	8004a2a <_printf_float+0x1a6>
 8004a54:	1c4b      	adds	r3, r1, #1
 8004a56:	e7e7      	b.n	8004a28 <_printf_float+0x1a4>
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	bfd4      	ite	le
 8004a5c:	f1c1 0202 	rsble	r2, r1, #2
 8004a60:	2201      	movgt	r2, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	e7e0      	b.n	8004a28 <_printf_float+0x1a4>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	055a      	lsls	r2, r3, #21
 8004a6a:	d407      	bmi.n	8004a7c <_printf_float+0x1f8>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	4642      	mov	r2, r8
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	d12c      	bne.n	8004ad4 <_printf_float+0x250>
 8004a7a:	e764      	b.n	8004946 <_printf_float+0xc2>
 8004a7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a80:	f240 80e0 	bls.w	8004c44 <_printf_float+0x3c0>
 8004a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f7fc f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d034      	beq.n	8004afe <_printf_float+0x27a>
 8004a94:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <_printf_float+0x2f0>)
 8004a96:	2301      	movs	r3, #1
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f af51 	beq.w	8004946 <_printf_float+0xc2>
 8004aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	db02      	blt.n	8004ab2 <_printf_float+0x22e>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	07d8      	lsls	r0, r3, #31
 8004ab0:	d510      	bpl.n	8004ad4 <_printf_float+0x250>
 8004ab2:	ee18 3a10 	vmov	r3, s16
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f af41 	beq.w	8004946 <_printf_float+0xc2>
 8004ac4:	f04f 0800 	mov.w	r8, #0
 8004ac8:	f104 091a 	add.w	r9, r4, #26
 8004acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4543      	cmp	r3, r8
 8004ad2:	dc09      	bgt.n	8004ae8 <_printf_float+0x264>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	079b      	lsls	r3, r3, #30
 8004ad8:	f100 8105 	bmi.w	8004ce6 <_printf_float+0x462>
 8004adc:	68e0      	ldr	r0, [r4, #12]
 8004ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	bfb8      	it	lt
 8004ae4:	4618      	movlt	r0, r3
 8004ae6:	e730      	b.n	800494a <_printf_float+0xc6>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	464a      	mov	r2, r9
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	47b8      	blx	r7
 8004af2:	3001      	adds	r0, #1
 8004af4:	f43f af27 	beq.w	8004946 <_printf_float+0xc2>
 8004af8:	f108 0801 	add.w	r8, r8, #1
 8004afc:	e7e6      	b.n	8004acc <_printf_float+0x248>
 8004afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dc39      	bgt.n	8004b78 <_printf_float+0x2f4>
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <_printf_float+0x2f0>)
 8004b06:	2301      	movs	r3, #1
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af19 	beq.w	8004946 <_printf_float+0xc2>
 8004b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d102      	bne.n	8004b22 <_printf_float+0x29e>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	d5d8      	bpl.n	8004ad4 <_printf_float+0x250>
 8004b22:	ee18 3a10 	vmov	r3, s16
 8004b26:	4652      	mov	r2, sl
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f af09 	beq.w	8004946 <_printf_float+0xc2>
 8004b34:	f04f 0900 	mov.w	r9, #0
 8004b38:	f104 0a1a 	add.w	sl, r4, #26
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	425b      	negs	r3, r3
 8004b40:	454b      	cmp	r3, r9
 8004b42:	dc01      	bgt.n	8004b48 <_printf_float+0x2c4>
 8004b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b46:	e792      	b.n	8004a6e <_printf_float+0x1ea>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4652      	mov	r2, sl
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f aef7 	beq.w	8004946 <_printf_float+0xc2>
 8004b58:	f109 0901 	add.w	r9, r9, #1
 8004b5c:	e7ee      	b.n	8004b3c <_printf_float+0x2b8>
 8004b5e:	bf00      	nop
 8004b60:	7fefffff 	.word	0x7fefffff
 8004b64:	08007234 	.word	0x08007234
 8004b68:	08007238 	.word	0x08007238
 8004b6c:	08007240 	.word	0x08007240
 8004b70:	0800723c 	.word	0x0800723c
 8004b74:	08007244 	.word	0x08007244
 8004b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	bfa8      	it	ge
 8004b80:	461a      	movge	r2, r3
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	4691      	mov	r9, r2
 8004b86:	dc37      	bgt.n	8004bf8 <_printf_float+0x374>
 8004b88:	f04f 0b00 	mov.w	fp, #0
 8004b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b90:	f104 021a 	add.w	r2, r4, #26
 8004b94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b96:	9305      	str	r3, [sp, #20]
 8004b98:	eba3 0309 	sub.w	r3, r3, r9
 8004b9c:	455b      	cmp	r3, fp
 8004b9e:	dc33      	bgt.n	8004c08 <_printf_float+0x384>
 8004ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	db3b      	blt.n	8004c20 <_printf_float+0x39c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07da      	lsls	r2, r3, #31
 8004bac:	d438      	bmi.n	8004c20 <_printf_float+0x39c>
 8004bae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb0:	9b05      	ldr	r3, [sp, #20]
 8004bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	eba2 0901 	sub.w	r9, r2, r1
 8004bba:	4599      	cmp	r9, r3
 8004bbc:	bfa8      	it	ge
 8004bbe:	4699      	movge	r9, r3
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	dc35      	bgt.n	8004c32 <_printf_float+0x3ae>
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bce:	f104 0a1a 	add.w	sl, r4, #26
 8004bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	eba3 0309 	sub.w	r3, r3, r9
 8004bdc:	4543      	cmp	r3, r8
 8004bde:	f77f af79 	ble.w	8004ad4 <_printf_float+0x250>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4652      	mov	r2, sl
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	f43f aeaa 	beq.w	8004946 <_printf_float+0xc2>
 8004bf2:	f108 0801 	add.w	r8, r8, #1
 8004bf6:	e7ec      	b.n	8004bd2 <_printf_float+0x34e>
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	d1c0      	bne.n	8004b88 <_printf_float+0x304>
 8004c06:	e69e      	b.n	8004946 <_printf_float+0xc2>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	9205      	str	r2, [sp, #20]
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f ae97 	beq.w	8004946 <_printf_float+0xc2>
 8004c18:	9a05      	ldr	r2, [sp, #20]
 8004c1a:	f10b 0b01 	add.w	fp, fp, #1
 8004c1e:	e7b9      	b.n	8004b94 <_printf_float+0x310>
 8004c20:	ee18 3a10 	vmov	r3, s16
 8004c24:	4652      	mov	r2, sl
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d1be      	bne.n	8004bae <_printf_float+0x32a>
 8004c30:	e689      	b.n	8004946 <_printf_float+0xc2>
 8004c32:	9a05      	ldr	r2, [sp, #20]
 8004c34:	464b      	mov	r3, r9
 8004c36:	4442      	add	r2, r8
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d1c1      	bne.n	8004bc6 <_printf_float+0x342>
 8004c42:	e680      	b.n	8004946 <_printf_float+0xc2>
 8004c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c46:	2a01      	cmp	r2, #1
 8004c48:	dc01      	bgt.n	8004c4e <_printf_float+0x3ca>
 8004c4a:	07db      	lsls	r3, r3, #31
 8004c4c:	d538      	bpl.n	8004cc0 <_printf_float+0x43c>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4642      	mov	r2, r8
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f ae74 	beq.w	8004946 <_printf_float+0xc2>
 8004c5e:	ee18 3a10 	vmov	r3, s16
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f ae6b 	beq.w	8004946 <_printf_float+0xc2>
 8004c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c7c:	b9d8      	cbnz	r0, 8004cb6 <_printf_float+0x432>
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	f108 0201 	add.w	r2, r8, #1
 8004c84:	3b01      	subs	r3, #1
 8004c86:	4631      	mov	r1, r6
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b8      	blx	r7
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d10e      	bne.n	8004cae <_printf_float+0x42a>
 8004c90:	e659      	b.n	8004946 <_printf_float+0xc2>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f ae52 	beq.w	8004946 <_printf_float+0xc2>
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	4543      	cmp	r3, r8
 8004cac:	dcf1      	bgt.n	8004c92 <_printf_float+0x40e>
 8004cae:	464b      	mov	r3, r9
 8004cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cb4:	e6dc      	b.n	8004a70 <_printf_float+0x1ec>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 0a1a 	add.w	sl, r4, #26
 8004cbe:	e7f2      	b.n	8004ca6 <_printf_float+0x422>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	e7df      	b.n	8004c86 <_printf_float+0x402>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	464a      	mov	r2, r9
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f ae38 	beq.w	8004946 <_printf_float+0xc2>
 8004cd6:	f108 0801 	add.w	r8, r8, #1
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cde:	1a5b      	subs	r3, r3, r1
 8004ce0:	4543      	cmp	r3, r8
 8004ce2:	dcf0      	bgt.n	8004cc6 <_printf_float+0x442>
 8004ce4:	e6fa      	b.n	8004adc <_printf_float+0x258>
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	f104 0919 	add.w	r9, r4, #25
 8004cee:	e7f4      	b.n	8004cda <_printf_float+0x456>

08004cf0 <_printf_common>:
 8004cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	4699      	mov	r9, r3
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bfb8      	it	lt
 8004d04:	4613      	movlt	r3, r2
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b10a      	cbz	r2, 8004d16 <_printf_common+0x26>
 8004d12:	3301      	adds	r3, #1
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	0699      	lsls	r1, r3, #26
 8004d1a:	bf42      	ittt	mi
 8004d1c:	6833      	ldrmi	r3, [r6, #0]
 8004d1e:	3302      	addmi	r3, #2
 8004d20:	6033      	strmi	r3, [r6, #0]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d106      	bne.n	8004d38 <_printf_common+0x48>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	6832      	ldr	r2, [r6, #0]
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dc26      	bgt.n	8004d86 <_printf_common+0x96>
 8004d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d3c:	1e13      	subs	r3, r2, #0
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	0692      	lsls	r2, r2, #26
 8004d46:	d42b      	bmi.n	8004da0 <_printf_common+0xb0>
 8004d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d01e      	beq.n	8004d94 <_printf_common+0xa4>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	68e5      	ldr	r5, [r4, #12]
 8004d5a:	6832      	ldr	r2, [r6, #0]
 8004d5c:	f003 0306 	and.w	r3, r3, #6
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	bf08      	it	eq
 8004d64:	1aad      	subeq	r5, r5, r2
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	6922      	ldr	r2, [r4, #16]
 8004d6a:	bf0c      	ite	eq
 8004d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d70:	2500      	movne	r5, #0
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bfc4      	itt	gt
 8004d76:	1a9b      	subgt	r3, r3, r2
 8004d78:	18ed      	addgt	r5, r5, r3
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	341a      	adds	r4, #26
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	d11a      	bne.n	8004db8 <_printf_common+0xc8>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e008      	b.n	8004d98 <_printf_common+0xa8>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4652      	mov	r2, sl
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	47c0      	blx	r8
 8004d90:	3001      	adds	r0, #1
 8004d92:	d103      	bne.n	8004d9c <_printf_common+0xac>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	e7c6      	b.n	8004d2e <_printf_common+0x3e>
 8004da0:	18e1      	adds	r1, r4, r3
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	2030      	movs	r0, #48	; 0x30
 8004da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004daa:	4422      	add	r2, r4
 8004dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db4:	3302      	adds	r3, #2
 8004db6:	e7c7      	b.n	8004d48 <_printf_common+0x58>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d0e6      	beq.n	8004d94 <_printf_common+0xa4>
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7d9      	b.n	8004d7e <_printf_common+0x8e>
	...

08004dcc <_printf_i>:
 8004dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	4691      	mov	r9, r2
 8004dd4:	7e27      	ldrb	r7, [r4, #24]
 8004dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dd8:	2f78      	cmp	r7, #120	; 0x78
 8004dda:	4680      	mov	r8, r0
 8004ddc:	469a      	mov	sl, r3
 8004dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004de2:	d807      	bhi.n	8004df4 <_printf_i+0x28>
 8004de4:	2f62      	cmp	r7, #98	; 0x62
 8004de6:	d80a      	bhi.n	8004dfe <_printf_i+0x32>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	f000 80d8 	beq.w	8004f9e <_printf_i+0x1d2>
 8004dee:	2f58      	cmp	r7, #88	; 0x58
 8004df0:	f000 80a3 	beq.w	8004f3a <_printf_i+0x16e>
 8004df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dfc:	e03a      	b.n	8004e74 <_printf_i+0xa8>
 8004dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e02:	2b15      	cmp	r3, #21
 8004e04:	d8f6      	bhi.n	8004df4 <_printf_i+0x28>
 8004e06:	a001      	add	r0, pc, #4	; (adr r0, 8004e0c <_printf_i+0x40>)
 8004e08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004df5 	.word	0x08004df5
 8004e18:	08004df5 	.word	0x08004df5
 8004e1c:	08004df5 	.word	0x08004df5
 8004e20:	08004df5 	.word	0x08004df5
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004df5 	.word	0x08004df5
 8004e2c:	08004df5 	.word	0x08004df5
 8004e30:	08004df5 	.word	0x08004df5
 8004e34:	08004df5 	.word	0x08004df5
 8004e38:	08004f85 	.word	0x08004f85
 8004e3c:	08004ea9 	.word	0x08004ea9
 8004e40:	08004f67 	.word	0x08004f67
 8004e44:	08004df5 	.word	0x08004df5
 8004e48:	08004df5 	.word	0x08004df5
 8004e4c:	08004fa7 	.word	0x08004fa7
 8004e50:	08004df5 	.word	0x08004df5
 8004e54:	08004ea9 	.word	0x08004ea9
 8004e58:	08004df5 	.word	0x08004df5
 8004e5c:	08004df5 	.word	0x08004df5
 8004e60:	08004f6f 	.word	0x08004f6f
 8004e64:	680b      	ldr	r3, [r1, #0]
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	600a      	str	r2, [r1, #0]
 8004e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0a3      	b.n	8004fc0 <_printf_i+0x1f4>
 8004e78:	6825      	ldr	r5, [r4, #0]
 8004e7a:	6808      	ldr	r0, [r1, #0]
 8004e7c:	062e      	lsls	r6, r5, #24
 8004e7e:	f100 0304 	add.w	r3, r0, #4
 8004e82:	d50a      	bpl.n	8004e9a <_printf_i+0xce>
 8004e84:	6805      	ldr	r5, [r0, #0]
 8004e86:	600b      	str	r3, [r1, #0]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	da03      	bge.n	8004e94 <_printf_i+0xc8>
 8004e8c:	232d      	movs	r3, #45	; 0x2d
 8004e8e:	426d      	negs	r5, r5
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	485e      	ldr	r0, [pc, #376]	; (8005010 <_printf_i+0x244>)
 8004e96:	230a      	movs	r3, #10
 8004e98:	e019      	b.n	8004ece <_printf_i+0x102>
 8004e9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004e9e:	6805      	ldr	r5, [r0, #0]
 8004ea0:	600b      	str	r3, [r1, #0]
 8004ea2:	bf18      	it	ne
 8004ea4:	b22d      	sxthne	r5, r5
 8004ea6:	e7ef      	b.n	8004e88 <_printf_i+0xbc>
 8004ea8:	680b      	ldr	r3, [r1, #0]
 8004eaa:	6825      	ldr	r5, [r4, #0]
 8004eac:	1d18      	adds	r0, r3, #4
 8004eae:	6008      	str	r0, [r1, #0]
 8004eb0:	0628      	lsls	r0, r5, #24
 8004eb2:	d501      	bpl.n	8004eb8 <_printf_i+0xec>
 8004eb4:	681d      	ldr	r5, [r3, #0]
 8004eb6:	e002      	b.n	8004ebe <_printf_i+0xf2>
 8004eb8:	0669      	lsls	r1, r5, #25
 8004eba:	d5fb      	bpl.n	8004eb4 <_printf_i+0xe8>
 8004ebc:	881d      	ldrh	r5, [r3, #0]
 8004ebe:	4854      	ldr	r0, [pc, #336]	; (8005010 <_printf_i+0x244>)
 8004ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2308      	moveq	r3, #8
 8004ec6:	230a      	movne	r3, #10
 8004ec8:	2100      	movs	r1, #0
 8004eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ece:	6866      	ldr	r6, [r4, #4]
 8004ed0:	60a6      	str	r6, [r4, #8]
 8004ed2:	2e00      	cmp	r6, #0
 8004ed4:	bfa2      	ittt	ge
 8004ed6:	6821      	ldrge	r1, [r4, #0]
 8004ed8:	f021 0104 	bicge.w	r1, r1, #4
 8004edc:	6021      	strge	r1, [r4, #0]
 8004ede:	b90d      	cbnz	r5, 8004ee4 <_printf_i+0x118>
 8004ee0:	2e00      	cmp	r6, #0
 8004ee2:	d04d      	beq.n	8004f80 <_printf_i+0x1b4>
 8004ee4:	4616      	mov	r6, r2
 8004ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eea:	fb03 5711 	mls	r7, r3, r1, r5
 8004eee:	5dc7      	ldrb	r7, [r0, r7]
 8004ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ef4:	462f      	mov	r7, r5
 8004ef6:	42bb      	cmp	r3, r7
 8004ef8:	460d      	mov	r5, r1
 8004efa:	d9f4      	bls.n	8004ee6 <_printf_i+0x11a>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d10b      	bne.n	8004f18 <_printf_i+0x14c>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07df      	lsls	r7, r3, #31
 8004f04:	d508      	bpl.n	8004f18 <_printf_i+0x14c>
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	6861      	ldr	r1, [r4, #4]
 8004f0a:	4299      	cmp	r1, r3
 8004f0c:	bfde      	ittt	le
 8004f0e:	2330      	movle	r3, #48	; 0x30
 8004f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f18:	1b92      	subs	r2, r2, r6
 8004f1a:	6122      	str	r2, [r4, #16]
 8004f1c:	f8cd a000 	str.w	sl, [sp]
 8004f20:	464b      	mov	r3, r9
 8004f22:	aa03      	add	r2, sp, #12
 8004f24:	4621      	mov	r1, r4
 8004f26:	4640      	mov	r0, r8
 8004f28:	f7ff fee2 	bl	8004cf0 <_printf_common>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d14c      	bne.n	8004fca <_printf_i+0x1fe>
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	b004      	add	sp, #16
 8004f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3a:	4835      	ldr	r0, [pc, #212]	; (8005010 <_printf_i+0x244>)
 8004f3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	680e      	ldr	r6, [r1, #0]
 8004f44:	061f      	lsls	r7, r3, #24
 8004f46:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f4a:	600e      	str	r6, [r1, #0]
 8004f4c:	d514      	bpl.n	8004f78 <_printf_i+0x1ac>
 8004f4e:	07d9      	lsls	r1, r3, #31
 8004f50:	bf44      	itt	mi
 8004f52:	f043 0320 	orrmi.w	r3, r3, #32
 8004f56:	6023      	strmi	r3, [r4, #0]
 8004f58:	b91d      	cbnz	r5, 8004f62 <_printf_i+0x196>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f023 0320 	bic.w	r3, r3, #32
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	2310      	movs	r3, #16
 8004f64:	e7b0      	b.n	8004ec8 <_printf_i+0xfc>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f043 0320 	orr.w	r3, r3, #32
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	2378      	movs	r3, #120	; 0x78
 8004f70:	4828      	ldr	r0, [pc, #160]	; (8005014 <_printf_i+0x248>)
 8004f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f76:	e7e3      	b.n	8004f40 <_printf_i+0x174>
 8004f78:	065e      	lsls	r6, r3, #25
 8004f7a:	bf48      	it	mi
 8004f7c:	b2ad      	uxthmi	r5, r5
 8004f7e:	e7e6      	b.n	8004f4e <_printf_i+0x182>
 8004f80:	4616      	mov	r6, r2
 8004f82:	e7bb      	b.n	8004efc <_printf_i+0x130>
 8004f84:	680b      	ldr	r3, [r1, #0]
 8004f86:	6826      	ldr	r6, [r4, #0]
 8004f88:	6960      	ldr	r0, [r4, #20]
 8004f8a:	1d1d      	adds	r5, r3, #4
 8004f8c:	600d      	str	r5, [r1, #0]
 8004f8e:	0635      	lsls	r5, r6, #24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0x1cc>
 8004f94:	6018      	str	r0, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0x1d2>
 8004f98:	0671      	lsls	r1, r6, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0x1c8>
 8004f9c:	8018      	strh	r0, [r3, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	4616      	mov	r6, r2
 8004fa4:	e7ba      	b.n	8004f1c <_printf_i+0x150>
 8004fa6:	680b      	ldr	r3, [r1, #0]
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	600a      	str	r2, [r1, #0]
 8004fac:	681e      	ldr	r6, [r3, #0]
 8004fae:	6862      	ldr	r2, [r4, #4]
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7fb f914 	bl	80001e0 <memchr>
 8004fb8:	b108      	cbz	r0, 8004fbe <_printf_i+0x1f2>
 8004fba:	1b80      	subs	r0, r0, r6
 8004fbc:	6060      	str	r0, [r4, #4]
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc8:	e7a8      	b.n	8004f1c <_printf_i+0x150>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	4632      	mov	r2, r6
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d0ab      	beq.n	8004f30 <_printf_i+0x164>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	d413      	bmi.n	8005006 <_printf_i+0x23a>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	bfb8      	it	lt
 8004fe6:	4618      	movlt	r0, r3
 8004fe8:	e7a4      	b.n	8004f34 <_printf_i+0x168>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d09b      	beq.n	8004f30 <_printf_i+0x164>
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	9903      	ldr	r1, [sp, #12]
 8004ffe:	1a5b      	subs	r3, r3, r1
 8005000:	42ab      	cmp	r3, r5
 8005002:	dcf2      	bgt.n	8004fea <_printf_i+0x21e>
 8005004:	e7eb      	b.n	8004fde <_printf_i+0x212>
 8005006:	2500      	movs	r5, #0
 8005008:	f104 0619 	add.w	r6, r4, #25
 800500c:	e7f5      	b.n	8004ffa <_printf_i+0x22e>
 800500e:	bf00      	nop
 8005010:	08007246 	.word	0x08007246
 8005014:	08007257 	.word	0x08007257

08005018 <quorem>:
 8005018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	6903      	ldr	r3, [r0, #16]
 800501e:	690c      	ldr	r4, [r1, #16]
 8005020:	42a3      	cmp	r3, r4
 8005022:	4607      	mov	r7, r0
 8005024:	f2c0 8081 	blt.w	800512a <quorem+0x112>
 8005028:	3c01      	subs	r4, #1
 800502a:	f101 0814 	add.w	r8, r1, #20
 800502e:	f100 0514 	add.w	r5, r0, #20
 8005032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800503c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005040:	3301      	adds	r3, #1
 8005042:	429a      	cmp	r2, r3
 8005044:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800504c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005050:	d331      	bcc.n	80050b6 <quorem+0x9e>
 8005052:	f04f 0e00 	mov.w	lr, #0
 8005056:	4640      	mov	r0, r8
 8005058:	46ac      	mov	ip, r5
 800505a:	46f2      	mov	sl, lr
 800505c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005060:	b293      	uxth	r3, r2
 8005062:	fb06 e303 	mla	r3, r6, r3, lr
 8005066:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800506a:	b29b      	uxth	r3, r3
 800506c:	ebaa 0303 	sub.w	r3, sl, r3
 8005070:	0c12      	lsrs	r2, r2, #16
 8005072:	f8dc a000 	ldr.w	sl, [ip]
 8005076:	fb06 e202 	mla	r2, r6, r2, lr
 800507a:	fa13 f38a 	uxtah	r3, r3, sl
 800507e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005082:	fa1f fa82 	uxth.w	sl, r2
 8005086:	f8dc 2000 	ldr.w	r2, [ip]
 800508a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800508e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005098:	4581      	cmp	r9, r0
 800509a:	f84c 3b04 	str.w	r3, [ip], #4
 800509e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050a2:	d2db      	bcs.n	800505c <quorem+0x44>
 80050a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80050a8:	b92b      	cbnz	r3, 80050b6 <quorem+0x9e>
 80050aa:	9b01      	ldr	r3, [sp, #4]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	429d      	cmp	r5, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	d32e      	bcc.n	8005112 <quorem+0xfa>
 80050b4:	613c      	str	r4, [r7, #16]
 80050b6:	4638      	mov	r0, r7
 80050b8:	f001 f8be 	bl	8006238 <__mcmp>
 80050bc:	2800      	cmp	r0, #0
 80050be:	db24      	blt.n	800510a <quorem+0xf2>
 80050c0:	3601      	adds	r6, #1
 80050c2:	4628      	mov	r0, r5
 80050c4:	f04f 0c00 	mov.w	ip, #0
 80050c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80050cc:	f8d0 e000 	ldr.w	lr, [r0]
 80050d0:	b293      	uxth	r3, r2
 80050d2:	ebac 0303 	sub.w	r3, ip, r3
 80050d6:	0c12      	lsrs	r2, r2, #16
 80050d8:	fa13 f38e 	uxtah	r3, r3, lr
 80050dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ea:	45c1      	cmp	r9, r8
 80050ec:	f840 3b04 	str.w	r3, [r0], #4
 80050f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050f4:	d2e8      	bcs.n	80050c8 <quorem+0xb0>
 80050f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050fe:	b922      	cbnz	r2, 800510a <quorem+0xf2>
 8005100:	3b04      	subs	r3, #4
 8005102:	429d      	cmp	r5, r3
 8005104:	461a      	mov	r2, r3
 8005106:	d30a      	bcc.n	800511e <quorem+0x106>
 8005108:	613c      	str	r4, [r7, #16]
 800510a:	4630      	mov	r0, r6
 800510c:	b003      	add	sp, #12
 800510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	3b04      	subs	r3, #4
 8005116:	2a00      	cmp	r2, #0
 8005118:	d1cc      	bne.n	80050b4 <quorem+0x9c>
 800511a:	3c01      	subs	r4, #1
 800511c:	e7c7      	b.n	80050ae <quorem+0x96>
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	3b04      	subs	r3, #4
 8005122:	2a00      	cmp	r2, #0
 8005124:	d1f0      	bne.n	8005108 <quorem+0xf0>
 8005126:	3c01      	subs	r4, #1
 8005128:	e7eb      	b.n	8005102 <quorem+0xea>
 800512a:	2000      	movs	r0, #0
 800512c:	e7ee      	b.n	800510c <quorem+0xf4>
	...

08005130 <_dtoa_r>:
 8005130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	ed2d 8b02 	vpush	{d8}
 8005138:	ec57 6b10 	vmov	r6, r7, d0
 800513c:	b095      	sub	sp, #84	; 0x54
 800513e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800514a:	4604      	mov	r4, r0
 800514c:	9209      	str	r2, [sp, #36]	; 0x24
 800514e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005150:	b975      	cbnz	r5, 8005170 <_dtoa_r+0x40>
 8005152:	2010      	movs	r0, #16
 8005154:	f000 fddc 	bl	8005d10 <malloc>
 8005158:	4602      	mov	r2, r0
 800515a:	6260      	str	r0, [r4, #36]	; 0x24
 800515c:	b920      	cbnz	r0, 8005168 <_dtoa_r+0x38>
 800515e:	4bb2      	ldr	r3, [pc, #712]	; (8005428 <_dtoa_r+0x2f8>)
 8005160:	21ea      	movs	r1, #234	; 0xea
 8005162:	48b2      	ldr	r0, [pc, #712]	; (800542c <_dtoa_r+0x2fc>)
 8005164:	f001 fa32 	bl	80065cc <__assert_func>
 8005168:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800516c:	6005      	str	r5, [r0, #0]
 800516e:	60c5      	str	r5, [r0, #12]
 8005170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	b151      	cbz	r1, 800518c <_dtoa_r+0x5c>
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	604a      	str	r2, [r1, #4]
 800517a:	2301      	movs	r3, #1
 800517c:	4093      	lsls	r3, r2
 800517e:	608b      	str	r3, [r1, #8]
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fe1b 	bl	8005dbc <_Bfree>
 8005186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	1e3b      	subs	r3, r7, #0
 800518e:	bfb9      	ittee	lt
 8005190:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005194:	9303      	strlt	r3, [sp, #12]
 8005196:	2300      	movge	r3, #0
 8005198:	f8c8 3000 	strge.w	r3, [r8]
 800519c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80051a0:	4ba3      	ldr	r3, [pc, #652]	; (8005430 <_dtoa_r+0x300>)
 80051a2:	bfbc      	itt	lt
 80051a4:	2201      	movlt	r2, #1
 80051a6:	f8c8 2000 	strlt.w	r2, [r8]
 80051aa:	ea33 0309 	bics.w	r3, r3, r9
 80051ae:	d11b      	bne.n	80051e8 <_dtoa_r+0xb8>
 80051b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80051bc:	4333      	orrs	r3, r6
 80051be:	f000 857a 	beq.w	8005cb6 <_dtoa_r+0xb86>
 80051c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051c4:	b963      	cbnz	r3, 80051e0 <_dtoa_r+0xb0>
 80051c6:	4b9b      	ldr	r3, [pc, #620]	; (8005434 <_dtoa_r+0x304>)
 80051c8:	e024      	b.n	8005214 <_dtoa_r+0xe4>
 80051ca:	4b9b      	ldr	r3, [pc, #620]	; (8005438 <_dtoa_r+0x308>)
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	9800      	ldr	r0, [sp, #0]
 80051d6:	b015      	add	sp, #84	; 0x54
 80051d8:	ecbd 8b02 	vpop	{d8}
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	4b94      	ldr	r3, [pc, #592]	; (8005434 <_dtoa_r+0x304>)
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	3303      	adds	r3, #3
 80051e6:	e7f3      	b.n	80051d0 <_dtoa_r+0xa0>
 80051e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051ec:	2200      	movs	r2, #0
 80051ee:	ec51 0b17 	vmov	r0, r1, d7
 80051f2:	2300      	movs	r3, #0
 80051f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80051f8:	f7fb fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 80051fc:	4680      	mov	r8, r0
 80051fe:	b158      	cbz	r0, 8005218 <_dtoa_r+0xe8>
 8005200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005202:	2301      	movs	r3, #1
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8551 	beq.w	8005cb0 <_dtoa_r+0xb80>
 800520e:	488b      	ldr	r0, [pc, #556]	; (800543c <_dtoa_r+0x30c>)
 8005210:	6018      	str	r0, [r3, #0]
 8005212:	1e43      	subs	r3, r0, #1
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	e7dd      	b.n	80051d4 <_dtoa_r+0xa4>
 8005218:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800521c:	aa12      	add	r2, sp, #72	; 0x48
 800521e:	a913      	add	r1, sp, #76	; 0x4c
 8005220:	4620      	mov	r0, r4
 8005222:	f001 f8ad 	bl	8006380 <__d2b>
 8005226:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800522a:	4683      	mov	fp, r0
 800522c:	2d00      	cmp	r5, #0
 800522e:	d07c      	beq.n	800532a <_dtoa_r+0x1fa>
 8005230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005232:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800523a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800523e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005242:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800524a:	4b7d      	ldr	r3, [pc, #500]	; (8005440 <_dtoa_r+0x310>)
 800524c:	2200      	movs	r2, #0
 800524e:	4630      	mov	r0, r6
 8005250:	4639      	mov	r1, r7
 8005252:	f7fb f819 	bl	8000288 <__aeabi_dsub>
 8005256:	a36e      	add	r3, pc, #440	; (adr r3, 8005410 <_dtoa_r+0x2e0>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb f9cc 	bl	80005f8 <__aeabi_dmul>
 8005260:	a36d      	add	r3, pc, #436	; (adr r3, 8005418 <_dtoa_r+0x2e8>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f811 	bl	800028c <__adddf3>
 800526a:	4606      	mov	r6, r0
 800526c:	4628      	mov	r0, r5
 800526e:	460f      	mov	r7, r1
 8005270:	f7fb f958 	bl	8000524 <__aeabi_i2d>
 8005274:	a36a      	add	r3, pc, #424	; (adr r3, 8005420 <_dtoa_r+0x2f0>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb f801 	bl	800028c <__adddf3>
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	f7fb fc63 	bl	8000b58 <__aeabi_d2iz>
 8005292:	2200      	movs	r2, #0
 8005294:	4682      	mov	sl, r0
 8005296:	2300      	movs	r3, #0
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	f7fb fc1e 	bl	8000adc <__aeabi_dcmplt>
 80052a0:	b148      	cbz	r0, 80052b6 <_dtoa_r+0x186>
 80052a2:	4650      	mov	r0, sl
 80052a4:	f7fb f93e 	bl	8000524 <__aeabi_i2d>
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	f7fb fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80052b0:	b908      	cbnz	r0, 80052b6 <_dtoa_r+0x186>
 80052b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052b6:	f1ba 0f16 	cmp.w	sl, #22
 80052ba:	d854      	bhi.n	8005366 <_dtoa_r+0x236>
 80052bc:	4b61      	ldr	r3, [pc, #388]	; (8005444 <_dtoa_r+0x314>)
 80052be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052ca:	f7fb fc07 	bl	8000adc <__aeabi_dcmplt>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d04b      	beq.n	800536a <_dtoa_r+0x23a>
 80052d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052d6:	2300      	movs	r3, #0
 80052d8:	930e      	str	r3, [sp, #56]	; 0x38
 80052da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052dc:	1b5d      	subs	r5, r3, r5
 80052de:	1e6b      	subs	r3, r5, #1
 80052e0:	9304      	str	r3, [sp, #16]
 80052e2:	bf43      	ittte	mi
 80052e4:	2300      	movmi	r3, #0
 80052e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80052ea:	9304      	strmi	r3, [sp, #16]
 80052ec:	f04f 0800 	movpl.w	r8, #0
 80052f0:	f1ba 0f00 	cmp.w	sl, #0
 80052f4:	db3b      	blt.n	800536e <_dtoa_r+0x23e>
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80052fc:	4453      	add	r3, sl
 80052fe:	9304      	str	r3, [sp, #16]
 8005300:	2300      	movs	r3, #0
 8005302:	9306      	str	r3, [sp, #24]
 8005304:	9b05      	ldr	r3, [sp, #20]
 8005306:	2b09      	cmp	r3, #9
 8005308:	d869      	bhi.n	80053de <_dtoa_r+0x2ae>
 800530a:	2b05      	cmp	r3, #5
 800530c:	bfc4      	itt	gt
 800530e:	3b04      	subgt	r3, #4
 8005310:	9305      	strgt	r3, [sp, #20]
 8005312:	9b05      	ldr	r3, [sp, #20]
 8005314:	f1a3 0302 	sub.w	r3, r3, #2
 8005318:	bfcc      	ite	gt
 800531a:	2500      	movgt	r5, #0
 800531c:	2501      	movle	r5, #1
 800531e:	2b03      	cmp	r3, #3
 8005320:	d869      	bhi.n	80053f6 <_dtoa_r+0x2c6>
 8005322:	e8df f003 	tbb	[pc, r3]
 8005326:	4e2c      	.short	0x4e2c
 8005328:	5a4c      	.short	0x5a4c
 800532a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800532e:	441d      	add	r5, r3
 8005330:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005334:	2b20      	cmp	r3, #32
 8005336:	bfc1      	itttt	gt
 8005338:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800533c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005340:	fa09 f303 	lslgt.w	r3, r9, r3
 8005344:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005348:	bfda      	itte	le
 800534a:	f1c3 0320 	rsble	r3, r3, #32
 800534e:	fa06 f003 	lslle.w	r0, r6, r3
 8005352:	4318      	orrgt	r0, r3
 8005354:	f7fb f8d6 	bl	8000504 <__aeabi_ui2d>
 8005358:	2301      	movs	r3, #1
 800535a:	4606      	mov	r6, r0
 800535c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005360:	3d01      	subs	r5, #1
 8005362:	9310      	str	r3, [sp, #64]	; 0x40
 8005364:	e771      	b.n	800524a <_dtoa_r+0x11a>
 8005366:	2301      	movs	r3, #1
 8005368:	e7b6      	b.n	80052d8 <_dtoa_r+0x1a8>
 800536a:	900e      	str	r0, [sp, #56]	; 0x38
 800536c:	e7b5      	b.n	80052da <_dtoa_r+0x1aa>
 800536e:	f1ca 0300 	rsb	r3, sl, #0
 8005372:	9306      	str	r3, [sp, #24]
 8005374:	2300      	movs	r3, #0
 8005376:	eba8 080a 	sub.w	r8, r8, sl
 800537a:	930d      	str	r3, [sp, #52]	; 0x34
 800537c:	e7c2      	b.n	8005304 <_dtoa_r+0x1d4>
 800537e:	2300      	movs	r3, #0
 8005380:	9308      	str	r3, [sp, #32]
 8005382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	dc39      	bgt.n	80053fc <_dtoa_r+0x2cc>
 8005388:	f04f 0901 	mov.w	r9, #1
 800538c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005390:	464b      	mov	r3, r9
 8005392:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005396:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005398:	2200      	movs	r2, #0
 800539a:	6042      	str	r2, [r0, #4]
 800539c:	2204      	movs	r2, #4
 800539e:	f102 0614 	add.w	r6, r2, #20
 80053a2:	429e      	cmp	r6, r3
 80053a4:	6841      	ldr	r1, [r0, #4]
 80053a6:	d92f      	bls.n	8005408 <_dtoa_r+0x2d8>
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fcc7 	bl	8005d3c <_Balloc>
 80053ae:	9000      	str	r0, [sp, #0]
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d14b      	bne.n	800544c <_dtoa_r+0x31c>
 80053b4:	4b24      	ldr	r3, [pc, #144]	; (8005448 <_dtoa_r+0x318>)
 80053b6:	4602      	mov	r2, r0
 80053b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80053bc:	e6d1      	b.n	8005162 <_dtoa_r+0x32>
 80053be:	2301      	movs	r3, #1
 80053c0:	e7de      	b.n	8005380 <_dtoa_r+0x250>
 80053c2:	2300      	movs	r3, #0
 80053c4:	9308      	str	r3, [sp, #32]
 80053c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053c8:	eb0a 0903 	add.w	r9, sl, r3
 80053cc:	f109 0301 	add.w	r3, r9, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	bfb8      	it	lt
 80053d6:	2301      	movlt	r3, #1
 80053d8:	e7dd      	b.n	8005396 <_dtoa_r+0x266>
 80053da:	2301      	movs	r3, #1
 80053dc:	e7f2      	b.n	80053c4 <_dtoa_r+0x294>
 80053de:	2501      	movs	r5, #1
 80053e0:	2300      	movs	r3, #0
 80053e2:	9305      	str	r3, [sp, #20]
 80053e4:	9508      	str	r5, [sp, #32]
 80053e6:	f04f 39ff 	mov.w	r9, #4294967295
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80053f0:	2312      	movs	r3, #18
 80053f2:	9209      	str	r2, [sp, #36]	; 0x24
 80053f4:	e7cf      	b.n	8005396 <_dtoa_r+0x266>
 80053f6:	2301      	movs	r3, #1
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	e7f4      	b.n	80053e6 <_dtoa_r+0x2b6>
 80053fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005400:	f8cd 9004 	str.w	r9, [sp, #4]
 8005404:	464b      	mov	r3, r9
 8005406:	e7c6      	b.n	8005396 <_dtoa_r+0x266>
 8005408:	3101      	adds	r1, #1
 800540a:	6041      	str	r1, [r0, #4]
 800540c:	0052      	lsls	r2, r2, #1
 800540e:	e7c6      	b.n	800539e <_dtoa_r+0x26e>
 8005410:	636f4361 	.word	0x636f4361
 8005414:	3fd287a7 	.word	0x3fd287a7
 8005418:	8b60c8b3 	.word	0x8b60c8b3
 800541c:	3fc68a28 	.word	0x3fc68a28
 8005420:	509f79fb 	.word	0x509f79fb
 8005424:	3fd34413 	.word	0x3fd34413
 8005428:	08007275 	.word	0x08007275
 800542c:	0800728c 	.word	0x0800728c
 8005430:	7ff00000 	.word	0x7ff00000
 8005434:	08007271 	.word	0x08007271
 8005438:	08007268 	.word	0x08007268
 800543c:	08007245 	.word	0x08007245
 8005440:	3ff80000 	.word	0x3ff80000
 8005444:	08007388 	.word	0x08007388
 8005448:	080072eb 	.word	0x080072eb
 800544c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800544e:	9a00      	ldr	r2, [sp, #0]
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	2b0e      	cmp	r3, #14
 8005456:	f200 80ad 	bhi.w	80055b4 <_dtoa_r+0x484>
 800545a:	2d00      	cmp	r5, #0
 800545c:	f000 80aa 	beq.w	80055b4 <_dtoa_r+0x484>
 8005460:	f1ba 0f00 	cmp.w	sl, #0
 8005464:	dd36      	ble.n	80054d4 <_dtoa_r+0x3a4>
 8005466:	4ac3      	ldr	r2, [pc, #780]	; (8005774 <_dtoa_r+0x644>)
 8005468:	f00a 030f 	and.w	r3, sl, #15
 800546c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005470:	ed93 7b00 	vldr	d7, [r3]
 8005474:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005478:	ea4f 172a 	mov.w	r7, sl, asr #4
 800547c:	eeb0 8a47 	vmov.f32	s16, s14
 8005480:	eef0 8a67 	vmov.f32	s17, s15
 8005484:	d016      	beq.n	80054b4 <_dtoa_r+0x384>
 8005486:	4bbc      	ldr	r3, [pc, #752]	; (8005778 <_dtoa_r+0x648>)
 8005488:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800548c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005490:	f7fb f9dc 	bl	800084c <__aeabi_ddiv>
 8005494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005498:	f007 070f 	and.w	r7, r7, #15
 800549c:	2503      	movs	r5, #3
 800549e:	4eb6      	ldr	r6, [pc, #728]	; (8005778 <_dtoa_r+0x648>)
 80054a0:	b957      	cbnz	r7, 80054b8 <_dtoa_r+0x388>
 80054a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a6:	ec53 2b18 	vmov	r2, r3, d8
 80054aa:	f7fb f9cf 	bl	800084c <__aeabi_ddiv>
 80054ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b2:	e029      	b.n	8005508 <_dtoa_r+0x3d8>
 80054b4:	2502      	movs	r5, #2
 80054b6:	e7f2      	b.n	800549e <_dtoa_r+0x36e>
 80054b8:	07f9      	lsls	r1, r7, #31
 80054ba:	d508      	bpl.n	80054ce <_dtoa_r+0x39e>
 80054bc:	ec51 0b18 	vmov	r0, r1, d8
 80054c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054c4:	f7fb f898 	bl	80005f8 <__aeabi_dmul>
 80054c8:	ec41 0b18 	vmov	d8, r0, r1
 80054cc:	3501      	adds	r5, #1
 80054ce:	107f      	asrs	r7, r7, #1
 80054d0:	3608      	adds	r6, #8
 80054d2:	e7e5      	b.n	80054a0 <_dtoa_r+0x370>
 80054d4:	f000 80a6 	beq.w	8005624 <_dtoa_r+0x4f4>
 80054d8:	f1ca 0600 	rsb	r6, sl, #0
 80054dc:	4ba5      	ldr	r3, [pc, #660]	; (8005774 <_dtoa_r+0x644>)
 80054de:	4fa6      	ldr	r7, [pc, #664]	; (8005778 <_dtoa_r+0x648>)
 80054e0:	f006 020f 	and.w	r2, r6, #15
 80054e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054f0:	f7fb f882 	bl	80005f8 <__aeabi_dmul>
 80054f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f8:	1136      	asrs	r6, r6, #4
 80054fa:	2300      	movs	r3, #0
 80054fc:	2502      	movs	r5, #2
 80054fe:	2e00      	cmp	r6, #0
 8005500:	f040 8085 	bne.w	800560e <_dtoa_r+0x4de>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1d2      	bne.n	80054ae <_dtoa_r+0x37e>
 8005508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 808c 	beq.w	8005628 <_dtoa_r+0x4f8>
 8005510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005514:	4b99      	ldr	r3, [pc, #612]	; (800577c <_dtoa_r+0x64c>)
 8005516:	2200      	movs	r2, #0
 8005518:	4630      	mov	r0, r6
 800551a:	4639      	mov	r1, r7
 800551c:	f7fb fade 	bl	8000adc <__aeabi_dcmplt>
 8005520:	2800      	cmp	r0, #0
 8005522:	f000 8081 	beq.w	8005628 <_dtoa_r+0x4f8>
 8005526:	9b01      	ldr	r3, [sp, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d07d      	beq.n	8005628 <_dtoa_r+0x4f8>
 800552c:	f1b9 0f00 	cmp.w	r9, #0
 8005530:	dd3c      	ble.n	80055ac <_dtoa_r+0x47c>
 8005532:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005536:	9307      	str	r3, [sp, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	4b91      	ldr	r3, [pc, #580]	; (8005780 <_dtoa_r+0x650>)
 800553c:	4630      	mov	r0, r6
 800553e:	4639      	mov	r1, r7
 8005540:	f7fb f85a 	bl	80005f8 <__aeabi_dmul>
 8005544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005548:	3501      	adds	r5, #1
 800554a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800554e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005552:	4628      	mov	r0, r5
 8005554:	f7fa ffe6 	bl	8000524 <__aeabi_i2d>
 8005558:	4632      	mov	r2, r6
 800555a:	463b      	mov	r3, r7
 800555c:	f7fb f84c 	bl	80005f8 <__aeabi_dmul>
 8005560:	4b88      	ldr	r3, [pc, #544]	; (8005784 <_dtoa_r+0x654>)
 8005562:	2200      	movs	r2, #0
 8005564:	f7fa fe92 	bl	800028c <__adddf3>
 8005568:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800556c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005570:	9303      	str	r3, [sp, #12]
 8005572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d15c      	bne.n	8005632 <_dtoa_r+0x502>
 8005578:	4b83      	ldr	r3, [pc, #524]	; (8005788 <_dtoa_r+0x658>)
 800557a:	2200      	movs	r2, #0
 800557c:	4630      	mov	r0, r6
 800557e:	4639      	mov	r1, r7
 8005580:	f7fa fe82 	bl	8000288 <__aeabi_dsub>
 8005584:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005588:	4606      	mov	r6, r0
 800558a:	460f      	mov	r7, r1
 800558c:	f7fb fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8005590:	2800      	cmp	r0, #0
 8005592:	f040 8296 	bne.w	8005ac2 <_dtoa_r+0x992>
 8005596:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800559a:	4630      	mov	r0, r6
 800559c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb fa9b 	bl	8000adc <__aeabi_dcmplt>
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f040 8288 	bne.w	8005abc <_dtoa_r+0x98c>
 80055ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f2c0 8158 	blt.w	800586c <_dtoa_r+0x73c>
 80055bc:	f1ba 0f0e 	cmp.w	sl, #14
 80055c0:	f300 8154 	bgt.w	800586c <_dtoa_r+0x73c>
 80055c4:	4b6b      	ldr	r3, [pc, #428]	; (8005774 <_dtoa_r+0x644>)
 80055c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f280 80e3 	bge.w	800579c <_dtoa_r+0x66c>
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f300 80df 	bgt.w	800579c <_dtoa_r+0x66c>
 80055de:	f040 826d 	bne.w	8005abc <_dtoa_r+0x98c>
 80055e2:	4b69      	ldr	r3, [pc, #420]	; (8005788 <_dtoa_r+0x658>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	4640      	mov	r0, r8
 80055e8:	4649      	mov	r1, r9
 80055ea:	f7fb f805 	bl	80005f8 <__aeabi_dmul>
 80055ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f2:	f7fb fa87 	bl	8000b04 <__aeabi_dcmpge>
 80055f6:	9e01      	ldr	r6, [sp, #4]
 80055f8:	4637      	mov	r7, r6
 80055fa:	2800      	cmp	r0, #0
 80055fc:	f040 8243 	bne.w	8005a86 <_dtoa_r+0x956>
 8005600:	9d00      	ldr	r5, [sp, #0]
 8005602:	2331      	movs	r3, #49	; 0x31
 8005604:	f805 3b01 	strb.w	r3, [r5], #1
 8005608:	f10a 0a01 	add.w	sl, sl, #1
 800560c:	e23f      	b.n	8005a8e <_dtoa_r+0x95e>
 800560e:	07f2      	lsls	r2, r6, #31
 8005610:	d505      	bpl.n	800561e <_dtoa_r+0x4ee>
 8005612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005616:	f7fa ffef 	bl	80005f8 <__aeabi_dmul>
 800561a:	3501      	adds	r5, #1
 800561c:	2301      	movs	r3, #1
 800561e:	1076      	asrs	r6, r6, #1
 8005620:	3708      	adds	r7, #8
 8005622:	e76c      	b.n	80054fe <_dtoa_r+0x3ce>
 8005624:	2502      	movs	r5, #2
 8005626:	e76f      	b.n	8005508 <_dtoa_r+0x3d8>
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	f8cd a01c 	str.w	sl, [sp, #28]
 800562e:	930c      	str	r3, [sp, #48]	; 0x30
 8005630:	e78d      	b.n	800554e <_dtoa_r+0x41e>
 8005632:	9900      	ldr	r1, [sp, #0]
 8005634:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005638:	4b4e      	ldr	r3, [pc, #312]	; (8005774 <_dtoa_r+0x644>)
 800563a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800563e:	4401      	add	r1, r0
 8005640:	9102      	str	r1, [sp, #8]
 8005642:	9908      	ldr	r1, [sp, #32]
 8005644:	eeb0 8a47 	vmov.f32	s16, s14
 8005648:	eef0 8a67 	vmov.f32	s17, s15
 800564c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005650:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005654:	2900      	cmp	r1, #0
 8005656:	d045      	beq.n	80056e4 <_dtoa_r+0x5b4>
 8005658:	494c      	ldr	r1, [pc, #304]	; (800578c <_dtoa_r+0x65c>)
 800565a:	2000      	movs	r0, #0
 800565c:	f7fb f8f6 	bl	800084c <__aeabi_ddiv>
 8005660:	ec53 2b18 	vmov	r2, r3, d8
 8005664:	f7fa fe10 	bl	8000288 <__aeabi_dsub>
 8005668:	9d00      	ldr	r5, [sp, #0]
 800566a:	ec41 0b18 	vmov	d8, r0, r1
 800566e:	4639      	mov	r1, r7
 8005670:	4630      	mov	r0, r6
 8005672:	f7fb fa71 	bl	8000b58 <__aeabi_d2iz>
 8005676:	900c      	str	r0, [sp, #48]	; 0x30
 8005678:	f7fa ff54 	bl	8000524 <__aeabi_i2d>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4630      	mov	r0, r6
 8005682:	4639      	mov	r1, r7
 8005684:	f7fa fe00 	bl	8000288 <__aeabi_dsub>
 8005688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800568a:	3330      	adds	r3, #48	; 0x30
 800568c:	f805 3b01 	strb.w	r3, [r5], #1
 8005690:	ec53 2b18 	vmov	r2, r3, d8
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	f7fb fa20 	bl	8000adc <__aeabi_dcmplt>
 800569c:	2800      	cmp	r0, #0
 800569e:	d165      	bne.n	800576c <_dtoa_r+0x63c>
 80056a0:	4632      	mov	r2, r6
 80056a2:	463b      	mov	r3, r7
 80056a4:	4935      	ldr	r1, [pc, #212]	; (800577c <_dtoa_r+0x64c>)
 80056a6:	2000      	movs	r0, #0
 80056a8:	f7fa fdee 	bl	8000288 <__aeabi_dsub>
 80056ac:	ec53 2b18 	vmov	r2, r3, d8
 80056b0:	f7fb fa14 	bl	8000adc <__aeabi_dcmplt>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	f040 80b9 	bne.w	800582c <_dtoa_r+0x6fc>
 80056ba:	9b02      	ldr	r3, [sp, #8]
 80056bc:	429d      	cmp	r5, r3
 80056be:	f43f af75 	beq.w	80055ac <_dtoa_r+0x47c>
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <_dtoa_r+0x650>)
 80056c4:	ec51 0b18 	vmov	r0, r1, d8
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ff95 	bl	80005f8 <__aeabi_dmul>
 80056ce:	4b2c      	ldr	r3, [pc, #176]	; (8005780 <_dtoa_r+0x650>)
 80056d0:	ec41 0b18 	vmov	d8, r0, r1
 80056d4:	2200      	movs	r2, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	4606      	mov	r6, r0
 80056e0:	460f      	mov	r7, r1
 80056e2:	e7c4      	b.n	800566e <_dtoa_r+0x53e>
 80056e4:	ec51 0b17 	vmov	r0, r1, d7
 80056e8:	f7fa ff86 	bl	80005f8 <__aeabi_dmul>
 80056ec:	9b02      	ldr	r3, [sp, #8]
 80056ee:	9d00      	ldr	r5, [sp, #0]
 80056f0:	930c      	str	r3, [sp, #48]	; 0x30
 80056f2:	ec41 0b18 	vmov	d8, r0, r1
 80056f6:	4639      	mov	r1, r7
 80056f8:	4630      	mov	r0, r6
 80056fa:	f7fb fa2d 	bl	8000b58 <__aeabi_d2iz>
 80056fe:	9011      	str	r0, [sp, #68]	; 0x44
 8005700:	f7fa ff10 	bl	8000524 <__aeabi_i2d>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fa fdbc 	bl	8000288 <__aeabi_dsub>
 8005710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005712:	3330      	adds	r3, #48	; 0x30
 8005714:	f805 3b01 	strb.w	r3, [r5], #1
 8005718:	9b02      	ldr	r3, [sp, #8]
 800571a:	429d      	cmp	r5, r3
 800571c:	4606      	mov	r6, r0
 800571e:	460f      	mov	r7, r1
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	d134      	bne.n	8005790 <_dtoa_r+0x660>
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <_dtoa_r+0x65c>)
 8005728:	ec51 0b18 	vmov	r0, r1, d8
 800572c:	f7fa fdae 	bl	800028c <__adddf3>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fb f9ee 	bl	8000b18 <__aeabi_dcmpgt>
 800573c:	2800      	cmp	r0, #0
 800573e:	d175      	bne.n	800582c <_dtoa_r+0x6fc>
 8005740:	ec53 2b18 	vmov	r2, r3, d8
 8005744:	4911      	ldr	r1, [pc, #68]	; (800578c <_dtoa_r+0x65c>)
 8005746:	2000      	movs	r0, #0
 8005748:	f7fa fd9e 	bl	8000288 <__aeabi_dsub>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb f9c2 	bl	8000adc <__aeabi_dcmplt>
 8005758:	2800      	cmp	r0, #0
 800575a:	f43f af27 	beq.w	80055ac <_dtoa_r+0x47c>
 800575e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005760:	1e6b      	subs	r3, r5, #1
 8005762:	930c      	str	r3, [sp, #48]	; 0x30
 8005764:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d0f8      	beq.n	800575e <_dtoa_r+0x62e>
 800576c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005770:	e04a      	b.n	8005808 <_dtoa_r+0x6d8>
 8005772:	bf00      	nop
 8005774:	08007388 	.word	0x08007388
 8005778:	08007360 	.word	0x08007360
 800577c:	3ff00000 	.word	0x3ff00000
 8005780:	40240000 	.word	0x40240000
 8005784:	401c0000 	.word	0x401c0000
 8005788:	40140000 	.word	0x40140000
 800578c:	3fe00000 	.word	0x3fe00000
 8005790:	4baf      	ldr	r3, [pc, #700]	; (8005a50 <_dtoa_r+0x920>)
 8005792:	f7fa ff31 	bl	80005f8 <__aeabi_dmul>
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	e7ac      	b.n	80056f6 <_dtoa_r+0x5c6>
 800579c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057a0:	9d00      	ldr	r5, [sp, #0]
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	4630      	mov	r0, r6
 80057a8:	4639      	mov	r1, r7
 80057aa:	f7fb f84f 	bl	800084c <__aeabi_ddiv>
 80057ae:	f7fb f9d3 	bl	8000b58 <__aeabi_d2iz>
 80057b2:	9002      	str	r0, [sp, #8]
 80057b4:	f7fa feb6 	bl	8000524 <__aeabi_i2d>
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	f7fa ff1c 	bl	80005f8 <__aeabi_dmul>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4630      	mov	r0, r6
 80057c6:	4639      	mov	r1, r7
 80057c8:	f7fa fd5e 	bl	8000288 <__aeabi_dsub>
 80057cc:	9e02      	ldr	r6, [sp, #8]
 80057ce:	9f01      	ldr	r7, [sp, #4]
 80057d0:	3630      	adds	r6, #48	; 0x30
 80057d2:	f805 6b01 	strb.w	r6, [r5], #1
 80057d6:	9e00      	ldr	r6, [sp, #0]
 80057d8:	1bae      	subs	r6, r5, r6
 80057da:	42b7      	cmp	r7, r6
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	d137      	bne.n	8005852 <_dtoa_r+0x722>
 80057e2:	f7fa fd53 	bl	800028c <__adddf3>
 80057e6:	4642      	mov	r2, r8
 80057e8:	464b      	mov	r3, r9
 80057ea:	4606      	mov	r6, r0
 80057ec:	460f      	mov	r7, r1
 80057ee:	f7fb f993 	bl	8000b18 <__aeabi_dcmpgt>
 80057f2:	b9c8      	cbnz	r0, 8005828 <_dtoa_r+0x6f8>
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	f7fb f964 	bl	8000ac8 <__aeabi_dcmpeq>
 8005800:	b110      	cbz	r0, 8005808 <_dtoa_r+0x6d8>
 8005802:	9b02      	ldr	r3, [sp, #8]
 8005804:	07d9      	lsls	r1, r3, #31
 8005806:	d40f      	bmi.n	8005828 <_dtoa_r+0x6f8>
 8005808:	4620      	mov	r0, r4
 800580a:	4659      	mov	r1, fp
 800580c:	f000 fad6 	bl	8005dbc <_Bfree>
 8005810:	2300      	movs	r3, #0
 8005812:	702b      	strb	r3, [r5, #0]
 8005814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005816:	f10a 0001 	add.w	r0, sl, #1
 800581a:	6018      	str	r0, [r3, #0]
 800581c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800581e:	2b00      	cmp	r3, #0
 8005820:	f43f acd8 	beq.w	80051d4 <_dtoa_r+0xa4>
 8005824:	601d      	str	r5, [r3, #0]
 8005826:	e4d5      	b.n	80051d4 <_dtoa_r+0xa4>
 8005828:	f8cd a01c 	str.w	sl, [sp, #28]
 800582c:	462b      	mov	r3, r5
 800582e:	461d      	mov	r5, r3
 8005830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005834:	2a39      	cmp	r2, #57	; 0x39
 8005836:	d108      	bne.n	800584a <_dtoa_r+0x71a>
 8005838:	9a00      	ldr	r2, [sp, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d1f7      	bne.n	800582e <_dtoa_r+0x6fe>
 800583e:	9a07      	ldr	r2, [sp, #28]
 8005840:	9900      	ldr	r1, [sp, #0]
 8005842:	3201      	adds	r2, #1
 8005844:	9207      	str	r2, [sp, #28]
 8005846:	2230      	movs	r2, #48	; 0x30
 8005848:	700a      	strb	r2, [r1, #0]
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	3201      	adds	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	e78c      	b.n	800576c <_dtoa_r+0x63c>
 8005852:	4b7f      	ldr	r3, [pc, #508]	; (8005a50 <_dtoa_r+0x920>)
 8005854:	2200      	movs	r2, #0
 8005856:	f7fa fecf 	bl	80005f8 <__aeabi_dmul>
 800585a:	2200      	movs	r2, #0
 800585c:	2300      	movs	r3, #0
 800585e:	4606      	mov	r6, r0
 8005860:	460f      	mov	r7, r1
 8005862:	f7fb f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8005866:	2800      	cmp	r0, #0
 8005868:	d09b      	beq.n	80057a2 <_dtoa_r+0x672>
 800586a:	e7cd      	b.n	8005808 <_dtoa_r+0x6d8>
 800586c:	9a08      	ldr	r2, [sp, #32]
 800586e:	2a00      	cmp	r2, #0
 8005870:	f000 80c4 	beq.w	80059fc <_dtoa_r+0x8cc>
 8005874:	9a05      	ldr	r2, [sp, #20]
 8005876:	2a01      	cmp	r2, #1
 8005878:	f300 80a8 	bgt.w	80059cc <_dtoa_r+0x89c>
 800587c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800587e:	2a00      	cmp	r2, #0
 8005880:	f000 80a0 	beq.w	80059c4 <_dtoa_r+0x894>
 8005884:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005888:	9e06      	ldr	r6, [sp, #24]
 800588a:	4645      	mov	r5, r8
 800588c:	9a04      	ldr	r2, [sp, #16]
 800588e:	2101      	movs	r1, #1
 8005890:	441a      	add	r2, r3
 8005892:	4620      	mov	r0, r4
 8005894:	4498      	add	r8, r3
 8005896:	9204      	str	r2, [sp, #16]
 8005898:	f000 fb4c 	bl	8005f34 <__i2b>
 800589c:	4607      	mov	r7, r0
 800589e:	2d00      	cmp	r5, #0
 80058a0:	dd0b      	ble.n	80058ba <_dtoa_r+0x78a>
 80058a2:	9b04      	ldr	r3, [sp, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dd08      	ble.n	80058ba <_dtoa_r+0x78a>
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	bfa8      	it	ge
 80058ae:	462b      	movge	r3, r5
 80058b0:	eba8 0803 	sub.w	r8, r8, r3
 80058b4:	1aed      	subs	r5, r5, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	9b06      	ldr	r3, [sp, #24]
 80058bc:	b1fb      	cbz	r3, 80058fe <_dtoa_r+0x7ce>
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 809f 	beq.w	8005a04 <_dtoa_r+0x8d4>
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	dd11      	ble.n	80058ee <_dtoa_r+0x7be>
 80058ca:	4639      	mov	r1, r7
 80058cc:	4632      	mov	r2, r6
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 fbec 	bl	80060ac <__pow5mult>
 80058d4:	465a      	mov	r2, fp
 80058d6:	4601      	mov	r1, r0
 80058d8:	4607      	mov	r7, r0
 80058da:	4620      	mov	r0, r4
 80058dc:	f000 fb40 	bl	8005f60 <__multiply>
 80058e0:	4659      	mov	r1, fp
 80058e2:	9007      	str	r0, [sp, #28]
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fa69 	bl	8005dbc <_Bfree>
 80058ea:	9b07      	ldr	r3, [sp, #28]
 80058ec:	469b      	mov	fp, r3
 80058ee:	9b06      	ldr	r3, [sp, #24]
 80058f0:	1b9a      	subs	r2, r3, r6
 80058f2:	d004      	beq.n	80058fe <_dtoa_r+0x7ce>
 80058f4:	4659      	mov	r1, fp
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fbd8 	bl	80060ac <__pow5mult>
 80058fc:	4683      	mov	fp, r0
 80058fe:	2101      	movs	r1, #1
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fb17 	bl	8005f34 <__i2b>
 8005906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	4606      	mov	r6, r0
 800590c:	dd7c      	ble.n	8005a08 <_dtoa_r+0x8d8>
 800590e:	461a      	mov	r2, r3
 8005910:	4601      	mov	r1, r0
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fbca 	bl	80060ac <__pow5mult>
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	2b01      	cmp	r3, #1
 800591c:	4606      	mov	r6, r0
 800591e:	dd76      	ble.n	8005a0e <_dtoa_r+0x8de>
 8005920:	2300      	movs	r3, #0
 8005922:	9306      	str	r3, [sp, #24]
 8005924:	6933      	ldr	r3, [r6, #16]
 8005926:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800592a:	6918      	ldr	r0, [r3, #16]
 800592c:	f000 fab2 	bl	8005e94 <__hi0bits>
 8005930:	f1c0 0020 	rsb	r0, r0, #32
 8005934:	9b04      	ldr	r3, [sp, #16]
 8005936:	4418      	add	r0, r3
 8005938:	f010 001f 	ands.w	r0, r0, #31
 800593c:	f000 8086 	beq.w	8005a4c <_dtoa_r+0x91c>
 8005940:	f1c0 0320 	rsb	r3, r0, #32
 8005944:	2b04      	cmp	r3, #4
 8005946:	dd7f      	ble.n	8005a48 <_dtoa_r+0x918>
 8005948:	f1c0 001c 	rsb	r0, r0, #28
 800594c:	9b04      	ldr	r3, [sp, #16]
 800594e:	4403      	add	r3, r0
 8005950:	4480      	add	r8, r0
 8005952:	4405      	add	r5, r0
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	f1b8 0f00 	cmp.w	r8, #0
 800595a:	dd05      	ble.n	8005968 <_dtoa_r+0x838>
 800595c:	4659      	mov	r1, fp
 800595e:	4642      	mov	r2, r8
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fbfd 	bl	8006160 <__lshift>
 8005966:	4683      	mov	fp, r0
 8005968:	9b04      	ldr	r3, [sp, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dd05      	ble.n	800597a <_dtoa_r+0x84a>
 800596e:	4631      	mov	r1, r6
 8005970:	461a      	mov	r2, r3
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fbf4 	bl	8006160 <__lshift>
 8005978:	4606      	mov	r6, r0
 800597a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800597c:	2b00      	cmp	r3, #0
 800597e:	d069      	beq.n	8005a54 <_dtoa_r+0x924>
 8005980:	4631      	mov	r1, r6
 8005982:	4658      	mov	r0, fp
 8005984:	f000 fc58 	bl	8006238 <__mcmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	da63      	bge.n	8005a54 <_dtoa_r+0x924>
 800598c:	2300      	movs	r3, #0
 800598e:	4659      	mov	r1, fp
 8005990:	220a      	movs	r2, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f000 fa34 	bl	8005e00 <__multadd>
 8005998:	9b08      	ldr	r3, [sp, #32]
 800599a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599e:	4683      	mov	fp, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 818f 	beq.w	8005cc4 <_dtoa_r+0xb94>
 80059a6:	4639      	mov	r1, r7
 80059a8:	2300      	movs	r3, #0
 80059aa:	220a      	movs	r2, #10
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fa27 	bl	8005e00 <__multadd>
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	4607      	mov	r7, r0
 80059b8:	f300 808e 	bgt.w	8005ad8 <_dtoa_r+0x9a8>
 80059bc:	9b05      	ldr	r3, [sp, #20]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	dc50      	bgt.n	8005a64 <_dtoa_r+0x934>
 80059c2:	e089      	b.n	8005ad8 <_dtoa_r+0x9a8>
 80059c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ca:	e75d      	b.n	8005888 <_dtoa_r+0x758>
 80059cc:	9b01      	ldr	r3, [sp, #4]
 80059ce:	1e5e      	subs	r6, r3, #1
 80059d0:	9b06      	ldr	r3, [sp, #24]
 80059d2:	42b3      	cmp	r3, r6
 80059d4:	bfbf      	itttt	lt
 80059d6:	9b06      	ldrlt	r3, [sp, #24]
 80059d8:	9606      	strlt	r6, [sp, #24]
 80059da:	1af2      	sublt	r2, r6, r3
 80059dc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80059de:	bfb6      	itet	lt
 80059e0:	189b      	addlt	r3, r3, r2
 80059e2:	1b9e      	subge	r6, r3, r6
 80059e4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	bfb8      	it	lt
 80059ea:	2600      	movlt	r6, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfb5      	itete	lt
 80059f0:	eba8 0503 	sublt.w	r5, r8, r3
 80059f4:	9b01      	ldrge	r3, [sp, #4]
 80059f6:	2300      	movlt	r3, #0
 80059f8:	4645      	movge	r5, r8
 80059fa:	e747      	b.n	800588c <_dtoa_r+0x75c>
 80059fc:	9e06      	ldr	r6, [sp, #24]
 80059fe:	9f08      	ldr	r7, [sp, #32]
 8005a00:	4645      	mov	r5, r8
 8005a02:	e74c      	b.n	800589e <_dtoa_r+0x76e>
 8005a04:	9a06      	ldr	r2, [sp, #24]
 8005a06:	e775      	b.n	80058f4 <_dtoa_r+0x7c4>
 8005a08:	9b05      	ldr	r3, [sp, #20]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	dc18      	bgt.n	8005a40 <_dtoa_r+0x910>
 8005a0e:	9b02      	ldr	r3, [sp, #8]
 8005a10:	b9b3      	cbnz	r3, 8005a40 <_dtoa_r+0x910>
 8005a12:	9b03      	ldr	r3, [sp, #12]
 8005a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a18:	b9a3      	cbnz	r3, 8005a44 <_dtoa_r+0x914>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a20:	0d1b      	lsrs	r3, r3, #20
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	b12b      	cbz	r3, 8005a32 <_dtoa_r+0x902>
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	9304      	str	r3, [sp, #16]
 8005a2c:	f108 0801 	add.w	r8, r8, #1
 8005a30:	2301      	movs	r3, #1
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f47f af74 	bne.w	8005924 <_dtoa_r+0x7f4>
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	e779      	b.n	8005934 <_dtoa_r+0x804>
 8005a40:	2300      	movs	r3, #0
 8005a42:	e7f6      	b.n	8005a32 <_dtoa_r+0x902>
 8005a44:	9b02      	ldr	r3, [sp, #8]
 8005a46:	e7f4      	b.n	8005a32 <_dtoa_r+0x902>
 8005a48:	d085      	beq.n	8005956 <_dtoa_r+0x826>
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	301c      	adds	r0, #28
 8005a4e:	e77d      	b.n	800594c <_dtoa_r+0x81c>
 8005a50:	40240000 	.word	0x40240000
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dc38      	bgt.n	8005acc <_dtoa_r+0x99c>
 8005a5a:	9b05      	ldr	r3, [sp, #20]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	dd35      	ble.n	8005acc <_dtoa_r+0x99c>
 8005a60:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	d10d      	bne.n	8005a86 <_dtoa_r+0x956>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	2205      	movs	r2, #5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 f9c5 	bl	8005e00 <__multadd>
 8005a76:	4601      	mov	r1, r0
 8005a78:	4606      	mov	r6, r0
 8005a7a:	4658      	mov	r0, fp
 8005a7c:	f000 fbdc 	bl	8006238 <__mcmp>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	f73f adbd 	bgt.w	8005600 <_dtoa_r+0x4d0>
 8005a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a88:	9d00      	ldr	r5, [sp, #0]
 8005a8a:	ea6f 0a03 	mvn.w	sl, r3
 8005a8e:	f04f 0800 	mov.w	r8, #0
 8005a92:	4631      	mov	r1, r6
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f991 	bl	8005dbc <_Bfree>
 8005a9a:	2f00      	cmp	r7, #0
 8005a9c:	f43f aeb4 	beq.w	8005808 <_dtoa_r+0x6d8>
 8005aa0:	f1b8 0f00 	cmp.w	r8, #0
 8005aa4:	d005      	beq.n	8005ab2 <_dtoa_r+0x982>
 8005aa6:	45b8      	cmp	r8, r7
 8005aa8:	d003      	beq.n	8005ab2 <_dtoa_r+0x982>
 8005aaa:	4641      	mov	r1, r8
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 f985 	bl	8005dbc <_Bfree>
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f000 f981 	bl	8005dbc <_Bfree>
 8005aba:	e6a5      	b.n	8005808 <_dtoa_r+0x6d8>
 8005abc:	2600      	movs	r6, #0
 8005abe:	4637      	mov	r7, r6
 8005ac0:	e7e1      	b.n	8005a86 <_dtoa_r+0x956>
 8005ac2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005ac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005ac8:	4637      	mov	r7, r6
 8005aca:	e599      	b.n	8005600 <_dtoa_r+0x4d0>
 8005acc:	9b08      	ldr	r3, [sp, #32]
 8005ace:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80fd 	beq.w	8005cd2 <_dtoa_r+0xba2>
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	dd05      	ble.n	8005ae8 <_dtoa_r+0x9b8>
 8005adc:	4639      	mov	r1, r7
 8005ade:	462a      	mov	r2, r5
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 fb3d 	bl	8006160 <__lshift>
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d05c      	beq.n	8005ba8 <_dtoa_r+0xa78>
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 f923 	bl	8005d3c <_Balloc>
 8005af6:	4605      	mov	r5, r0
 8005af8:	b928      	cbnz	r0, 8005b06 <_dtoa_r+0x9d6>
 8005afa:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <_dtoa_r+0xbcc>)
 8005afc:	4602      	mov	r2, r0
 8005afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b02:	f7ff bb2e 	b.w	8005162 <_dtoa_r+0x32>
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	3202      	adds	r2, #2
 8005b0a:	0092      	lsls	r2, r2, #2
 8005b0c:	f107 010c 	add.w	r1, r7, #12
 8005b10:	300c      	adds	r0, #12
 8005b12:	f000 f905 	bl	8005d20 <memcpy>
 8005b16:	2201      	movs	r2, #1
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fb20 	bl	8006160 <__lshift>
 8005b20:	9b00      	ldr	r3, [sp, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	9b00      	ldr	r3, [sp, #0]
 8005b28:	444b      	add	r3, r9
 8005b2a:	9307      	str	r3, [sp, #28]
 8005b2c:	9b02      	ldr	r3, [sp, #8]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	46b8      	mov	r8, r7
 8005b34:	9306      	str	r3, [sp, #24]
 8005b36:	4607      	mov	r7, r0
 8005b38:	9b01      	ldr	r3, [sp, #4]
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	4658      	mov	r0, fp
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	f7ff fa69 	bl	8005018 <quorem>
 8005b46:	4603      	mov	r3, r0
 8005b48:	3330      	adds	r3, #48	; 0x30
 8005b4a:	9004      	str	r0, [sp, #16]
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	4658      	mov	r0, fp
 8005b50:	9308      	str	r3, [sp, #32]
 8005b52:	f000 fb71 	bl	8006238 <__mcmp>
 8005b56:	463a      	mov	r2, r7
 8005b58:	4681      	mov	r9, r0
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fb87 	bl	8006270 <__mdiff>
 8005b62:	68c2      	ldr	r2, [r0, #12]
 8005b64:	9b08      	ldr	r3, [sp, #32]
 8005b66:	4605      	mov	r5, r0
 8005b68:	bb02      	cbnz	r2, 8005bac <_dtoa_r+0xa7c>
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f000 fb63 	bl	8006238 <__mcmp>
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	4602      	mov	r2, r0
 8005b76:	4629      	mov	r1, r5
 8005b78:	4620      	mov	r0, r4
 8005b7a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005b7e:	f000 f91d 	bl	8005dbc <_Bfree>
 8005b82:	9b05      	ldr	r3, [sp, #20]
 8005b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b86:	9d01      	ldr	r5, [sp, #4]
 8005b88:	ea43 0102 	orr.w	r1, r3, r2
 8005b8c:	9b06      	ldr	r3, [sp, #24]
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	9b08      	ldr	r3, [sp, #32]
 8005b92:	d10d      	bne.n	8005bb0 <_dtoa_r+0xa80>
 8005b94:	2b39      	cmp	r3, #57	; 0x39
 8005b96:	d029      	beq.n	8005bec <_dtoa_r+0xabc>
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	dd01      	ble.n	8005ba2 <_dtoa_r+0xa72>
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	3331      	adds	r3, #49	; 0x31
 8005ba2:	9a02      	ldr	r2, [sp, #8]
 8005ba4:	7013      	strb	r3, [r2, #0]
 8005ba6:	e774      	b.n	8005a92 <_dtoa_r+0x962>
 8005ba8:	4638      	mov	r0, r7
 8005baa:	e7b9      	b.n	8005b20 <_dtoa_r+0x9f0>
 8005bac:	2201      	movs	r2, #1
 8005bae:	e7e2      	b.n	8005b76 <_dtoa_r+0xa46>
 8005bb0:	f1b9 0f00 	cmp.w	r9, #0
 8005bb4:	db06      	blt.n	8005bc4 <_dtoa_r+0xa94>
 8005bb6:	9905      	ldr	r1, [sp, #20]
 8005bb8:	ea41 0909 	orr.w	r9, r1, r9
 8005bbc:	9906      	ldr	r1, [sp, #24]
 8005bbe:	ea59 0101 	orrs.w	r1, r9, r1
 8005bc2:	d120      	bne.n	8005c06 <_dtoa_r+0xad6>
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	ddec      	ble.n	8005ba2 <_dtoa_r+0xa72>
 8005bc8:	4659      	mov	r1, fp
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	f000 fac6 	bl	8006160 <__lshift>
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4683      	mov	fp, r0
 8005bd8:	f000 fb2e 	bl	8006238 <__mcmp>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	dc02      	bgt.n	8005be8 <_dtoa_r+0xab8>
 8005be2:	d1de      	bne.n	8005ba2 <_dtoa_r+0xa72>
 8005be4:	07da      	lsls	r2, r3, #31
 8005be6:	d5dc      	bpl.n	8005ba2 <_dtoa_r+0xa72>
 8005be8:	2b39      	cmp	r3, #57	; 0x39
 8005bea:	d1d8      	bne.n	8005b9e <_dtoa_r+0xa6e>
 8005bec:	9a02      	ldr	r2, [sp, #8]
 8005bee:	2339      	movs	r3, #57	; 0x39
 8005bf0:	7013      	strb	r3, [r2, #0]
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	461d      	mov	r5, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005bfc:	2a39      	cmp	r2, #57	; 0x39
 8005bfe:	d050      	beq.n	8005ca2 <_dtoa_r+0xb72>
 8005c00:	3201      	adds	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e745      	b.n	8005a92 <_dtoa_r+0x962>
 8005c06:	2a00      	cmp	r2, #0
 8005c08:	dd03      	ble.n	8005c12 <_dtoa_r+0xae2>
 8005c0a:	2b39      	cmp	r3, #57	; 0x39
 8005c0c:	d0ee      	beq.n	8005bec <_dtoa_r+0xabc>
 8005c0e:	3301      	adds	r3, #1
 8005c10:	e7c7      	b.n	8005ba2 <_dtoa_r+0xa72>
 8005c12:	9a01      	ldr	r2, [sp, #4]
 8005c14:	9907      	ldr	r1, [sp, #28]
 8005c16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005c1a:	428a      	cmp	r2, r1
 8005c1c:	d02a      	beq.n	8005c74 <_dtoa_r+0xb44>
 8005c1e:	4659      	mov	r1, fp
 8005c20:	2300      	movs	r3, #0
 8005c22:	220a      	movs	r2, #10
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 f8eb 	bl	8005e00 <__multadd>
 8005c2a:	45b8      	cmp	r8, r7
 8005c2c:	4683      	mov	fp, r0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	f04f 020a 	mov.w	r2, #10
 8005c36:	4641      	mov	r1, r8
 8005c38:	4620      	mov	r0, r4
 8005c3a:	d107      	bne.n	8005c4c <_dtoa_r+0xb1c>
 8005c3c:	f000 f8e0 	bl	8005e00 <__multadd>
 8005c40:	4680      	mov	r8, r0
 8005c42:	4607      	mov	r7, r0
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	3301      	adds	r3, #1
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	e775      	b.n	8005b38 <_dtoa_r+0xa08>
 8005c4c:	f000 f8d8 	bl	8005e00 <__multadd>
 8005c50:	4639      	mov	r1, r7
 8005c52:	4680      	mov	r8, r0
 8005c54:	2300      	movs	r3, #0
 8005c56:	220a      	movs	r2, #10
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 f8d1 	bl	8005e00 <__multadd>
 8005c5e:	4607      	mov	r7, r0
 8005c60:	e7f0      	b.n	8005c44 <_dtoa_r+0xb14>
 8005c62:	f1b9 0f00 	cmp.w	r9, #0
 8005c66:	9a00      	ldr	r2, [sp, #0]
 8005c68:	bfcc      	ite	gt
 8005c6a:	464d      	movgt	r5, r9
 8005c6c:	2501      	movle	r5, #1
 8005c6e:	4415      	add	r5, r2
 8005c70:	f04f 0800 	mov.w	r8, #0
 8005c74:	4659      	mov	r1, fp
 8005c76:	2201      	movs	r2, #1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	f000 fa70 	bl	8006160 <__lshift>
 8005c80:	4631      	mov	r1, r6
 8005c82:	4683      	mov	fp, r0
 8005c84:	f000 fad8 	bl	8006238 <__mcmp>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	dcb2      	bgt.n	8005bf2 <_dtoa_r+0xac2>
 8005c8c:	d102      	bne.n	8005c94 <_dtoa_r+0xb64>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	07db      	lsls	r3, r3, #31
 8005c92:	d4ae      	bmi.n	8005bf2 <_dtoa_r+0xac2>
 8005c94:	462b      	mov	r3, r5
 8005c96:	461d      	mov	r5, r3
 8005c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c9c:	2a30      	cmp	r2, #48	; 0x30
 8005c9e:	d0fa      	beq.n	8005c96 <_dtoa_r+0xb66>
 8005ca0:	e6f7      	b.n	8005a92 <_dtoa_r+0x962>
 8005ca2:	9a00      	ldr	r2, [sp, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d1a5      	bne.n	8005bf4 <_dtoa_r+0xac4>
 8005ca8:	f10a 0a01 	add.w	sl, sl, #1
 8005cac:	2331      	movs	r3, #49	; 0x31
 8005cae:	e779      	b.n	8005ba4 <_dtoa_r+0xa74>
 8005cb0:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <_dtoa_r+0xbd0>)
 8005cb2:	f7ff baaf 	b.w	8005214 <_dtoa_r+0xe4>
 8005cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f47f aa86 	bne.w	80051ca <_dtoa_r+0x9a>
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <_dtoa_r+0xbd4>)
 8005cc0:	f7ff baa8 	b.w	8005214 <_dtoa_r+0xe4>
 8005cc4:	f1b9 0f00 	cmp.w	r9, #0
 8005cc8:	dc03      	bgt.n	8005cd2 <_dtoa_r+0xba2>
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	f73f aec9 	bgt.w	8005a64 <_dtoa_r+0x934>
 8005cd2:	9d00      	ldr	r5, [sp, #0]
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	4658      	mov	r0, fp
 8005cd8:	f7ff f99e 	bl	8005018 <quorem>
 8005cdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ce0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ce4:	9a00      	ldr	r2, [sp, #0]
 8005ce6:	1aaa      	subs	r2, r5, r2
 8005ce8:	4591      	cmp	r9, r2
 8005cea:	ddba      	ble.n	8005c62 <_dtoa_r+0xb32>
 8005cec:	4659      	mov	r1, fp
 8005cee:	2300      	movs	r3, #0
 8005cf0:	220a      	movs	r2, #10
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f884 	bl	8005e00 <__multadd>
 8005cf8:	4683      	mov	fp, r0
 8005cfa:	e7eb      	b.n	8005cd4 <_dtoa_r+0xba4>
 8005cfc:	080072eb 	.word	0x080072eb
 8005d00:	08007244 	.word	0x08007244
 8005d04:	08007268 	.word	0x08007268

08005d08 <_localeconv_r>:
 8005d08:	4800      	ldr	r0, [pc, #0]	; (8005d0c <_localeconv_r+0x4>)
 8005d0a:	4770      	bx	lr
 8005d0c:	20000160 	.word	0x20000160

08005d10 <malloc>:
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <malloc+0xc>)
 8005d12:	4601      	mov	r1, r0
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	f000 bbef 	b.w	80064f8 <_malloc_r>
 8005d1a:	bf00      	nop
 8005d1c:	2000000c 	.word	0x2000000c

08005d20 <memcpy>:
 8005d20:	440a      	add	r2, r1
 8005d22:	4291      	cmp	r1, r2
 8005d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d28:	d100      	bne.n	8005d2c <memcpy+0xc>
 8005d2a:	4770      	bx	lr
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d36:	4291      	cmp	r1, r2
 8005d38:	d1f9      	bne.n	8005d2e <memcpy+0xe>
 8005d3a:	bd10      	pop	{r4, pc}

08005d3c <_Balloc>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d40:	4604      	mov	r4, r0
 8005d42:	460d      	mov	r5, r1
 8005d44:	b976      	cbnz	r6, 8005d64 <_Balloc+0x28>
 8005d46:	2010      	movs	r0, #16
 8005d48:	f7ff ffe2 	bl	8005d10 <malloc>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6260      	str	r0, [r4, #36]	; 0x24
 8005d50:	b920      	cbnz	r0, 8005d5c <_Balloc+0x20>
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <_Balloc+0x78>)
 8005d54:	4818      	ldr	r0, [pc, #96]	; (8005db8 <_Balloc+0x7c>)
 8005d56:	2166      	movs	r1, #102	; 0x66
 8005d58:	f000 fc38 	bl	80065cc <__assert_func>
 8005d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d60:	6006      	str	r6, [r0, #0]
 8005d62:	60c6      	str	r6, [r0, #12]
 8005d64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d66:	68f3      	ldr	r3, [r6, #12]
 8005d68:	b183      	cbz	r3, 8005d8c <_Balloc+0x50>
 8005d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d72:	b9b8      	cbnz	r0, 8005da4 <_Balloc+0x68>
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f605 	lsl.w	r6, r1, r5
 8005d7a:	1d72      	adds	r2, r6, #5
 8005d7c:	0092      	lsls	r2, r2, #2
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fb5a 	bl	8006438 <_calloc_r>
 8005d84:	b160      	cbz	r0, 8005da0 <_Balloc+0x64>
 8005d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d8a:	e00e      	b.n	8005daa <_Balloc+0x6e>
 8005d8c:	2221      	movs	r2, #33	; 0x21
 8005d8e:	2104      	movs	r1, #4
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fb51 	bl	8006438 <_calloc_r>
 8005d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d98:	60f0      	str	r0, [r6, #12]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e4      	bne.n	8005d6a <_Balloc+0x2e>
 8005da0:	2000      	movs	r0, #0
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	6802      	ldr	r2, [r0, #0]
 8005da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005daa:	2300      	movs	r3, #0
 8005dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005db0:	e7f7      	b.n	8005da2 <_Balloc+0x66>
 8005db2:	bf00      	nop
 8005db4:	08007275 	.word	0x08007275
 8005db8:	080072fc 	.word	0x080072fc

08005dbc <_Bfree>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b976      	cbnz	r6, 8005de4 <_Bfree+0x28>
 8005dc6:	2010      	movs	r0, #16
 8005dc8:	f7ff ffa2 	bl	8005d10 <malloc>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	6268      	str	r0, [r5, #36]	; 0x24
 8005dd0:	b920      	cbnz	r0, 8005ddc <_Bfree+0x20>
 8005dd2:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <_Bfree+0x3c>)
 8005dd4:	4809      	ldr	r0, [pc, #36]	; (8005dfc <_Bfree+0x40>)
 8005dd6:	218a      	movs	r1, #138	; 0x8a
 8005dd8:	f000 fbf8 	bl	80065cc <__assert_func>
 8005ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005de0:	6006      	str	r6, [r0, #0]
 8005de2:	60c6      	str	r6, [r0, #12]
 8005de4:	b13c      	cbz	r4, 8005df6 <_Bfree+0x3a>
 8005de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005de8:	6862      	ldr	r2, [r4, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005df0:	6021      	str	r1, [r4, #0]
 8005df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	08007275 	.word	0x08007275
 8005dfc:	080072fc 	.word	0x080072fc

08005e00 <__multadd>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	690e      	ldr	r6, [r1, #16]
 8005e06:	4607      	mov	r7, r0
 8005e08:	4698      	mov	r8, r3
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f101 0014 	add.w	r0, r1, #20
 8005e10:	2300      	movs	r3, #0
 8005e12:	6805      	ldr	r5, [r0, #0]
 8005e14:	b2a9      	uxth	r1, r5
 8005e16:	fb02 8101 	mla	r1, r2, r1, r8
 8005e1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005e1e:	0c2d      	lsrs	r5, r5, #16
 8005e20:	fb02 c505 	mla	r5, r2, r5, ip
 8005e24:	b289      	uxth	r1, r1
 8005e26:	3301      	adds	r3, #1
 8005e28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	f840 1b04 	str.w	r1, [r0], #4
 8005e32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005e36:	dcec      	bgt.n	8005e12 <__multadd+0x12>
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	d022      	beq.n	8005e84 <__multadd+0x84>
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	42b3      	cmp	r3, r6
 8005e42:	dc19      	bgt.n	8005e78 <__multadd+0x78>
 8005e44:	6861      	ldr	r1, [r4, #4]
 8005e46:	4638      	mov	r0, r7
 8005e48:	3101      	adds	r1, #1
 8005e4a:	f7ff ff77 	bl	8005d3c <_Balloc>
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b928      	cbnz	r0, 8005e5e <__multadd+0x5e>
 8005e52:	4602      	mov	r2, r0
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <__multadd+0x8c>)
 8005e56:	480e      	ldr	r0, [pc, #56]	; (8005e90 <__multadd+0x90>)
 8005e58:	21b5      	movs	r1, #181	; 0xb5
 8005e5a:	f000 fbb7 	bl	80065cc <__assert_func>
 8005e5e:	6922      	ldr	r2, [r4, #16]
 8005e60:	3202      	adds	r2, #2
 8005e62:	f104 010c 	add.w	r1, r4, #12
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	300c      	adds	r0, #12
 8005e6a:	f7ff ff59 	bl	8005d20 <memcpy>
 8005e6e:	4621      	mov	r1, r4
 8005e70:	4638      	mov	r0, r7
 8005e72:	f7ff ffa3 	bl	8005dbc <_Bfree>
 8005e76:	462c      	mov	r4, r5
 8005e78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e82:	6126      	str	r6, [r4, #16]
 8005e84:	4620      	mov	r0, r4
 8005e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8a:	bf00      	nop
 8005e8c:	080072eb 	.word	0x080072eb
 8005e90:	080072fc 	.word	0x080072fc

08005e94 <__hi0bits>:
 8005e94:	0c03      	lsrs	r3, r0, #16
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	b9d3      	cbnz	r3, 8005ed0 <__hi0bits+0x3c>
 8005e9a:	0400      	lsls	r0, r0, #16
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ea2:	bf04      	itt	eq
 8005ea4:	0200      	lsleq	r0, r0, #8
 8005ea6:	3308      	addeq	r3, #8
 8005ea8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005eac:	bf04      	itt	eq
 8005eae:	0100      	lsleq	r0, r0, #4
 8005eb0:	3304      	addeq	r3, #4
 8005eb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eb6:	bf04      	itt	eq
 8005eb8:	0080      	lsleq	r0, r0, #2
 8005eba:	3302      	addeq	r3, #2
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db05      	blt.n	8005ecc <__hi0bits+0x38>
 8005ec0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ec4:	f103 0301 	add.w	r3, r3, #1
 8005ec8:	bf08      	it	eq
 8005eca:	2320      	moveq	r3, #32
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4770      	bx	lr
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e7e4      	b.n	8005e9e <__hi0bits+0xa>

08005ed4 <__lo0bits>:
 8005ed4:	6803      	ldr	r3, [r0, #0]
 8005ed6:	f013 0207 	ands.w	r2, r3, #7
 8005eda:	4601      	mov	r1, r0
 8005edc:	d00b      	beq.n	8005ef6 <__lo0bits+0x22>
 8005ede:	07da      	lsls	r2, r3, #31
 8005ee0:	d424      	bmi.n	8005f2c <__lo0bits+0x58>
 8005ee2:	0798      	lsls	r0, r3, #30
 8005ee4:	bf49      	itett	mi
 8005ee6:	085b      	lsrmi	r3, r3, #1
 8005ee8:	089b      	lsrpl	r3, r3, #2
 8005eea:	2001      	movmi	r0, #1
 8005eec:	600b      	strmi	r3, [r1, #0]
 8005eee:	bf5c      	itt	pl
 8005ef0:	600b      	strpl	r3, [r1, #0]
 8005ef2:	2002      	movpl	r0, #2
 8005ef4:	4770      	bx	lr
 8005ef6:	b298      	uxth	r0, r3
 8005ef8:	b9b0      	cbnz	r0, 8005f28 <__lo0bits+0x54>
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	2010      	movs	r0, #16
 8005efe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f02:	bf04      	itt	eq
 8005f04:	0a1b      	lsreq	r3, r3, #8
 8005f06:	3008      	addeq	r0, #8
 8005f08:	071a      	lsls	r2, r3, #28
 8005f0a:	bf04      	itt	eq
 8005f0c:	091b      	lsreq	r3, r3, #4
 8005f0e:	3004      	addeq	r0, #4
 8005f10:	079a      	lsls	r2, r3, #30
 8005f12:	bf04      	itt	eq
 8005f14:	089b      	lsreq	r3, r3, #2
 8005f16:	3002      	addeq	r0, #2
 8005f18:	07da      	lsls	r2, r3, #31
 8005f1a:	d403      	bmi.n	8005f24 <__lo0bits+0x50>
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f100 0001 	add.w	r0, r0, #1
 8005f22:	d005      	beq.n	8005f30 <__lo0bits+0x5c>
 8005f24:	600b      	str	r3, [r1, #0]
 8005f26:	4770      	bx	lr
 8005f28:	4610      	mov	r0, r2
 8005f2a:	e7e8      	b.n	8005efe <__lo0bits+0x2a>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	4770      	bx	lr
 8005f30:	2020      	movs	r0, #32
 8005f32:	4770      	bx	lr

08005f34 <__i2b>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	460c      	mov	r4, r1
 8005f38:	2101      	movs	r1, #1
 8005f3a:	f7ff feff 	bl	8005d3c <_Balloc>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	b928      	cbnz	r0, 8005f4e <__i2b+0x1a>
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <__i2b+0x24>)
 8005f44:	4805      	ldr	r0, [pc, #20]	; (8005f5c <__i2b+0x28>)
 8005f46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f4a:	f000 fb3f 	bl	80065cc <__assert_func>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	6144      	str	r4, [r0, #20]
 8005f52:	6103      	str	r3, [r0, #16]
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	bf00      	nop
 8005f58:	080072eb 	.word	0x080072eb
 8005f5c:	080072fc 	.word	0x080072fc

08005f60 <__multiply>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	4614      	mov	r4, r2
 8005f66:	690a      	ldr	r2, [r1, #16]
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bfb8      	it	lt
 8005f6e:	460b      	movlt	r3, r1
 8005f70:	460d      	mov	r5, r1
 8005f72:	bfbc      	itt	lt
 8005f74:	4625      	movlt	r5, r4
 8005f76:	461c      	movlt	r4, r3
 8005f78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f80:	68ab      	ldr	r3, [r5, #8]
 8005f82:	6869      	ldr	r1, [r5, #4]
 8005f84:	eb0a 0709 	add.w	r7, sl, r9
 8005f88:	42bb      	cmp	r3, r7
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	bfb8      	it	lt
 8005f8e:	3101      	addlt	r1, #1
 8005f90:	f7ff fed4 	bl	8005d3c <_Balloc>
 8005f94:	b930      	cbnz	r0, 8005fa4 <__multiply+0x44>
 8005f96:	4602      	mov	r2, r0
 8005f98:	4b42      	ldr	r3, [pc, #264]	; (80060a4 <__multiply+0x144>)
 8005f9a:	4843      	ldr	r0, [pc, #268]	; (80060a8 <__multiply+0x148>)
 8005f9c:	f240 115d 	movw	r1, #349	; 0x15d
 8005fa0:	f000 fb14 	bl	80065cc <__assert_func>
 8005fa4:	f100 0614 	add.w	r6, r0, #20
 8005fa8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005fac:	4633      	mov	r3, r6
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4543      	cmp	r3, r8
 8005fb2:	d31e      	bcc.n	8005ff2 <__multiply+0x92>
 8005fb4:	f105 0c14 	add.w	ip, r5, #20
 8005fb8:	f104 0314 	add.w	r3, r4, #20
 8005fbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005fc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005fc4:	9202      	str	r2, [sp, #8]
 8005fc6:	ebac 0205 	sub.w	r2, ip, r5
 8005fca:	3a15      	subs	r2, #21
 8005fcc:	f022 0203 	bic.w	r2, r2, #3
 8005fd0:	3204      	adds	r2, #4
 8005fd2:	f105 0115 	add.w	r1, r5, #21
 8005fd6:	458c      	cmp	ip, r1
 8005fd8:	bf38      	it	cc
 8005fda:	2204      	movcc	r2, #4
 8005fdc:	9201      	str	r2, [sp, #4]
 8005fde:	9a02      	ldr	r2, [sp, #8]
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d808      	bhi.n	8005ff8 <__multiply+0x98>
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	dc55      	bgt.n	8006096 <__multiply+0x136>
 8005fea:	6107      	str	r7, [r0, #16]
 8005fec:	b005      	add	sp, #20
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	f843 2b04 	str.w	r2, [r3], #4
 8005ff6:	e7db      	b.n	8005fb0 <__multiply+0x50>
 8005ff8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	d020      	beq.n	8006044 <__multiply+0xe4>
 8006002:	f105 0e14 	add.w	lr, r5, #20
 8006006:	46b1      	mov	r9, r6
 8006008:	2200      	movs	r2, #0
 800600a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800600e:	f8d9 b000 	ldr.w	fp, [r9]
 8006012:	b2a1      	uxth	r1, r4
 8006014:	fa1f fb8b 	uxth.w	fp, fp
 8006018:	fb0a b101 	mla	r1, sl, r1, fp
 800601c:	4411      	add	r1, r2
 800601e:	f8d9 2000 	ldr.w	r2, [r9]
 8006022:	0c24      	lsrs	r4, r4, #16
 8006024:	0c12      	lsrs	r2, r2, #16
 8006026:	fb0a 2404 	mla	r4, sl, r4, r2
 800602a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800602e:	b289      	uxth	r1, r1
 8006030:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006034:	45f4      	cmp	ip, lr
 8006036:	f849 1b04 	str.w	r1, [r9], #4
 800603a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800603e:	d8e4      	bhi.n	800600a <__multiply+0xaa>
 8006040:	9901      	ldr	r1, [sp, #4]
 8006042:	5072      	str	r2, [r6, r1]
 8006044:	9a03      	ldr	r2, [sp, #12]
 8006046:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800604a:	3304      	adds	r3, #4
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	d01f      	beq.n	8006092 <__multiply+0x132>
 8006052:	6834      	ldr	r4, [r6, #0]
 8006054:	f105 0114 	add.w	r1, r5, #20
 8006058:	46b6      	mov	lr, r6
 800605a:	f04f 0a00 	mov.w	sl, #0
 800605e:	880a      	ldrh	r2, [r1, #0]
 8006060:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006064:	fb09 b202 	mla	r2, r9, r2, fp
 8006068:	4492      	add	sl, r2
 800606a:	b2a4      	uxth	r4, r4
 800606c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006070:	f84e 4b04 	str.w	r4, [lr], #4
 8006074:	f851 4b04 	ldr.w	r4, [r1], #4
 8006078:	f8be 2000 	ldrh.w	r2, [lr]
 800607c:	0c24      	lsrs	r4, r4, #16
 800607e:	fb09 2404 	mla	r4, r9, r4, r2
 8006082:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006086:	458c      	cmp	ip, r1
 8006088:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800608c:	d8e7      	bhi.n	800605e <__multiply+0xfe>
 800608e:	9a01      	ldr	r2, [sp, #4]
 8006090:	50b4      	str	r4, [r6, r2]
 8006092:	3604      	adds	r6, #4
 8006094:	e7a3      	b.n	8005fde <__multiply+0x7e>
 8006096:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1a5      	bne.n	8005fea <__multiply+0x8a>
 800609e:	3f01      	subs	r7, #1
 80060a0:	e7a1      	b.n	8005fe6 <__multiply+0x86>
 80060a2:	bf00      	nop
 80060a4:	080072eb 	.word	0x080072eb
 80060a8:	080072fc 	.word	0x080072fc

080060ac <__pow5mult>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4615      	mov	r5, r2
 80060b2:	f012 0203 	ands.w	r2, r2, #3
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	d007      	beq.n	80060cc <__pow5mult+0x20>
 80060bc:	4c25      	ldr	r4, [pc, #148]	; (8006154 <__pow5mult+0xa8>)
 80060be:	3a01      	subs	r2, #1
 80060c0:	2300      	movs	r3, #0
 80060c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060c6:	f7ff fe9b 	bl	8005e00 <__multadd>
 80060ca:	4607      	mov	r7, r0
 80060cc:	10ad      	asrs	r5, r5, #2
 80060ce:	d03d      	beq.n	800614c <__pow5mult+0xa0>
 80060d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060d2:	b97c      	cbnz	r4, 80060f4 <__pow5mult+0x48>
 80060d4:	2010      	movs	r0, #16
 80060d6:	f7ff fe1b 	bl	8005d10 <malloc>
 80060da:	4602      	mov	r2, r0
 80060dc:	6270      	str	r0, [r6, #36]	; 0x24
 80060de:	b928      	cbnz	r0, 80060ec <__pow5mult+0x40>
 80060e0:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <__pow5mult+0xac>)
 80060e2:	481e      	ldr	r0, [pc, #120]	; (800615c <__pow5mult+0xb0>)
 80060e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060e8:	f000 fa70 	bl	80065cc <__assert_func>
 80060ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060f0:	6004      	str	r4, [r0, #0]
 80060f2:	60c4      	str	r4, [r0, #12]
 80060f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060fc:	b94c      	cbnz	r4, 8006112 <__pow5mult+0x66>
 80060fe:	f240 2171 	movw	r1, #625	; 0x271
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ff16 	bl	8005f34 <__i2b>
 8006108:	2300      	movs	r3, #0
 800610a:	f8c8 0008 	str.w	r0, [r8, #8]
 800610e:	4604      	mov	r4, r0
 8006110:	6003      	str	r3, [r0, #0]
 8006112:	f04f 0900 	mov.w	r9, #0
 8006116:	07eb      	lsls	r3, r5, #31
 8006118:	d50a      	bpl.n	8006130 <__pow5mult+0x84>
 800611a:	4639      	mov	r1, r7
 800611c:	4622      	mov	r2, r4
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff ff1e 	bl	8005f60 <__multiply>
 8006124:	4639      	mov	r1, r7
 8006126:	4680      	mov	r8, r0
 8006128:	4630      	mov	r0, r6
 800612a:	f7ff fe47 	bl	8005dbc <_Bfree>
 800612e:	4647      	mov	r7, r8
 8006130:	106d      	asrs	r5, r5, #1
 8006132:	d00b      	beq.n	800614c <__pow5mult+0xa0>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	b938      	cbnz	r0, 8006148 <__pow5mult+0x9c>
 8006138:	4622      	mov	r2, r4
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff ff0f 	bl	8005f60 <__multiply>
 8006142:	6020      	str	r0, [r4, #0]
 8006144:	f8c0 9000 	str.w	r9, [r0]
 8006148:	4604      	mov	r4, r0
 800614a:	e7e4      	b.n	8006116 <__pow5mult+0x6a>
 800614c:	4638      	mov	r0, r7
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006152:	bf00      	nop
 8006154:	08007450 	.word	0x08007450
 8006158:	08007275 	.word	0x08007275
 800615c:	080072fc 	.word	0x080072fc

08006160 <__lshift>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	6849      	ldr	r1, [r1, #4]
 8006168:	6923      	ldr	r3, [r4, #16]
 800616a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	4607      	mov	r7, r0
 8006172:	4691      	mov	r9, r2
 8006174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006178:	f108 0601 	add.w	r6, r8, #1
 800617c:	42b3      	cmp	r3, r6
 800617e:	db0b      	blt.n	8006198 <__lshift+0x38>
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff fddb 	bl	8005d3c <_Balloc>
 8006186:	4605      	mov	r5, r0
 8006188:	b948      	cbnz	r0, 800619e <__lshift+0x3e>
 800618a:	4602      	mov	r2, r0
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <__lshift+0xd0>)
 800618e:	4829      	ldr	r0, [pc, #164]	; (8006234 <__lshift+0xd4>)
 8006190:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006194:	f000 fa1a 	bl	80065cc <__assert_func>
 8006198:	3101      	adds	r1, #1
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	e7ee      	b.n	800617c <__lshift+0x1c>
 800619e:	2300      	movs	r3, #0
 80061a0:	f100 0114 	add.w	r1, r0, #20
 80061a4:	f100 0210 	add.w	r2, r0, #16
 80061a8:	4618      	mov	r0, r3
 80061aa:	4553      	cmp	r3, sl
 80061ac:	db33      	blt.n	8006216 <__lshift+0xb6>
 80061ae:	6920      	ldr	r0, [r4, #16]
 80061b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061b4:	f104 0314 	add.w	r3, r4, #20
 80061b8:	f019 091f 	ands.w	r9, r9, #31
 80061bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061c4:	d02b      	beq.n	800621e <__lshift+0xbe>
 80061c6:	f1c9 0e20 	rsb	lr, r9, #32
 80061ca:	468a      	mov	sl, r1
 80061cc:	2200      	movs	r2, #0
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	fa00 f009 	lsl.w	r0, r0, r9
 80061d4:	4302      	orrs	r2, r0
 80061d6:	f84a 2b04 	str.w	r2, [sl], #4
 80061da:	f853 2b04 	ldr.w	r2, [r3], #4
 80061de:	459c      	cmp	ip, r3
 80061e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80061e4:	d8f3      	bhi.n	80061ce <__lshift+0x6e>
 80061e6:	ebac 0304 	sub.w	r3, ip, r4
 80061ea:	3b15      	subs	r3, #21
 80061ec:	f023 0303 	bic.w	r3, r3, #3
 80061f0:	3304      	adds	r3, #4
 80061f2:	f104 0015 	add.w	r0, r4, #21
 80061f6:	4584      	cmp	ip, r0
 80061f8:	bf38      	it	cc
 80061fa:	2304      	movcc	r3, #4
 80061fc:	50ca      	str	r2, [r1, r3]
 80061fe:	b10a      	cbz	r2, 8006204 <__lshift+0xa4>
 8006200:	f108 0602 	add.w	r6, r8, #2
 8006204:	3e01      	subs	r6, #1
 8006206:	4638      	mov	r0, r7
 8006208:	612e      	str	r6, [r5, #16]
 800620a:	4621      	mov	r1, r4
 800620c:	f7ff fdd6 	bl	8005dbc <_Bfree>
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	f842 0f04 	str.w	r0, [r2, #4]!
 800621a:	3301      	adds	r3, #1
 800621c:	e7c5      	b.n	80061aa <__lshift+0x4a>
 800621e:	3904      	subs	r1, #4
 8006220:	f853 2b04 	ldr.w	r2, [r3], #4
 8006224:	f841 2f04 	str.w	r2, [r1, #4]!
 8006228:	459c      	cmp	ip, r3
 800622a:	d8f9      	bhi.n	8006220 <__lshift+0xc0>
 800622c:	e7ea      	b.n	8006204 <__lshift+0xa4>
 800622e:	bf00      	nop
 8006230:	080072eb 	.word	0x080072eb
 8006234:	080072fc 	.word	0x080072fc

08006238 <__mcmp>:
 8006238:	b530      	push	{r4, r5, lr}
 800623a:	6902      	ldr	r2, [r0, #16]
 800623c:	690c      	ldr	r4, [r1, #16]
 800623e:	1b12      	subs	r2, r2, r4
 8006240:	d10e      	bne.n	8006260 <__mcmp+0x28>
 8006242:	f100 0314 	add.w	r3, r0, #20
 8006246:	3114      	adds	r1, #20
 8006248:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800624c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006250:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006254:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006258:	42a5      	cmp	r5, r4
 800625a:	d003      	beq.n	8006264 <__mcmp+0x2c>
 800625c:	d305      	bcc.n	800626a <__mcmp+0x32>
 800625e:	2201      	movs	r2, #1
 8006260:	4610      	mov	r0, r2
 8006262:	bd30      	pop	{r4, r5, pc}
 8006264:	4283      	cmp	r3, r0
 8006266:	d3f3      	bcc.n	8006250 <__mcmp+0x18>
 8006268:	e7fa      	b.n	8006260 <__mcmp+0x28>
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	e7f7      	b.n	8006260 <__mcmp+0x28>

08006270 <__mdiff>:
 8006270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	460c      	mov	r4, r1
 8006276:	4606      	mov	r6, r0
 8006278:	4611      	mov	r1, r2
 800627a:	4620      	mov	r0, r4
 800627c:	4617      	mov	r7, r2
 800627e:	f7ff ffdb 	bl	8006238 <__mcmp>
 8006282:	1e05      	subs	r5, r0, #0
 8006284:	d110      	bne.n	80062a8 <__mdiff+0x38>
 8006286:	4629      	mov	r1, r5
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fd57 	bl	8005d3c <_Balloc>
 800628e:	b930      	cbnz	r0, 800629e <__mdiff+0x2e>
 8006290:	4b39      	ldr	r3, [pc, #228]	; (8006378 <__mdiff+0x108>)
 8006292:	4602      	mov	r2, r0
 8006294:	f240 2132 	movw	r1, #562	; 0x232
 8006298:	4838      	ldr	r0, [pc, #224]	; (800637c <__mdiff+0x10c>)
 800629a:	f000 f997 	bl	80065cc <__assert_func>
 800629e:	2301      	movs	r3, #1
 80062a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a8:	bfa4      	itt	ge
 80062aa:	463b      	movge	r3, r7
 80062ac:	4627      	movge	r7, r4
 80062ae:	4630      	mov	r0, r6
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	bfa6      	itte	ge
 80062b4:	461c      	movge	r4, r3
 80062b6:	2500      	movge	r5, #0
 80062b8:	2501      	movlt	r5, #1
 80062ba:	f7ff fd3f 	bl	8005d3c <_Balloc>
 80062be:	b920      	cbnz	r0, 80062ca <__mdiff+0x5a>
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <__mdiff+0x108>)
 80062c2:	4602      	mov	r2, r0
 80062c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062c8:	e7e6      	b.n	8006298 <__mdiff+0x28>
 80062ca:	693e      	ldr	r6, [r7, #16]
 80062cc:	60c5      	str	r5, [r0, #12]
 80062ce:	6925      	ldr	r5, [r4, #16]
 80062d0:	f107 0114 	add.w	r1, r7, #20
 80062d4:	f104 0914 	add.w	r9, r4, #20
 80062d8:	f100 0e14 	add.w	lr, r0, #20
 80062dc:	f107 0210 	add.w	r2, r7, #16
 80062e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80062e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80062e8:	46f2      	mov	sl, lr
 80062ea:	2700      	movs	r7, #0
 80062ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80062f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062f4:	fa1f f883 	uxth.w	r8, r3
 80062f8:	fa17 f78b 	uxtah	r7, r7, fp
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	eba7 0808 	sub.w	r8, r7, r8
 8006302:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006306:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800630a:	fa1f f888 	uxth.w	r8, r8
 800630e:	141f      	asrs	r7, r3, #16
 8006310:	454d      	cmp	r5, r9
 8006312:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006316:	f84a 3b04 	str.w	r3, [sl], #4
 800631a:	d8e7      	bhi.n	80062ec <__mdiff+0x7c>
 800631c:	1b2b      	subs	r3, r5, r4
 800631e:	3b15      	subs	r3, #21
 8006320:	f023 0303 	bic.w	r3, r3, #3
 8006324:	3304      	adds	r3, #4
 8006326:	3415      	adds	r4, #21
 8006328:	42a5      	cmp	r5, r4
 800632a:	bf38      	it	cc
 800632c:	2304      	movcc	r3, #4
 800632e:	4419      	add	r1, r3
 8006330:	4473      	add	r3, lr
 8006332:	469e      	mov	lr, r3
 8006334:	460d      	mov	r5, r1
 8006336:	4565      	cmp	r5, ip
 8006338:	d30e      	bcc.n	8006358 <__mdiff+0xe8>
 800633a:	f10c 0203 	add.w	r2, ip, #3
 800633e:	1a52      	subs	r2, r2, r1
 8006340:	f022 0203 	bic.w	r2, r2, #3
 8006344:	3903      	subs	r1, #3
 8006346:	458c      	cmp	ip, r1
 8006348:	bf38      	it	cc
 800634a:	2200      	movcc	r2, #0
 800634c:	441a      	add	r2, r3
 800634e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006352:	b17b      	cbz	r3, 8006374 <__mdiff+0x104>
 8006354:	6106      	str	r6, [r0, #16]
 8006356:	e7a5      	b.n	80062a4 <__mdiff+0x34>
 8006358:	f855 8b04 	ldr.w	r8, [r5], #4
 800635c:	fa17 f488 	uxtah	r4, r7, r8
 8006360:	1422      	asrs	r2, r4, #16
 8006362:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006366:	b2a4      	uxth	r4, r4
 8006368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800636c:	f84e 4b04 	str.w	r4, [lr], #4
 8006370:	1417      	asrs	r7, r2, #16
 8006372:	e7e0      	b.n	8006336 <__mdiff+0xc6>
 8006374:	3e01      	subs	r6, #1
 8006376:	e7ea      	b.n	800634e <__mdiff+0xde>
 8006378:	080072eb 	.word	0x080072eb
 800637c:	080072fc 	.word	0x080072fc

08006380 <__d2b>:
 8006380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006384:	4689      	mov	r9, r1
 8006386:	2101      	movs	r1, #1
 8006388:	ec57 6b10 	vmov	r6, r7, d0
 800638c:	4690      	mov	r8, r2
 800638e:	f7ff fcd5 	bl	8005d3c <_Balloc>
 8006392:	4604      	mov	r4, r0
 8006394:	b930      	cbnz	r0, 80063a4 <__d2b+0x24>
 8006396:	4602      	mov	r2, r0
 8006398:	4b25      	ldr	r3, [pc, #148]	; (8006430 <__d2b+0xb0>)
 800639a:	4826      	ldr	r0, [pc, #152]	; (8006434 <__d2b+0xb4>)
 800639c:	f240 310a 	movw	r1, #778	; 0x30a
 80063a0:	f000 f914 	bl	80065cc <__assert_func>
 80063a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063ac:	bb35      	cbnz	r5, 80063fc <__d2b+0x7c>
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	d028      	beq.n	8006406 <__d2b+0x86>
 80063b4:	4668      	mov	r0, sp
 80063b6:	9600      	str	r6, [sp, #0]
 80063b8:	f7ff fd8c 	bl	8005ed4 <__lo0bits>
 80063bc:	9900      	ldr	r1, [sp, #0]
 80063be:	b300      	cbz	r0, 8006402 <__d2b+0x82>
 80063c0:	9a01      	ldr	r2, [sp, #4]
 80063c2:	f1c0 0320 	rsb	r3, r0, #32
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	430b      	orrs	r3, r1
 80063cc:	40c2      	lsrs	r2, r0
 80063ce:	6163      	str	r3, [r4, #20]
 80063d0:	9201      	str	r2, [sp, #4]
 80063d2:	9b01      	ldr	r3, [sp, #4]
 80063d4:	61a3      	str	r3, [r4, #24]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bf14      	ite	ne
 80063da:	2202      	movne	r2, #2
 80063dc:	2201      	moveq	r2, #1
 80063de:	6122      	str	r2, [r4, #16]
 80063e0:	b1d5      	cbz	r5, 8006418 <__d2b+0x98>
 80063e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063e6:	4405      	add	r5, r0
 80063e8:	f8c9 5000 	str.w	r5, [r9]
 80063ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063f0:	f8c8 0000 	str.w	r0, [r8]
 80063f4:	4620      	mov	r0, r4
 80063f6:	b003      	add	sp, #12
 80063f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006400:	e7d5      	b.n	80063ae <__d2b+0x2e>
 8006402:	6161      	str	r1, [r4, #20]
 8006404:	e7e5      	b.n	80063d2 <__d2b+0x52>
 8006406:	a801      	add	r0, sp, #4
 8006408:	f7ff fd64 	bl	8005ed4 <__lo0bits>
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	6163      	str	r3, [r4, #20]
 8006410:	2201      	movs	r2, #1
 8006412:	6122      	str	r2, [r4, #16]
 8006414:	3020      	adds	r0, #32
 8006416:	e7e3      	b.n	80063e0 <__d2b+0x60>
 8006418:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800641c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006420:	f8c9 0000 	str.w	r0, [r9]
 8006424:	6918      	ldr	r0, [r3, #16]
 8006426:	f7ff fd35 	bl	8005e94 <__hi0bits>
 800642a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800642e:	e7df      	b.n	80063f0 <__d2b+0x70>
 8006430:	080072eb 	.word	0x080072eb
 8006434:	080072fc 	.word	0x080072fc

08006438 <_calloc_r>:
 8006438:	b513      	push	{r0, r1, r4, lr}
 800643a:	434a      	muls	r2, r1
 800643c:	4611      	mov	r1, r2
 800643e:	9201      	str	r2, [sp, #4]
 8006440:	f000 f85a 	bl	80064f8 <_malloc_r>
 8006444:	4604      	mov	r4, r0
 8006446:	b118      	cbz	r0, 8006450 <_calloc_r+0x18>
 8006448:	9a01      	ldr	r2, [sp, #4]
 800644a:	2100      	movs	r1, #0
 800644c:	f7fe f972 	bl	8004734 <memset>
 8006450:	4620      	mov	r0, r4
 8006452:	b002      	add	sp, #8
 8006454:	bd10      	pop	{r4, pc}
	...

08006458 <_free_r>:
 8006458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800645a:	2900      	cmp	r1, #0
 800645c:	d048      	beq.n	80064f0 <_free_r+0x98>
 800645e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006462:	9001      	str	r0, [sp, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f1a1 0404 	sub.w	r4, r1, #4
 800646a:	bfb8      	it	lt
 800646c:	18e4      	addlt	r4, r4, r3
 800646e:	f000 f8ef 	bl	8006650 <__malloc_lock>
 8006472:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <_free_r+0x9c>)
 8006474:	9801      	ldr	r0, [sp, #4]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	4615      	mov	r5, r2
 800647a:	b933      	cbnz	r3, 800648a <_free_r+0x32>
 800647c:	6063      	str	r3, [r4, #4]
 800647e:	6014      	str	r4, [r2, #0]
 8006480:	b003      	add	sp, #12
 8006482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006486:	f000 b8e9 	b.w	800665c <__malloc_unlock>
 800648a:	42a3      	cmp	r3, r4
 800648c:	d90b      	bls.n	80064a6 <_free_r+0x4e>
 800648e:	6821      	ldr	r1, [r4, #0]
 8006490:	1862      	adds	r2, r4, r1
 8006492:	4293      	cmp	r3, r2
 8006494:	bf04      	itt	eq
 8006496:	681a      	ldreq	r2, [r3, #0]
 8006498:	685b      	ldreq	r3, [r3, #4]
 800649a:	6063      	str	r3, [r4, #4]
 800649c:	bf04      	itt	eq
 800649e:	1852      	addeq	r2, r2, r1
 80064a0:	6022      	streq	r2, [r4, #0]
 80064a2:	602c      	str	r4, [r5, #0]
 80064a4:	e7ec      	b.n	8006480 <_free_r+0x28>
 80064a6:	461a      	mov	r2, r3
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	b10b      	cbz	r3, 80064b0 <_free_r+0x58>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d9fa      	bls.n	80064a6 <_free_r+0x4e>
 80064b0:	6811      	ldr	r1, [r2, #0]
 80064b2:	1855      	adds	r5, r2, r1
 80064b4:	42a5      	cmp	r5, r4
 80064b6:	d10b      	bne.n	80064d0 <_free_r+0x78>
 80064b8:	6824      	ldr	r4, [r4, #0]
 80064ba:	4421      	add	r1, r4
 80064bc:	1854      	adds	r4, r2, r1
 80064be:	42a3      	cmp	r3, r4
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	d1dd      	bne.n	8006480 <_free_r+0x28>
 80064c4:	681c      	ldr	r4, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	6053      	str	r3, [r2, #4]
 80064ca:	4421      	add	r1, r4
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	e7d7      	b.n	8006480 <_free_r+0x28>
 80064d0:	d902      	bls.n	80064d8 <_free_r+0x80>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6003      	str	r3, [r0, #0]
 80064d6:	e7d3      	b.n	8006480 <_free_r+0x28>
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1961      	adds	r1, r4, r5
 80064dc:	428b      	cmp	r3, r1
 80064de:	bf04      	itt	eq
 80064e0:	6819      	ldreq	r1, [r3, #0]
 80064e2:	685b      	ldreq	r3, [r3, #4]
 80064e4:	6063      	str	r3, [r4, #4]
 80064e6:	bf04      	itt	eq
 80064e8:	1949      	addeq	r1, r1, r5
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	6054      	str	r4, [r2, #4]
 80064ee:	e7c7      	b.n	8006480 <_free_r+0x28>
 80064f0:	b003      	add	sp, #12
 80064f2:	bd30      	pop	{r4, r5, pc}
 80064f4:	200001fc 	.word	0x200001fc

080064f8 <_malloc_r>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	1ccd      	adds	r5, r1, #3
 80064fc:	f025 0503 	bic.w	r5, r5, #3
 8006500:	3508      	adds	r5, #8
 8006502:	2d0c      	cmp	r5, #12
 8006504:	bf38      	it	cc
 8006506:	250c      	movcc	r5, #12
 8006508:	2d00      	cmp	r5, #0
 800650a:	4606      	mov	r6, r0
 800650c:	db01      	blt.n	8006512 <_malloc_r+0x1a>
 800650e:	42a9      	cmp	r1, r5
 8006510:	d903      	bls.n	800651a <_malloc_r+0x22>
 8006512:	230c      	movs	r3, #12
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	2000      	movs	r0, #0
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651a:	f000 f899 	bl	8006650 <__malloc_lock>
 800651e:	4921      	ldr	r1, [pc, #132]	; (80065a4 <_malloc_r+0xac>)
 8006520:	680a      	ldr	r2, [r1, #0]
 8006522:	4614      	mov	r4, r2
 8006524:	b99c      	cbnz	r4, 800654e <_malloc_r+0x56>
 8006526:	4f20      	ldr	r7, [pc, #128]	; (80065a8 <_malloc_r+0xb0>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	b923      	cbnz	r3, 8006536 <_malloc_r+0x3e>
 800652c:	4621      	mov	r1, r4
 800652e:	4630      	mov	r0, r6
 8006530:	f000 f83c 	bl	80065ac <_sbrk_r>
 8006534:	6038      	str	r0, [r7, #0]
 8006536:	4629      	mov	r1, r5
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f837 	bl	80065ac <_sbrk_r>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d123      	bne.n	800658a <_malloc_r+0x92>
 8006542:	230c      	movs	r3, #12
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f888 	bl	800665c <__malloc_unlock>
 800654c:	e7e3      	b.n	8006516 <_malloc_r+0x1e>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1b5b      	subs	r3, r3, r5
 8006552:	d417      	bmi.n	8006584 <_malloc_r+0x8c>
 8006554:	2b0b      	cmp	r3, #11
 8006556:	d903      	bls.n	8006560 <_malloc_r+0x68>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	441c      	add	r4, r3
 800655c:	6025      	str	r5, [r4, #0]
 800655e:	e004      	b.n	800656a <_malloc_r+0x72>
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	42a2      	cmp	r2, r4
 8006564:	bf0c      	ite	eq
 8006566:	600b      	streq	r3, [r1, #0]
 8006568:	6053      	strne	r3, [r2, #4]
 800656a:	4630      	mov	r0, r6
 800656c:	f000 f876 	bl	800665c <__malloc_unlock>
 8006570:	f104 000b 	add.w	r0, r4, #11
 8006574:	1d23      	adds	r3, r4, #4
 8006576:	f020 0007 	bic.w	r0, r0, #7
 800657a:	1ac2      	subs	r2, r0, r3
 800657c:	d0cc      	beq.n	8006518 <_malloc_r+0x20>
 800657e:	1a1b      	subs	r3, r3, r0
 8006580:	50a3      	str	r3, [r4, r2]
 8006582:	e7c9      	b.n	8006518 <_malloc_r+0x20>
 8006584:	4622      	mov	r2, r4
 8006586:	6864      	ldr	r4, [r4, #4]
 8006588:	e7cc      	b.n	8006524 <_malloc_r+0x2c>
 800658a:	1cc4      	adds	r4, r0, #3
 800658c:	f024 0403 	bic.w	r4, r4, #3
 8006590:	42a0      	cmp	r0, r4
 8006592:	d0e3      	beq.n	800655c <_malloc_r+0x64>
 8006594:	1a21      	subs	r1, r4, r0
 8006596:	4630      	mov	r0, r6
 8006598:	f000 f808 	bl	80065ac <_sbrk_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d1dd      	bne.n	800655c <_malloc_r+0x64>
 80065a0:	e7cf      	b.n	8006542 <_malloc_r+0x4a>
 80065a2:	bf00      	nop
 80065a4:	200001fc 	.word	0x200001fc
 80065a8:	20000200 	.word	0x20000200

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	; (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb f910 	bl	80017dc <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000318 	.word	0x20000318

080065cc <__assert_func>:
 80065cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065ce:	4614      	mov	r4, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <__assert_func+0x2c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4605      	mov	r5, r0
 80065d8:	68d8      	ldr	r0, [r3, #12]
 80065da:	b14c      	cbz	r4, 80065f0 <__assert_func+0x24>
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <__assert_func+0x30>)
 80065de:	9100      	str	r1, [sp, #0]
 80065e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065e4:	4906      	ldr	r1, [pc, #24]	; (8006600 <__assert_func+0x34>)
 80065e6:	462b      	mov	r3, r5
 80065e8:	f000 f80e 	bl	8006608 <fiprintf>
 80065ec:	f000 fa64 	bl	8006ab8 <abort>
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <__assert_func+0x38>)
 80065f2:	461c      	mov	r4, r3
 80065f4:	e7f3      	b.n	80065de <__assert_func+0x12>
 80065f6:	bf00      	nop
 80065f8:	2000000c 	.word	0x2000000c
 80065fc:	0800745c 	.word	0x0800745c
 8006600:	08007469 	.word	0x08007469
 8006604:	08007497 	.word	0x08007497

08006608 <fiprintf>:
 8006608:	b40e      	push	{r1, r2, r3}
 800660a:	b503      	push	{r0, r1, lr}
 800660c:	4601      	mov	r1, r0
 800660e:	ab03      	add	r3, sp, #12
 8006610:	4805      	ldr	r0, [pc, #20]	; (8006628 <fiprintf+0x20>)
 8006612:	f853 2b04 	ldr.w	r2, [r3], #4
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	f000 f84f 	bl	80066bc <_vfiprintf_r>
 800661e:	b002      	add	sp, #8
 8006620:	f85d eb04 	ldr.w	lr, [sp], #4
 8006624:	b003      	add	sp, #12
 8006626:	4770      	bx	lr
 8006628:	2000000c 	.word	0x2000000c

0800662c <__ascii_mbtowc>:
 800662c:	b082      	sub	sp, #8
 800662e:	b901      	cbnz	r1, 8006632 <__ascii_mbtowc+0x6>
 8006630:	a901      	add	r1, sp, #4
 8006632:	b142      	cbz	r2, 8006646 <__ascii_mbtowc+0x1a>
 8006634:	b14b      	cbz	r3, 800664a <__ascii_mbtowc+0x1e>
 8006636:	7813      	ldrb	r3, [r2, #0]
 8006638:	600b      	str	r3, [r1, #0]
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	1e10      	subs	r0, r2, #0
 800663e:	bf18      	it	ne
 8006640:	2001      	movne	r0, #1
 8006642:	b002      	add	sp, #8
 8006644:	4770      	bx	lr
 8006646:	4610      	mov	r0, r2
 8006648:	e7fb      	b.n	8006642 <__ascii_mbtowc+0x16>
 800664a:	f06f 0001 	mvn.w	r0, #1
 800664e:	e7f8      	b.n	8006642 <__ascii_mbtowc+0x16>

08006650 <__malloc_lock>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__malloc_lock+0x8>)
 8006652:	f000 bbf1 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006656:	bf00      	nop
 8006658:	20000320 	.word	0x20000320

0800665c <__malloc_unlock>:
 800665c:	4801      	ldr	r0, [pc, #4]	; (8006664 <__malloc_unlock+0x8>)
 800665e:	f000 bbec 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006662:	bf00      	nop
 8006664:	20000320 	.word	0x20000320

08006668 <__sfputc_r>:
 8006668:	6893      	ldr	r3, [r2, #8]
 800666a:	3b01      	subs	r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	b410      	push	{r4}
 8006670:	6093      	str	r3, [r2, #8]
 8006672:	da08      	bge.n	8006686 <__sfputc_r+0x1e>
 8006674:	6994      	ldr	r4, [r2, #24]
 8006676:	42a3      	cmp	r3, r4
 8006678:	db01      	blt.n	800667e <__sfputc_r+0x16>
 800667a:	290a      	cmp	r1, #10
 800667c:	d103      	bne.n	8006686 <__sfputc_r+0x1e>
 800667e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006682:	f000 b94b 	b.w	800691c <__swbuf_r>
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	1c58      	adds	r0, r3, #1
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	7019      	strb	r1, [r3, #0]
 800668e:	4608      	mov	r0, r1
 8006690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006694:	4770      	bx	lr

08006696 <__sfputs_r>:
 8006696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006698:	4606      	mov	r6, r0
 800669a:	460f      	mov	r7, r1
 800669c:	4614      	mov	r4, r2
 800669e:	18d5      	adds	r5, r2, r3
 80066a0:	42ac      	cmp	r4, r5
 80066a2:	d101      	bne.n	80066a8 <__sfputs_r+0x12>
 80066a4:	2000      	movs	r0, #0
 80066a6:	e007      	b.n	80066b8 <__sfputs_r+0x22>
 80066a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ac:	463a      	mov	r2, r7
 80066ae:	4630      	mov	r0, r6
 80066b0:	f7ff ffda 	bl	8006668 <__sfputc_r>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d1f3      	bne.n	80066a0 <__sfputs_r+0xa>
 80066b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066bc <_vfiprintf_r>:
 80066bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	460d      	mov	r5, r1
 80066c2:	b09d      	sub	sp, #116	; 0x74
 80066c4:	4614      	mov	r4, r2
 80066c6:	4698      	mov	r8, r3
 80066c8:	4606      	mov	r6, r0
 80066ca:	b118      	cbz	r0, 80066d4 <_vfiprintf_r+0x18>
 80066cc:	6983      	ldr	r3, [r0, #24]
 80066ce:	b90b      	cbnz	r3, 80066d4 <_vfiprintf_r+0x18>
 80066d0:	f000 fb14 	bl	8006cfc <__sinit>
 80066d4:	4b89      	ldr	r3, [pc, #548]	; (80068fc <_vfiprintf_r+0x240>)
 80066d6:	429d      	cmp	r5, r3
 80066d8:	d11b      	bne.n	8006712 <_vfiprintf_r+0x56>
 80066da:	6875      	ldr	r5, [r6, #4]
 80066dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066de:	07d9      	lsls	r1, r3, #31
 80066e0:	d405      	bmi.n	80066ee <_vfiprintf_r+0x32>
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	059a      	lsls	r2, r3, #22
 80066e6:	d402      	bmi.n	80066ee <_vfiprintf_r+0x32>
 80066e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ea:	f000 fba5 	bl	8006e38 <__retarget_lock_acquire_recursive>
 80066ee:	89ab      	ldrh	r3, [r5, #12]
 80066f0:	071b      	lsls	r3, r3, #28
 80066f2:	d501      	bpl.n	80066f8 <_vfiprintf_r+0x3c>
 80066f4:	692b      	ldr	r3, [r5, #16]
 80066f6:	b9eb      	cbnz	r3, 8006734 <_vfiprintf_r+0x78>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4630      	mov	r0, r6
 80066fc:	f000 f96e 	bl	80069dc <__swsetup_r>
 8006700:	b1c0      	cbz	r0, 8006734 <_vfiprintf_r+0x78>
 8006702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006704:	07dc      	lsls	r4, r3, #31
 8006706:	d50e      	bpl.n	8006726 <_vfiprintf_r+0x6a>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	b01d      	add	sp, #116	; 0x74
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	4b7b      	ldr	r3, [pc, #492]	; (8006900 <_vfiprintf_r+0x244>)
 8006714:	429d      	cmp	r5, r3
 8006716:	d101      	bne.n	800671c <_vfiprintf_r+0x60>
 8006718:	68b5      	ldr	r5, [r6, #8]
 800671a:	e7df      	b.n	80066dc <_vfiprintf_r+0x20>
 800671c:	4b79      	ldr	r3, [pc, #484]	; (8006904 <_vfiprintf_r+0x248>)
 800671e:	429d      	cmp	r5, r3
 8006720:	bf08      	it	eq
 8006722:	68f5      	ldreq	r5, [r6, #12]
 8006724:	e7da      	b.n	80066dc <_vfiprintf_r+0x20>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	0598      	lsls	r0, r3, #22
 800672a:	d4ed      	bmi.n	8006708 <_vfiprintf_r+0x4c>
 800672c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800672e:	f000 fb84 	bl	8006e3a <__retarget_lock_release_recursive>
 8006732:	e7e9      	b.n	8006708 <_vfiprintf_r+0x4c>
 8006734:	2300      	movs	r3, #0
 8006736:	9309      	str	r3, [sp, #36]	; 0x24
 8006738:	2320      	movs	r3, #32
 800673a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800673e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006742:	2330      	movs	r3, #48	; 0x30
 8006744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006908 <_vfiprintf_r+0x24c>
 8006748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800674c:	f04f 0901 	mov.w	r9, #1
 8006750:	4623      	mov	r3, r4
 8006752:	469a      	mov	sl, r3
 8006754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006758:	b10a      	cbz	r2, 800675e <_vfiprintf_r+0xa2>
 800675a:	2a25      	cmp	r2, #37	; 0x25
 800675c:	d1f9      	bne.n	8006752 <_vfiprintf_r+0x96>
 800675e:	ebba 0b04 	subs.w	fp, sl, r4
 8006762:	d00b      	beq.n	800677c <_vfiprintf_r+0xc0>
 8006764:	465b      	mov	r3, fp
 8006766:	4622      	mov	r2, r4
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff ff93 	bl	8006696 <__sfputs_r>
 8006770:	3001      	adds	r0, #1
 8006772:	f000 80aa 	beq.w	80068ca <_vfiprintf_r+0x20e>
 8006776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006778:	445a      	add	r2, fp
 800677a:	9209      	str	r2, [sp, #36]	; 0x24
 800677c:	f89a 3000 	ldrb.w	r3, [sl]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 80a2 	beq.w	80068ca <_vfiprintf_r+0x20e>
 8006786:	2300      	movs	r3, #0
 8006788:	f04f 32ff 	mov.w	r2, #4294967295
 800678c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006790:	f10a 0a01 	add.w	sl, sl, #1
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800679c:	931a      	str	r3, [sp, #104]	; 0x68
 800679e:	4654      	mov	r4, sl
 80067a0:	2205      	movs	r2, #5
 80067a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067a6:	4858      	ldr	r0, [pc, #352]	; (8006908 <_vfiprintf_r+0x24c>)
 80067a8:	f7f9 fd1a 	bl	80001e0 <memchr>
 80067ac:	9a04      	ldr	r2, [sp, #16]
 80067ae:	b9d8      	cbnz	r0, 80067e8 <_vfiprintf_r+0x12c>
 80067b0:	06d1      	lsls	r1, r2, #27
 80067b2:	bf44      	itt	mi
 80067b4:	2320      	movmi	r3, #32
 80067b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ba:	0713      	lsls	r3, r2, #28
 80067bc:	bf44      	itt	mi
 80067be:	232b      	movmi	r3, #43	; 0x2b
 80067c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c4:	f89a 3000 	ldrb.w	r3, [sl]
 80067c8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ca:	d015      	beq.n	80067f8 <_vfiprintf_r+0x13c>
 80067cc:	9a07      	ldr	r2, [sp, #28]
 80067ce:	4654      	mov	r4, sl
 80067d0:	2000      	movs	r0, #0
 80067d2:	f04f 0c0a 	mov.w	ip, #10
 80067d6:	4621      	mov	r1, r4
 80067d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067dc:	3b30      	subs	r3, #48	; 0x30
 80067de:	2b09      	cmp	r3, #9
 80067e0:	d94e      	bls.n	8006880 <_vfiprintf_r+0x1c4>
 80067e2:	b1b0      	cbz	r0, 8006812 <_vfiprintf_r+0x156>
 80067e4:	9207      	str	r2, [sp, #28]
 80067e6:	e014      	b.n	8006812 <_vfiprintf_r+0x156>
 80067e8:	eba0 0308 	sub.w	r3, r0, r8
 80067ec:	fa09 f303 	lsl.w	r3, r9, r3
 80067f0:	4313      	orrs	r3, r2
 80067f2:	9304      	str	r3, [sp, #16]
 80067f4:	46a2      	mov	sl, r4
 80067f6:	e7d2      	b.n	800679e <_vfiprintf_r+0xe2>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	1d19      	adds	r1, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	9103      	str	r1, [sp, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	bfbb      	ittet	lt
 8006804:	425b      	neglt	r3, r3
 8006806:	f042 0202 	orrlt.w	r2, r2, #2
 800680a:	9307      	strge	r3, [sp, #28]
 800680c:	9307      	strlt	r3, [sp, #28]
 800680e:	bfb8      	it	lt
 8006810:	9204      	strlt	r2, [sp, #16]
 8006812:	7823      	ldrb	r3, [r4, #0]
 8006814:	2b2e      	cmp	r3, #46	; 0x2e
 8006816:	d10c      	bne.n	8006832 <_vfiprintf_r+0x176>
 8006818:	7863      	ldrb	r3, [r4, #1]
 800681a:	2b2a      	cmp	r3, #42	; 0x2a
 800681c:	d135      	bne.n	800688a <_vfiprintf_r+0x1ce>
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	1d1a      	adds	r2, r3, #4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	9203      	str	r2, [sp, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	bfb8      	it	lt
 800682a:	f04f 33ff 	movlt.w	r3, #4294967295
 800682e:	3402      	adds	r4, #2
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006918 <_vfiprintf_r+0x25c>
 8006836:	7821      	ldrb	r1, [r4, #0]
 8006838:	2203      	movs	r2, #3
 800683a:	4650      	mov	r0, sl
 800683c:	f7f9 fcd0 	bl	80001e0 <memchr>
 8006840:	b140      	cbz	r0, 8006854 <_vfiprintf_r+0x198>
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	eba0 000a 	sub.w	r0, r0, sl
 8006848:	fa03 f000 	lsl.w	r0, r3, r0
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	4303      	orrs	r3, r0
 8006850:	3401      	adds	r4, #1
 8006852:	9304      	str	r3, [sp, #16]
 8006854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006858:	482c      	ldr	r0, [pc, #176]	; (800690c <_vfiprintf_r+0x250>)
 800685a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800685e:	2206      	movs	r2, #6
 8006860:	f7f9 fcbe 	bl	80001e0 <memchr>
 8006864:	2800      	cmp	r0, #0
 8006866:	d03f      	beq.n	80068e8 <_vfiprintf_r+0x22c>
 8006868:	4b29      	ldr	r3, [pc, #164]	; (8006910 <_vfiprintf_r+0x254>)
 800686a:	bb1b      	cbnz	r3, 80068b4 <_vfiprintf_r+0x1f8>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	3307      	adds	r3, #7
 8006870:	f023 0307 	bic.w	r3, r3, #7
 8006874:	3308      	adds	r3, #8
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687a:	443b      	add	r3, r7
 800687c:	9309      	str	r3, [sp, #36]	; 0x24
 800687e:	e767      	b.n	8006750 <_vfiprintf_r+0x94>
 8006880:	fb0c 3202 	mla	r2, ip, r2, r3
 8006884:	460c      	mov	r4, r1
 8006886:	2001      	movs	r0, #1
 8006888:	e7a5      	b.n	80067d6 <_vfiprintf_r+0x11a>
 800688a:	2300      	movs	r3, #0
 800688c:	3401      	adds	r4, #1
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	4619      	mov	r1, r3
 8006892:	f04f 0c0a 	mov.w	ip, #10
 8006896:	4620      	mov	r0, r4
 8006898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800689c:	3a30      	subs	r2, #48	; 0x30
 800689e:	2a09      	cmp	r2, #9
 80068a0:	d903      	bls.n	80068aa <_vfiprintf_r+0x1ee>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0c5      	beq.n	8006832 <_vfiprintf_r+0x176>
 80068a6:	9105      	str	r1, [sp, #20]
 80068a8:	e7c3      	b.n	8006832 <_vfiprintf_r+0x176>
 80068aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ae:	4604      	mov	r4, r0
 80068b0:	2301      	movs	r3, #1
 80068b2:	e7f0      	b.n	8006896 <_vfiprintf_r+0x1da>
 80068b4:	ab03      	add	r3, sp, #12
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	462a      	mov	r2, r5
 80068ba:	4b16      	ldr	r3, [pc, #88]	; (8006914 <_vfiprintf_r+0x258>)
 80068bc:	a904      	add	r1, sp, #16
 80068be:	4630      	mov	r0, r6
 80068c0:	f7fd ffe0 	bl	8004884 <_printf_float>
 80068c4:	4607      	mov	r7, r0
 80068c6:	1c78      	adds	r0, r7, #1
 80068c8:	d1d6      	bne.n	8006878 <_vfiprintf_r+0x1bc>
 80068ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	d405      	bmi.n	80068dc <_vfiprintf_r+0x220>
 80068d0:	89ab      	ldrh	r3, [r5, #12]
 80068d2:	059a      	lsls	r2, r3, #22
 80068d4:	d402      	bmi.n	80068dc <_vfiprintf_r+0x220>
 80068d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d8:	f000 faaf 	bl	8006e3a <__retarget_lock_release_recursive>
 80068dc:	89ab      	ldrh	r3, [r5, #12]
 80068de:	065b      	lsls	r3, r3, #25
 80068e0:	f53f af12 	bmi.w	8006708 <_vfiprintf_r+0x4c>
 80068e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068e6:	e711      	b.n	800670c <_vfiprintf_r+0x50>
 80068e8:	ab03      	add	r3, sp, #12
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	462a      	mov	r2, r5
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <_vfiprintf_r+0x258>)
 80068f0:	a904      	add	r1, sp, #16
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7fe fa6a 	bl	8004dcc <_printf_i>
 80068f8:	e7e4      	b.n	80068c4 <_vfiprintf_r+0x208>
 80068fa:	bf00      	nop
 80068fc:	080075d4 	.word	0x080075d4
 8006900:	080075f4 	.word	0x080075f4
 8006904:	080075b4 	.word	0x080075b4
 8006908:	080074a2 	.word	0x080074a2
 800690c:	080074ac 	.word	0x080074ac
 8006910:	08004885 	.word	0x08004885
 8006914:	08006697 	.word	0x08006697
 8006918:	080074a8 	.word	0x080074a8

0800691c <__swbuf_r>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	4614      	mov	r4, r2
 8006922:	4605      	mov	r5, r0
 8006924:	b118      	cbz	r0, 800692e <__swbuf_r+0x12>
 8006926:	6983      	ldr	r3, [r0, #24]
 8006928:	b90b      	cbnz	r3, 800692e <__swbuf_r+0x12>
 800692a:	f000 f9e7 	bl	8006cfc <__sinit>
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <__swbuf_r+0x98>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d12b      	bne.n	800698c <__swbuf_r+0x70>
 8006934:	686c      	ldr	r4, [r5, #4]
 8006936:	69a3      	ldr	r3, [r4, #24]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	071a      	lsls	r2, r3, #28
 800693e:	d52f      	bpl.n	80069a0 <__swbuf_r+0x84>
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	b36b      	cbz	r3, 80069a0 <__swbuf_r+0x84>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	6820      	ldr	r0, [r4, #0]
 8006948:	1ac0      	subs	r0, r0, r3
 800694a:	6963      	ldr	r3, [r4, #20]
 800694c:	b2f6      	uxtb	r6, r6
 800694e:	4283      	cmp	r3, r0
 8006950:	4637      	mov	r7, r6
 8006952:	dc04      	bgt.n	800695e <__swbuf_r+0x42>
 8006954:	4621      	mov	r1, r4
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f93c 	bl	8006bd4 <_fflush_r>
 800695c:	bb30      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	3b01      	subs	r3, #1
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	701e      	strb	r6, [r3, #0]
 800696c:	6963      	ldr	r3, [r4, #20]
 800696e:	3001      	adds	r0, #1
 8006970:	4283      	cmp	r3, r0
 8006972:	d004      	beq.n	800697e <__swbuf_r+0x62>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	07db      	lsls	r3, r3, #31
 8006978:	d506      	bpl.n	8006988 <__swbuf_r+0x6c>
 800697a:	2e0a      	cmp	r6, #10
 800697c:	d104      	bne.n	8006988 <__swbuf_r+0x6c>
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f000 f927 	bl	8006bd4 <_fflush_r>
 8006986:	b988      	cbnz	r0, 80069ac <__swbuf_r+0x90>
 8006988:	4638      	mov	r0, r7
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <__swbuf_r+0x9c>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swbuf_r+0x7a>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7cf      	b.n	8006936 <__swbuf_r+0x1a>
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <__swbuf_r+0xa0>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7ca      	b.n	8006936 <__swbuf_r+0x1a>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f81a 	bl	80069dc <__swsetup_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d0cb      	beq.n	8006944 <__swbuf_r+0x28>
 80069ac:	f04f 37ff 	mov.w	r7, #4294967295
 80069b0:	e7ea      	b.n	8006988 <__swbuf_r+0x6c>
 80069b2:	bf00      	nop
 80069b4:	080075d4 	.word	0x080075d4
 80069b8:	080075f4 	.word	0x080075f4
 80069bc:	080075b4 	.word	0x080075b4

080069c0 <__ascii_wctomb>:
 80069c0:	b149      	cbz	r1, 80069d6 <__ascii_wctomb+0x16>
 80069c2:	2aff      	cmp	r2, #255	; 0xff
 80069c4:	bf85      	ittet	hi
 80069c6:	238a      	movhi	r3, #138	; 0x8a
 80069c8:	6003      	strhi	r3, [r0, #0]
 80069ca:	700a      	strbls	r2, [r1, #0]
 80069cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80069d0:	bf98      	it	ls
 80069d2:	2001      	movls	r0, #1
 80069d4:	4770      	bx	lr
 80069d6:	4608      	mov	r0, r1
 80069d8:	4770      	bx	lr
	...

080069dc <__swsetup_r>:
 80069dc:	4b32      	ldr	r3, [pc, #200]	; (8006aa8 <__swsetup_r+0xcc>)
 80069de:	b570      	push	{r4, r5, r6, lr}
 80069e0:	681d      	ldr	r5, [r3, #0]
 80069e2:	4606      	mov	r6, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	b125      	cbz	r5, 80069f2 <__swsetup_r+0x16>
 80069e8:	69ab      	ldr	r3, [r5, #24]
 80069ea:	b913      	cbnz	r3, 80069f2 <__swsetup_r+0x16>
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 f985 	bl	8006cfc <__sinit>
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <__swsetup_r+0xd0>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d10f      	bne.n	8006a18 <__swsetup_r+0x3c>
 80069f8:	686c      	ldr	r4, [r5, #4]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a00:	0719      	lsls	r1, r3, #28
 8006a02:	d42c      	bmi.n	8006a5e <__swsetup_r+0x82>
 8006a04:	06dd      	lsls	r5, r3, #27
 8006a06:	d411      	bmi.n	8006a2c <__swsetup_r+0x50>
 8006a08:	2309      	movs	r3, #9
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	f04f 30ff 	mov.w	r0, #4294967295
 8006a16:	e03e      	b.n	8006a96 <__swsetup_r+0xba>
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <__swsetup_r+0xd4>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d101      	bne.n	8006a22 <__swsetup_r+0x46>
 8006a1e:	68ac      	ldr	r4, [r5, #8]
 8006a20:	e7eb      	b.n	80069fa <__swsetup_r+0x1e>
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <__swsetup_r+0xd8>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	bf08      	it	eq
 8006a28:	68ec      	ldreq	r4, [r5, #12]
 8006a2a:	e7e6      	b.n	80069fa <__swsetup_r+0x1e>
 8006a2c:	0758      	lsls	r0, r3, #29
 8006a2e:	d512      	bpl.n	8006a56 <__swsetup_r+0x7a>
 8006a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a32:	b141      	cbz	r1, 8006a46 <__swsetup_r+0x6a>
 8006a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d002      	beq.n	8006a42 <__swsetup_r+0x66>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff fd0b 	bl	8006458 <_free_r>
 8006a42:	2300      	movs	r3, #0
 8006a44:	6363      	str	r3, [r4, #52]	; 0x34
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b94b      	cbnz	r3, 8006a76 <__swsetup_r+0x9a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0x9a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 fa07 	bl	8006e84 <__smakebuf_r>
 8006a76:	89a0      	ldrh	r0, [r4, #12]
 8006a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a7c:	f010 0301 	ands.w	r3, r0, #1
 8006a80:	d00a      	beq.n	8006a98 <__swsetup_r+0xbc>
 8006a82:	2300      	movs	r3, #0
 8006a84:	60a3      	str	r3, [r4, #8]
 8006a86:	6963      	ldr	r3, [r4, #20]
 8006a88:	425b      	negs	r3, r3
 8006a8a:	61a3      	str	r3, [r4, #24]
 8006a8c:	6923      	ldr	r3, [r4, #16]
 8006a8e:	b943      	cbnz	r3, 8006aa2 <__swsetup_r+0xc6>
 8006a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a94:	d1ba      	bne.n	8006a0c <__swsetup_r+0x30>
 8006a96:	bd70      	pop	{r4, r5, r6, pc}
 8006a98:	0781      	lsls	r1, r0, #30
 8006a9a:	bf58      	it	pl
 8006a9c:	6963      	ldrpl	r3, [r4, #20]
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	e7f4      	b.n	8006a8c <__swsetup_r+0xb0>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e7f7      	b.n	8006a96 <__swsetup_r+0xba>
 8006aa6:	bf00      	nop
 8006aa8:	2000000c 	.word	0x2000000c
 8006aac:	080075d4 	.word	0x080075d4
 8006ab0:	080075f4 	.word	0x080075f4
 8006ab4:	080075b4 	.word	0x080075b4

08006ab8 <abort>:
 8006ab8:	b508      	push	{r3, lr}
 8006aba:	2006      	movs	r0, #6
 8006abc:	f000 fa4a 	bl	8006f54 <raise>
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f7fa fe13 	bl	80016ec <_exit>
	...

08006ac8 <__sflush_r>:
 8006ac8:	898a      	ldrh	r2, [r1, #12]
 8006aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	0710      	lsls	r0, r2, #28
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	d458      	bmi.n	8006b88 <__sflush_r+0xc0>
 8006ad6:	684b      	ldr	r3, [r1, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc05      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dc02      	bgt.n	8006ae8 <__sflush_r+0x20>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d0f9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006aee:	2300      	movs	r3, #0
 8006af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006af4:	682f      	ldr	r7, [r5, #0]
 8006af6:	602b      	str	r3, [r5, #0]
 8006af8:	d032      	beq.n	8006b60 <__sflush_r+0x98>
 8006afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	075a      	lsls	r2, r3, #29
 8006b00:	d505      	bpl.n	8006b0e <__sflush_r+0x46>
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	1ac0      	subs	r0, r0, r3
 8006b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b08:	b10b      	cbz	r3, 8006b0e <__sflush_r+0x46>
 8006b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b0c:	1ac0      	subs	r0, r0, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4602      	mov	r2, r0
 8006b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b14:	6a21      	ldr	r1, [r4, #32]
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b0      	blx	r6
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	d106      	bne.n	8006b2e <__sflush_r+0x66>
 8006b20:	6829      	ldr	r1, [r5, #0]
 8006b22:	291d      	cmp	r1, #29
 8006b24:	d82c      	bhi.n	8006b80 <__sflush_r+0xb8>
 8006b26:	4a2a      	ldr	r2, [pc, #168]	; (8006bd0 <__sflush_r+0x108>)
 8006b28:	40ca      	lsrs	r2, r1
 8006b2a:	07d6      	lsls	r6, r2, #31
 8006b2c:	d528      	bpl.n	8006b80 <__sflush_r+0xb8>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6062      	str	r2, [r4, #4]
 8006b32:	04d9      	lsls	r1, r3, #19
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	6022      	str	r2, [r4, #0]
 8006b38:	d504      	bpl.n	8006b44 <__sflush_r+0x7c>
 8006b3a:	1c42      	adds	r2, r0, #1
 8006b3c:	d101      	bne.n	8006b42 <__sflush_r+0x7a>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	b903      	cbnz	r3, 8006b44 <__sflush_r+0x7c>
 8006b42:	6560      	str	r0, [r4, #84]	; 0x54
 8006b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b46:	602f      	str	r7, [r5, #0]
 8006b48:	2900      	cmp	r1, #0
 8006b4a:	d0ca      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b50:	4299      	cmp	r1, r3
 8006b52:	d002      	beq.n	8006b5a <__sflush_r+0x92>
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff fc7f 	bl	8006458 <_free_r>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b5e:	e7c1      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b60:	6a21      	ldr	r1, [r4, #32]
 8006b62:	2301      	movs	r3, #1
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b0      	blx	r6
 8006b68:	1c41      	adds	r1, r0, #1
 8006b6a:	d1c7      	bne.n	8006afc <__sflush_r+0x34>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0c4      	beq.n	8006afc <__sflush_r+0x34>
 8006b72:	2b1d      	cmp	r3, #29
 8006b74:	d001      	beq.n	8006b7a <__sflush_r+0xb2>
 8006b76:	2b16      	cmp	r3, #22
 8006b78:	d101      	bne.n	8006b7e <__sflush_r+0xb6>
 8006b7a:	602f      	str	r7, [r5, #0]
 8006b7c:	e7b1      	b.n	8006ae2 <__sflush_r+0x1a>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7ad      	b.n	8006ae4 <__sflush_r+0x1c>
 8006b88:	690f      	ldr	r7, [r1, #16]
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	d0a9      	beq.n	8006ae2 <__sflush_r+0x1a>
 8006b8e:	0793      	lsls	r3, r2, #30
 8006b90:	680e      	ldr	r6, [r1, #0]
 8006b92:	bf08      	it	eq
 8006b94:	694b      	ldreq	r3, [r1, #20]
 8006b96:	600f      	str	r7, [r1, #0]
 8006b98:	bf18      	it	ne
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	eba6 0807 	sub.w	r8, r6, r7
 8006ba0:	608b      	str	r3, [r1, #8]
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd9c      	ble.n	8006ae2 <__sflush_r+0x1a>
 8006ba8:	6a21      	ldr	r1, [r4, #32]
 8006baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bac:	4643      	mov	r3, r8
 8006bae:	463a      	mov	r2, r7
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	47b0      	blx	r6
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	dc06      	bgt.n	8006bc6 <__sflush_r+0xfe>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e78e      	b.n	8006ae4 <__sflush_r+0x1c>
 8006bc6:	4407      	add	r7, r0
 8006bc8:	eba8 0800 	sub.w	r8, r8, r0
 8006bcc:	e7e9      	b.n	8006ba2 <__sflush_r+0xda>
 8006bce:	bf00      	nop
 8006bd0:	20400001 	.word	0x20400001

08006bd4 <_fflush_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	690b      	ldr	r3, [r1, #16]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	b913      	cbnz	r3, 8006be4 <_fflush_r+0x10>
 8006bde:	2500      	movs	r5, #0
 8006be0:	4628      	mov	r0, r5
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	b118      	cbz	r0, 8006bee <_fflush_r+0x1a>
 8006be6:	6983      	ldr	r3, [r0, #24]
 8006be8:	b90b      	cbnz	r3, 8006bee <_fflush_r+0x1a>
 8006bea:	f000 f887 	bl	8006cfc <__sinit>
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <_fflush_r+0x6c>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d11b      	bne.n	8006c2c <_fflush_r+0x58>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <_fflush_r+0xa>
 8006bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c00:	07d0      	lsls	r0, r2, #31
 8006c02:	d404      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c04:	0599      	lsls	r1, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_fflush_r+0x3a>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f000 f915 	bl	8006e38 <__retarget_lock_acquire_recursive>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	4621      	mov	r1, r4
 8006c12:	f7ff ff59 	bl	8006ac8 <__sflush_r>
 8006c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c18:	07da      	lsls	r2, r3, #31
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	d4e0      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	059b      	lsls	r3, r3, #22
 8006c22:	d4dd      	bmi.n	8006be0 <_fflush_r+0xc>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f908 	bl	8006e3a <__retarget_lock_release_recursive>
 8006c2a:	e7d9      	b.n	8006be0 <_fflush_r+0xc>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_fflush_r+0x70>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <_fflush_r+0x62>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7df      	b.n	8006bf6 <_fflush_r+0x22>
 8006c36:	4b04      	ldr	r3, [pc, #16]	; (8006c48 <_fflush_r+0x74>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7da      	b.n	8006bf6 <_fflush_r+0x22>
 8006c40:	080075d4 	.word	0x080075d4
 8006c44:	080075f4 	.word	0x080075f4
 8006c48:	080075b4 	.word	0x080075b4

08006c4c <std>:
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	4604      	mov	r4, r0
 8006c52:	e9c0 3300 	strd	r3, r3, [r0]
 8006c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c5a:	6083      	str	r3, [r0, #8]
 8006c5c:	8181      	strh	r1, [r0, #12]
 8006c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c60:	81c2      	strh	r2, [r0, #14]
 8006c62:	6183      	str	r3, [r0, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	2208      	movs	r2, #8
 8006c68:	305c      	adds	r0, #92	; 0x5c
 8006c6a:	f7fd fd63 	bl	8004734 <memset>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <std+0x38>)
 8006c70:	6263      	str	r3, [r4, #36]	; 0x24
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <std+0x3c>)
 8006c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x40>)
 8006c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x44>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08006f8d 	.word	0x08006f8d
 8006c88:	08006faf 	.word	0x08006faf
 8006c8c:	08006fe7 	.word	0x08006fe7
 8006c90:	0800700b 	.word	0x0800700b

08006c94 <_cleanup_r>:
 8006c94:	4901      	ldr	r1, [pc, #4]	; (8006c9c <_cleanup_r+0x8>)
 8006c96:	f000 b8af 	b.w	8006df8 <_fwalk_reent>
 8006c9a:	bf00      	nop
 8006c9c:	08006bd5 	.word	0x08006bd5

08006ca0 <__sfmoreglue>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	1e4a      	subs	r2, r1, #1
 8006ca4:	2568      	movs	r5, #104	; 0x68
 8006ca6:	4355      	muls	r5, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cae:	f7ff fc23 	bl	80064f8 <_malloc_r>
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	b140      	cbz	r0, 8006cc8 <__sfmoreglue+0x28>
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cbc:	300c      	adds	r0, #12
 8006cbe:	60a0      	str	r0, [r4, #8]
 8006cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cc4:	f7fd fd36 	bl	8004734 <memset>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	bd70      	pop	{r4, r5, r6, pc}

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	; (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 b8b3 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000324 	.word	0x20000324

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 b8ae 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20000324 	.word	0x20000324

08006ce4 <__sinit_lock_acquire>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__sinit_lock_acquire+0x8>)
 8006ce6:	f000 b8a7 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006cea:	bf00      	nop
 8006cec:	2000031f 	.word	0x2000031f

08006cf0 <__sinit_lock_release>:
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <__sinit_lock_release+0x8>)
 8006cf2:	f000 b8a2 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006cf6:	bf00      	nop
 8006cf8:	2000031f 	.word	0x2000031f

08006cfc <__sinit>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4604      	mov	r4, r0
 8006d00:	f7ff fff0 	bl	8006ce4 <__sinit_lock_acquire>
 8006d04:	69a3      	ldr	r3, [r4, #24]
 8006d06:	b11b      	cbz	r3, 8006d10 <__sinit+0x14>
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f7ff bff0 	b.w	8006cf0 <__sinit_lock_release>
 8006d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d14:	6523      	str	r3, [r4, #80]	; 0x50
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <__sinit+0x68>)
 8006d18:	4a13      	ldr	r2, [pc, #76]	; (8006d68 <__sinit+0x6c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d1e:	42a3      	cmp	r3, r4
 8006d20:	bf04      	itt	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	61a3      	streq	r3, [r4, #24]
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 f820 	bl	8006d6c <__sfp>
 8006d2c:	6060      	str	r0, [r4, #4]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 f81c 	bl	8006d6c <__sfp>
 8006d34:	60a0      	str	r0, [r4, #8]
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 f818 	bl	8006d6c <__sfp>
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	60e0      	str	r0, [r4, #12]
 8006d40:	2104      	movs	r1, #4
 8006d42:	6860      	ldr	r0, [r4, #4]
 8006d44:	f7ff ff82 	bl	8006c4c <std>
 8006d48:	68a0      	ldr	r0, [r4, #8]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	2109      	movs	r1, #9
 8006d4e:	f7ff ff7d 	bl	8006c4c <std>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	2112      	movs	r1, #18
 8006d58:	f7ff ff78 	bl	8006c4c <std>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	61a3      	str	r3, [r4, #24]
 8006d60:	e7d2      	b.n	8006d08 <__sinit+0xc>
 8006d62:	bf00      	nop
 8006d64:	08007230 	.word	0x08007230
 8006d68:	08006c95 	.word	0x08006c95

08006d6c <__sfp>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	f7ff ffac 	bl	8006ccc <__sfp_lock_acquire>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <__sfp+0x84>)
 8006d76:	681e      	ldr	r6, [r3, #0]
 8006d78:	69b3      	ldr	r3, [r6, #24]
 8006d7a:	b913      	cbnz	r3, 8006d82 <__sfp+0x16>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff ffbd 	bl	8006cfc <__sinit>
 8006d82:	3648      	adds	r6, #72	; 0x48
 8006d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	d503      	bpl.n	8006d94 <__sfp+0x28>
 8006d8c:	6833      	ldr	r3, [r6, #0]
 8006d8e:	b30b      	cbz	r3, 8006dd4 <__sfp+0x68>
 8006d90:	6836      	ldr	r6, [r6, #0]
 8006d92:	e7f7      	b.n	8006d84 <__sfp+0x18>
 8006d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d98:	b9d5      	cbnz	r5, 8006dd0 <__sfp+0x64>
 8006d9a:	4b16      	ldr	r3, [pc, #88]	; (8006df4 <__sfp+0x88>)
 8006d9c:	60e3      	str	r3, [r4, #12]
 8006d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da2:	6665      	str	r5, [r4, #100]	; 0x64
 8006da4:	f000 f847 	bl	8006e36 <__retarget_lock_init_recursive>
 8006da8:	f7ff ff96 	bl	8006cd8 <__sfp_lock_release>
 8006dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006db4:	6025      	str	r5, [r4, #0]
 8006db6:	61a5      	str	r5, [r4, #24]
 8006db8:	2208      	movs	r2, #8
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc0:	f7fd fcb8 	bl	8004734 <memset>
 8006dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	3468      	adds	r4, #104	; 0x68
 8006dd2:	e7d9      	b.n	8006d88 <__sfp+0x1c>
 8006dd4:	2104      	movs	r1, #4
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff62 	bl	8006ca0 <__sfmoreglue>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1d5      	bne.n	8006d90 <__sfp+0x24>
 8006de4:	f7ff ff78 	bl	8006cd8 <__sfp_lock_release>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	e7ee      	b.n	8006dcc <__sfp+0x60>
 8006dee:	bf00      	nop
 8006df0:	08007230 	.word	0x08007230
 8006df4:	ffff0001 	.word	0xffff0001

08006df8 <_fwalk_reent>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e04:	2700      	movs	r7, #0
 8006e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0e:	d505      	bpl.n	8006e1c <_fwalk_reent+0x24>
 8006e10:	6824      	ldr	r4, [r4, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d1f7      	bne.n	8006e06 <_fwalk_reent+0xe>
 8006e16:	4638      	mov	r0, r7
 8006e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d907      	bls.n	8006e32 <_fwalk_reent+0x3a>
 8006e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e26:	3301      	adds	r3, #1
 8006e28:	d003      	beq.n	8006e32 <_fwalk_reent+0x3a>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	4307      	orrs	r7, r0
 8006e32:	3568      	adds	r5, #104	; 0x68
 8006e34:	e7e9      	b.n	8006e0a <_fwalk_reent+0x12>

08006e36 <__retarget_lock_init_recursive>:
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_acquire_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_release_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__swhatbuf_r>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	460e      	mov	r6, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	2900      	cmp	r1, #0
 8006e46:	b096      	sub	sp, #88	; 0x58
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	da07      	bge.n	8006e5e <__swhatbuf_r+0x22>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	89b3      	ldrh	r3, [r6, #12]
 8006e54:	061a      	lsls	r2, r3, #24
 8006e56:	d410      	bmi.n	8006e7a <__swhatbuf_r+0x3e>
 8006e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5c:	e00e      	b.n	8006e7c <__swhatbuf_r+0x40>
 8006e5e:	466a      	mov	r2, sp
 8006e60:	f000 f8fa 	bl	8007058 <_fstat_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	dbf2      	blt.n	8006e4e <__swhatbuf_r+0x12>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e72:	425a      	negs	r2, r3
 8006e74:	415a      	adcs	r2, r3
 8006e76:	602a      	str	r2, [r5, #0]
 8006e78:	e7ee      	b.n	8006e58 <__swhatbuf_r+0x1c>
 8006e7a:	2340      	movs	r3, #64	; 0x40
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	b016      	add	sp, #88	; 0x58
 8006e82:	bd70      	pop	{r4, r5, r6, pc}

08006e84 <__smakebuf_r>:
 8006e84:	898b      	ldrh	r3, [r1, #12]
 8006e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e88:	079d      	lsls	r5, r3, #30
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	d507      	bpl.n	8006ea0 <__smakebuf_r+0x1c>
 8006e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	6123      	str	r3, [r4, #16]
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6163      	str	r3, [r4, #20]
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	ab01      	add	r3, sp, #4
 8006ea2:	466a      	mov	r2, sp
 8006ea4:	f7ff ffca 	bl	8006e3c <__swhatbuf_r>
 8006ea8:	9900      	ldr	r1, [sp, #0]
 8006eaa:	4605      	mov	r5, r0
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff fb23 	bl	80064f8 <_malloc_r>
 8006eb2:	b948      	cbnz	r0, 8006ec8 <__smakebuf_r+0x44>
 8006eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb8:	059a      	lsls	r2, r3, #22
 8006eba:	d4ef      	bmi.n	8006e9c <__smakebuf_r+0x18>
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	f043 0302 	orr.w	r3, r3, #2
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7e3      	b.n	8006e90 <__smakebuf_r+0xc>
 8006ec8:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <__smakebuf_r+0x7c>)
 8006eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	6020      	str	r0, [r4, #0]
 8006ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	9b00      	ldr	r3, [sp, #0]
 8006ed8:	6163      	str	r3, [r4, #20]
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	6120      	str	r0, [r4, #16]
 8006ede:	b15b      	cbz	r3, 8006ef8 <__smakebuf_r+0x74>
 8006ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f8c9 	bl	800707c <_isatty_r>
 8006eea:	b128      	cbz	r0, 8006ef8 <__smakebuf_r+0x74>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	f043 0301 	orr.w	r3, r3, #1
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	89a0      	ldrh	r0, [r4, #12]
 8006efa:	4305      	orrs	r5, r0
 8006efc:	81a5      	strh	r5, [r4, #12]
 8006efe:	e7cd      	b.n	8006e9c <__smakebuf_r+0x18>
 8006f00:	08006c95 	.word	0x08006c95

08006f04 <_raise_r>:
 8006f04:	291f      	cmp	r1, #31
 8006f06:	b538      	push	{r3, r4, r5, lr}
 8006f08:	4604      	mov	r4, r0
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	d904      	bls.n	8006f18 <_raise_r+0x14>
 8006f0e:	2316      	movs	r3, #22
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f1a:	b112      	cbz	r2, 8006f22 <_raise_r+0x1e>
 8006f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f20:	b94b      	cbnz	r3, 8006f36 <_raise_r+0x32>
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f830 	bl	8006f88 <_getpid_r>
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f32:	f000 b817 	b.w	8006f64 <_kill_r>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d00a      	beq.n	8006f50 <_raise_r+0x4c>
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	d103      	bne.n	8006f46 <_raise_r+0x42>
 8006f3e:	2316      	movs	r3, #22
 8006f40:	6003      	str	r3, [r0, #0]
 8006f42:	2001      	movs	r0, #1
 8006f44:	e7e7      	b.n	8006f16 <_raise_r+0x12>
 8006f46:	2400      	movs	r4, #0
 8006f48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4798      	blx	r3
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7e0      	b.n	8006f16 <_raise_r+0x12>

08006f54 <raise>:
 8006f54:	4b02      	ldr	r3, [pc, #8]	; (8006f60 <raise+0xc>)
 8006f56:	4601      	mov	r1, r0
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	f7ff bfd3 	b.w	8006f04 <_raise_r>
 8006f5e:	bf00      	nop
 8006f60:	2000000c 	.word	0x2000000c

08006f64 <_kill_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	; (8006f84 <_kill_r+0x20>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f7fa fbab 	bl	80016cc <_kill>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_kill_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_kill_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20000318 	.word	0x20000318

08006f88 <_getpid_r>:
 8006f88:	f7fa bb98 	b.w	80016bc <_getpid>

08006f8c <__sread>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	460c      	mov	r4, r1
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	f000 f894 	bl	80070c0 <_read_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	bfab      	itete	ge
 8006f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006fa0:	181b      	addge	r3, r3, r0
 8006fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fa6:	bfac      	ite	ge
 8006fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006faa:	81a3      	strhlt	r3, [r4, #12]
 8006fac:	bd10      	pop	{r4, pc}

08006fae <__swrite>:
 8006fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	461f      	mov	r7, r3
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	4605      	mov	r5, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	d505      	bpl.n	8006fcc <__swrite+0x1e>
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f000 f868 	bl	800709c <_lseek_r>
 8006fcc:	89a3      	ldrh	r3, [r4, #12]
 8006fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	463b      	mov	r3, r7
 8006fdc:	4628      	mov	r0, r5
 8006fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe2:	f000 b817 	b.w	8007014 <_write_r>

08006fe6 <__sseek>:
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fee:	f000 f855 	bl	800709c <_lseek_r>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	bf15      	itete	ne
 8006ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007002:	81a3      	strheq	r3, [r4, #12]
 8007004:	bf18      	it	ne
 8007006:	81a3      	strhne	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__sclose>:
 800700a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700e:	f000 b813 	b.w	8007038 <_close_r>
	...

08007014 <_write_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	; (8007034 <_write_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7fa fb89 	bl	800173a <_write>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_write_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_write_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000318 	.word	0x20000318

08007038 <_close_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	; (8007054 <_close_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa fb95 	bl	8001772 <_close>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_close_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_close_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20000318 	.word	0x20000318

08007058 <_fstat_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	; (8007078 <_fstat_r+0x20>)
 800705c:	2300      	movs	r3, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	f7fa fb90 	bl	800178a <_fstat>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	d102      	bne.n	8007074 <_fstat_r+0x1c>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	b103      	cbz	r3, 8007074 <_fstat_r+0x1c>
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	20000318 	.word	0x20000318

0800707c <_isatty_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d06      	ldr	r5, [pc, #24]	; (8007098 <_isatty_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	f7fa fb8f 	bl	80017aa <_isatty>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_isatty_r+0x1a>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b103      	cbz	r3, 8007096 <_isatty_r+0x1a>
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000318 	.word	0x20000318

0800709c <_lseek_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	; (80070bc <_lseek_r+0x20>)
 80070a0:	4604      	mov	r4, r0
 80070a2:	4608      	mov	r0, r1
 80070a4:	4611      	mov	r1, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	602a      	str	r2, [r5, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	f7fa fb88 	bl	80017c0 <_lseek>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_lseek_r+0x1e>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_lseek_r+0x1e>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	20000318 	.word	0x20000318

080070c0 <_read_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d07      	ldr	r5, [pc, #28]	; (80070e0 <_read_r+0x20>)
 80070c4:	4604      	mov	r4, r0
 80070c6:	4608      	mov	r0, r1
 80070c8:	4611      	mov	r1, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fa fb16 	bl	8001700 <_read>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_read_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_read_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20000318 	.word	0x20000318

080070e4 <_init>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr

080070f0 <_fini>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr
